{
  "address": "0xEe6618d33D800e2d0593C1D78073541F612d455e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addressManager",
      "outputs": [
        {
          "internalType": "contract IAddressManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_addressManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9a99f0a97b0ee6fc7951edd347782a76e4d42ec721a0a2253c96e2ffc6577051",
  "receipt": {
    "to": null,
    "from": "0x8f1809FA5DDcf8275cf9C92fCeF40B2154a01022",
    "contractAddress": "0xEe6618d33D800e2d0593C1D78073541F612d455e",
    "transactionIndex": 7,
    "gasUsed": "2842288",
    "logsBloom": "0x
    "blockHash": "0x1d0b35fab1cde41c118e5c39b3cc81ca872488ff69305fd3867dd4d246f1cb7c",
    "transactionHash": "0x9a99f0a97b0ee6fc7951edd347782a76e4d42ec721a0a2253c96e2ffc6577051",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 29173494,
        "transactionHash": "0x9a99f0a97b0ee6fc7951edd347782a76e4d42ec721a0a2253c96e2ffc6577051",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008f1809fa5ddcf8275cf9c92fcef40b2154a01022",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000193e9d5c793000000000000000000000000000000000000000000000000000018f073a613310ee0000000000000000000000000000000000000000000017939b14d4378260221d0000000000000000000000000000000000000000000000000175c89d04b9e0ee0000000000000000000000000000000000000000000017939b2e12d4ded9521d",
        "logIndex": 17,
        "blockHash": "0x1d0b35fab1cde41c118e5c39b3cc81ca872488ff69305fd3867dd4d246f1cb7c"
      }
    ],
    "blockNumber": 29173494,
    "cumulativeGasUsed": "3874071",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e5086af1310b7ca1d6194e2a0e3afebd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressManager\",\"outputs\":[{\"internalType\":\"contract IAddressManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_addressManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract implements the ERC115 standard and is used for unit testing purposes only Anyone can mint or burn tokens\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"burn(address,uint256,uint256)\":{\"details\":\"allows anyone to burn tokens\"},\"initialize(string,address)\":{\"details\":\"initializer to call after deployment, can only be called once\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"mint(address,uint256,uint256,bytes)\":{\"details\":\"Allows anyone to mint tokens\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"title\":\"TestErc1155\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Testing/TestErc1155.sol\":\"TestErc1155\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xe9208ac0602174f0ed30fb10c6292193308424dfa375a8270027d65878d4a812\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/Config/IAddressManager.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"../Permissions/IRoleManager.sol\\\";\\nimport \\\"../Parameters/IParameterManager.sol\\\";\\nimport \\\"../Maker/IMakerRegistrar.sol\\\";\\nimport \\\"../Token/IStandard1155.sol\\\";\\nimport \\\"../Reactions/IReactionVault.sol\\\";\\nimport \\\"../CuratorVault/ICuratorVault.sol\\\";\\n\\ninterface IAddressManager {\\n    /// @dev Getter for the role manager address\\n    function roleManager() external returns (IRoleManager);\\n\\n    /// @dev Setter for the role manager address\\n    function setRoleManager(IRoleManager _roleManager) external;\\n\\n    /// @dev Getter for the role manager address\\n    function parameterManager() external returns (IParameterManager);\\n\\n    /// @dev Setter for the role manager address\\n    function setParameterManager(IParameterManager _parameterManager) external;\\n\\n    /// @dev Getter for the maker registrar address\\n    function makerRegistrar() external returns (IMakerRegistrar);\\n\\n    /// @dev Setter for the maker registrar address\\n    function setMakerRegistrar(IMakerRegistrar _makerRegistrar) external;\\n\\n    /// @dev Getter for the reaction NFT contract address\\n    function reactionNftContract() external returns (IStandard1155);\\n\\n    /// @dev Setter for the reaction NFT contract address\\n    function setReactionNftContract(IStandard1155 _reactionNftContract)\\n        external;\\n\\n    /// @dev Getter for the default Curator Vault contract address\\n    function defaultCuratorVault() external returns (ICuratorVault);\\n\\n    /// @dev Setter for the default Curator Vault contract address\\n    function setDefaultCuratorVault(ICuratorVault _defaultCuratorVault)\\n        external;\\n\\n    /// @dev Getter for the L2 bridge registrar\\n    function childRegistrar() external returns (address);\\n\\n    /// @dev Setter for the L2 bridge registrar\\n    function setChildRegistrar(address _childRegistrar) external;\\n\\n    /// @dev Getter for the address of the royalty registry\\n    function royaltyRegistry() external returns (address);\\n\\n    /// @dev Setter for the address of the royalty registry\\n    function setRoyaltyRegistry(address _royaltyRegistry) external;\\n}\\n\",\"keccak256\":\"0x81fcb53edee0855c6654f161d0f34980ea5d06e8950039b444c507ca7629afd8\",\"license\":\"GPL-3.0\"},\"contracts/CuratorVault/ICuratorVault.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"../Token/IStandard1155.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n/// @dev Interface for the curator vault\\ninterface ICuratorVault {\\n    function getTokenId(\\n        uint256 nftChainId,\\n        address nftAddress,\\n        uint256 nftId,\\n        IERC20Upgradeable paymentToken\\n    ) external returns (uint256);\\n\\n    function buyCuratorTokens(\\n        uint256 nftChainId,\\n        address nftAddress,\\n        uint256 nftId,\\n        IERC20Upgradeable paymentToken,\\n        uint256 paymentAmount,\\n        address mintToAddress,\\n        bool isTakerPosition\\n    ) external returns (uint256);\\n\\n    function sellCuratorTokens(\\n        uint256 nftChainId,\\n        address nftAddress,\\n        uint256 nftId,\\n        IERC20Upgradeable paymentToken,\\n        uint256 tokensToBurn,\\n        address refundToAddress\\n    ) external returns (uint256);\\n\\n    function curatorTokens() external returns (IStandard1155);\\n}\\n\",\"keccak256\":\"0xa0fff1bcbd5b23d0bae8387f87b0be81223239bdab5a1d30c423f01cd5d3cba4\",\"license\":\"GPL-3.0\"},\"contracts/Maker/IMakerRegistrar.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\n/// @dev Interface for the maker registrar that supports registering and de-registering NFTs\\ninterface IMakerRegistrar {\\n    /// @dev struct for storing details about a registered NFT\\n    struct NftDetails {\\n        bool registered;\\n        address owner;\\n        address[] creators;\\n        uint256[] creatorSaleBasisPoints;\\n    }\\n\\n    function transformToSourceLookup(uint256 metaId) external returns (uint256);\\n\\n    function deriveSourceId(\\n        uint256 nftChainId,\\n        address nftAddress,\\n        uint256 nftId\\n    ) external returns (uint256);\\n\\n    /// @dev lookup for NftDetails from source ID\\n    function sourceToDetailsLookup(uint256)\\n        external\\n        returns (NftDetails memory);\\n\\n    function verifyOwnership(\\n        address nftContractAddress,\\n        uint256 nftId,\\n        address potentialOwner\\n    ) external returns (bool);\\n\\n    function registerNftFromBridge(\\n        address owner,\\n        uint256 chainId,\\n        address nftContractAddress,\\n        uint256 nftId,\\n        address[] memory nftCreatorAddresses,\\n        uint256[] memory creatorSaleBasisPoints,\\n        uint256 optionBits,\\n        string memory ipfsMetadataHash\\n    ) external;\\n\\n    function deRegisterNftFromBridge(\\n        address owner,\\n        uint256 chainId,\\n        address nftContractAddress,\\n        uint256 nftId\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcba279f4966ad3a5d506b0661c847b6593805c2e25fbebb3792d33e71769656f\",\"license\":\"GPL-3.0\"},\"contracts/Parameters/IParameterManager.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"../Permissions/IRoleManager.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IParameterManager {\\n    /// @dev Getter for the payment token\\n    function paymentToken() external returns (IERC20Upgradeable);\\n\\n    /// @dev Setter for the payment token\\n    function setPaymentToken(IERC20Upgradeable _paymentToken) external;\\n\\n    /// @dev Getter for the reaction price\\n    function reactionPrice() external returns (uint256);\\n\\n    /// @dev Setter for the reaction price\\n    function setReactionPrice(uint256 _reactionPrice) external;\\n\\n    /// @dev Getter for the cut of purchase price going to the curator liability\\n    function saleCuratorLiabilityBasisPoints() external returns (uint256);\\n\\n    /// @dev Setter for the cut of purchase price going to the curator liability\\n    function setSaleCuratorLiabilityBasisPoints(\\n        uint256 _saleCuratorLiabilityBasisPoints\\n    ) external;\\n\\n    /// @dev Getter for the cut of purchase price going to the referrer\\n    function saleReferrerBasisPoints() external returns (uint256);\\n\\n    /// @dev Setter for the cut of purchase price going to the referrer\\n    function setSaleReferrerBasisPoints(uint256 _saleReferrerBasisPoints)\\n        external;\\n\\n    /// @dev Getter for the cut of spend curator liability going to the taker\\n    function spendTakerBasisPoints() external returns (uint256);\\n\\n    /// @dev Setter for the cut of spend curator liability going to the taker\\n    function setSpendTakerBasisPoints(uint256 _spendTakerBasisPoints) external;\\n\\n    /// @dev Getter for the cut of spend curator liability going to the taker\\n    function spendReferrerBasisPoints() external returns (uint256);\\n\\n    /// @dev Setter for the cut of spend curator liability going to the referrer\\n    function setSpendReferrerBasisPoints(uint256 _spendReferrerBasisPoints)\\n        external;\\n\\n    /// @dev Getter for the check to see if a curator vault is allowed to be used\\n    function approvedCuratorVaults(address potentialVault)\\n        external\\n        returns (bool);\\n\\n    /// @dev Setter for the list of curator vaults allowed to be used\\n    function setApprovedCuratorVaults(address vault, bool approved) external;\\n}\\n\",\"keccak256\":\"0xf8e7447050272d458904948cf66f7cb48c1b830828a696ddc6e56aab901be637\",\"license\":\"GPL-3.0\"},\"contracts/Permissions/IRoleManager.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\ninterface IRoleManager {\\n    /// @dev Determines if the specified address has capability to mint and burn reaction NFTs\\n    /// @param potentialAddress Address to check\\n    function isAdmin(address potentialAddress) external view returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to udpate addresses in the protocol\\n    /// @param potentialAddress Address to check\\n    function isAddressManagerAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to update parameters in the protocol\\n    /// @param potentialAddress Address to check\\n    function isParameterManagerAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to to mint and burn reaction NFTs\\n    /// @param potentialAddress Address to check\\n    function isReactionNftAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to purchase curator vault tokens\\n    /// @param potentialAddress Address to check\\n    function isCuratorVaultPurchaser(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to mint and burn curator tokens\\n    /// @param potentialAddress Address to check\\n    function isCuratorTokenAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x335b249b073e02dd1ca255772734a1f21909694cf774e8c00f04c8095bf9eb30\",\"license\":\"GPL-3.0\"},\"contracts/Reactions/IReactionVault.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @dev Interface for the ReactionVault that supports buying and spending reactions\\ninterface IReactionVault {\\n    struct ReactionPriceDetails {\\n        IERC20Upgradeable paymentToken;\\n        uint256 reactionPrice;\\n        uint256 saleCuratorLiabilityBasisPoints;\\n    }\\n}\\n\",\"keccak256\":\"0x478129551c7120cb59b70605a75d8fda4e27d9a9e3af8a6254757e20de107b61\",\"license\":\"GPL-3.0\"},\"contracts/Testing/TestErc1155.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"../Token/Standard1155.sol\\\";\\n\\n/// @title TestErc1155\\n/// @dev This contract implements the ERC115 standard and is used for unit testing purposes only\\n/// Anyone can mint or burn tokens\\ncontract TestErc1155 is Standard1155 {\\n    /// @dev Allows anyone to mint tokens\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external {\\n        _mint(to, id, amount, data);\\n    }\\n\\n    /// @dev allows anyone to burn tokens\\n    function burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) external {\\n        _burn(from, id, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x72fcfd11761860ba955f97269001e81230cfe44c2e6a3c4bfedf539c56a3dc21\",\"license\":\"GPL-3.0\"},\"contracts/Token/IStandard1155.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\n/// @dev Interface for the Standard1155 toke contract.\\ninterface IStandard1155 {\\n    /// @dev Allows a priviledged account to mint tokens to the specified address\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    function burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4d68249e8c10bd9aab5ae4dce0c72c88ac899a451b8624c409780cd60e88abc4\",\"license\":\"GPL-3.0\"},\"contracts/Token/Standard1155.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport \\\"./IStandard1155.sol\\\";\\nimport \\\"./Standard1155Storage.sol\\\";\\n\\n/// @title Standard1155\\n/// @dev This contract implements the 1155 standard\\nabstract contract Standard1155 is\\n    IStandard1155,\\n    ERC1155Upgradeable,\\n    Standard1155StorageV1\\n{\\n    /// @dev initializer to call after deployment, can only be called once\\n    function initialize(string memory _uri, address _addressManager)\\n        public\\n        initializer\\n    {\\n        // TODO: Should the URI be updateable?\\n        __ERC1155_init(_uri);\\n\\n        addressManager = IAddressManager(_addressManager);\\n    }\\n}\\n\",\"keccak256\":\"0xe988de99b9b5eeb4981c6b79c5d170cf4209577c9935fddfa3f5732b7ead9e99\",\"license\":\"GPL-3.0\"},\"contracts/Token/Standard1155Storage.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"../Config/IAddressManager.sol\\\";\\n\\n/// @title Standard1155StorageV1\\n/// @dev This contract will hold all local variables for the Standard1155 Contract\\n/// When upgrading the protocol, inherit from this contract on the V2 version and change the\\n/// Standard1155 to inherit from the later version.  This ensures there are no storage layout\\n/// corruptions when upgrading.\\ncontract Standard1155StorageV1 {\\n    IAddressManager public addressManager;\\n}\\n\\n/// On the next version of the protocol, if new variables are added, put them in the below\\n/// contract and use this as the inheritance chain.\\n/**\\ncontract Standard1155StorageV2 is Standard1155StorageV1 {\\n  address newVariable;\\n}\\n */\\n\",\"keccak256\":\"0x62a1bcbc765c6a2b105d7b7a099d784674d0a5b50d3a9a23d1c076efeaa3ff32\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506132b5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b35760003560e01c8063731133e911610071578063731133e9146101b25780637ab4339d146101ce578063a22cb465146101ea578063e985e9c514610206578063f242432a14610236578063f5298aca14610252576100b3565b8062fdd58e146100b857806301ffc9a7146100e85780630e89341c146101185780632eb2c2d6146101485780633ab76e9f146101645780634e1273f414610182575b600080fd5b6100d260048036038101906100cd9190611bb1565b61026e565b6040516100df9190611c00565b60405180910390f35b61010260048036038101906100fd9190611c73565b610338565b60405161010f9190611cbb565b60405180910390f35b610132600480360381019061012d9190611cd6565b61041a565b60405161013f9190611d9c565b60405180910390f35b610162600480360381019061015d9190611fbb565b6104ae565b005b61016c61054f565b60405161017991906120e9565b60405180910390f35b61019c600480360381019061019791906121c7565b610575565b6040516101a991906122fd565b60405180910390f35b6101cc60048036038101906101c7919061231f565b61068e565b005b6101e860048036038101906101e39190612443565b6106a0565b005b61020460048036038101906101ff91906124cb565b610822565b005b610220600480360381019061021b919061250b565b610838565b60405161022d9190611cbb565b60405180910390f35b610250600480360381019061024b919061254b565b6108cc565b005b61026c600480360381019061026791906125e2565b61096d565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156102df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d6906126a7565b60405180910390fd5b6065600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061040357507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061041357506104128261097d565b5b9050919050565b606060678054610429906126f6565b80601f0160208091040260200160405190810160405280929190818152602001828054610455906126f6565b80156104a25780601f10610477576101008083540402835291602001916104a2565b820191906000526020600020905b81548152906001019060200180831161048557829003601f168201915b50505050509050919050565b6104b66109e7565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806104fc57506104fb856104f66109e7565b610838565b5b61053b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105329061279a565b60405180910390fd5b61054885858585856109ef565b5050505050565b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606081518351146105bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b29061282c565b60405180910390fd5b6000835167ffffffffffffffff8111156105d8576105d7611dc3565b5b6040519080825280602002602001820160405280156106065781602001602082028036833780820191505090505b50905060005b84518110156106835761065385828151811061062b5761062a61284c565b5b60200260200101518583815181106106465761064561284c565b5b602002602001015161026e565b8282815181106106665761066561284c565b5b6020026020010181815250508061067c906128aa565b905061060c565b508091505092915050565b61069a84848484610d14565b50505050565b60008060019054906101000a900460ff161590508080156106d15750600160008054906101000a900460ff1660ff16105b806106fe57506106e030610ec6565b1580156106fd5750600160008054906101000a900460ff1660ff16145b5b61073d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073490612965565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561077a576001600060016101000a81548160ff0219169083151502179055505b61078383610ee9565b81609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550801561081d5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161081491906129cd565b60405180910390a15b505050565b61083461082d6109e7565b8383610f44565b5050565b6000606660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6108d46109e7565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061091a5750610919856109146109e7565b610838565b5b610959576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109509061279a565b60405180910390fd5b61096685858585856110b1565b5050505050565b610978838383611350565b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b8151835114610a33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2a90612a5a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610aa3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9a90612aec565b60405180910390fd5b6000610aad6109e7565b9050610abd818787878787611599565b60005b8451811015610c71576000858281518110610ade57610add61284c565b5b602002602001015190506000858381518110610afd57610afc61284c565b5b6020026020010151905060006065600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610b9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9690612b7e565b60405180910390fd5b8181036065600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816065600085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c569190612b9e565b9250508190555050505080610c6a906128aa565b9050610ac0565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610ce8929190612bf4565b60405180910390a4610cfe8187878787876115a1565b610d0c8187878787876115a9565b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610d84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7b90612c9d565b60405180910390fd5b6000610d8e6109e7565b90506000610d9b85611790565b90506000610da885611790565b9050610db983600089858589611599565b846065600088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e199190612b9e565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051610e97929190612cbd565b60405180910390a4610eae836000898585896115a1565b610ebd8360008989898961180a565b50505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16610f38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2f90612d58565b60405180910390fd5b610f41816119f1565b50565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610fb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610faa90612dea565b60405180910390fd5b80606660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516110a49190611cbb565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611121576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111890612aec565b60405180910390fd5b600061112b6109e7565b9050600061113885611790565b9050600061114585611790565b9050611155838989858589611599565b60006065600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050858110156111ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e490612b7e565b60405180910390fd5b8581036065600089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550856065600089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112a49190612b9e565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a604051611321929190612cbd565b60405180910390a4611337848a8a86868a6115a1565b611345848a8a8a8a8a61180a565b505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156113c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b790612e7c565b60405180910390fd5b60006113ca6109e7565b905060006113d784611790565b905060006113e484611790565b905061140483876000858560405180602001604052806000815250611599565b60006065600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508481101561149c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149390612f0e565b60405180910390fd5b8481036065600088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62898960405161156a929190612cbd565b60405180910390a4611590848860008686604051806020016040528060008152506115a1565b50505050505050565b505050505050565b505050505050565b6115c88473ffffffffffffffffffffffffffffffffffffffff16610ec6565b15611788578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b815260040161160e959493929190612f92565b602060405180830381600087803b15801561162857600080fd5b505af192505050801561165957506040513d601f19601f82011682018060405250810190611656919061300f565b60015b6116ff57611665613049565b806308c379a014156116c2575061167a61306b565b8061168557506116c4565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b99190611d9c565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f690613173565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611786576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177d90613205565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff8111156117af576117ae611dc3565b5b6040519080825280602002602001820160405280156117dd5781602001602082028036833780820191505090505b50905082816000815181106117f5576117f461284c565b5b60200260200101818152505080915050919050565b6118298473ffffffffffffffffffffffffffffffffffffffff16610ec6565b156119e9578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b815260040161186f959493929190613225565b602060405180830381600087803b15801561188957600080fd5b505af19250505080156118ba57506040513d601f19601f820116820180604052508101906118b7919061300f565b60015b611960576118c6613049565b806308c379a0141561192357506118db61306b565b806118e65750611925565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191a9190611d9c565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195790613173565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146119e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119de90613205565b60405180910390fd5b505b505050505050565b600060019054906101000a900460ff16611a40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3790612d58565b60405180910390fd5b611a4981611a4c565b50565b8060679080519060200190611a62929190611a66565b5050565b828054611a72906126f6565b90600052602060002090601f016020900481019282611a945760008555611adb565b82601f10611aad57805160ff1916838001178555611adb565b82800160010185558215611adb579182015b82811115611ada578251825591602001919060010190611abf565b5b509050611ae89190611aec565b5090565b5b80821115611b05576000816000905550600101611aed565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611b4882611b1d565b9050919050565b611b5881611b3d565b8114611b6357600080fd5b50565b600081359050611b7581611b4f565b92915050565b6000819050919050565b611b8e81611b7b565b8114611b9957600080fd5b50565b600081359050611bab81611b85565b92915050565b60008060408385031215611bc857611bc7611b13565b5b6000611bd685828601611b66565b9250506020611be785828601611b9c565b9150509250929050565b611bfa81611b7b565b82525050565b6000602082019050611c156000830184611bf1565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611c5081611c1b565b8114611c5b57600080fd5b50565b600081359050611c6d81611c47565b92915050565b600060208284031215611c8957611c88611b13565b5b6000611c9784828501611c5e565b91505092915050565b60008115159050919050565b611cb581611ca0565b82525050565b6000602082019050611cd06000830184611cac565b92915050565b600060208284031215611cec57611ceb611b13565b5b6000611cfa84828501611b9c565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611d3d578082015181840152602081019050611d22565b83811115611d4c576000848401525b50505050565b6000601f19601f8301169050919050565b6000611d6e82611d03565b611d788185611d0e565b9350611d88818560208601611d1f565b611d9181611d52565b840191505092915050565b60006020820190508181036000830152611db68184611d63565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611dfb82611d52565b810181811067ffffffffffffffff82111715611e1a57611e19611dc3565b5b80604052505050565b6000611e2d611b09565b9050611e398282611df2565b919050565b600067ffffffffffffffff821115611e5957611e58611dc3565b5b602082029050602081019050919050565b600080fd5b6000611e82611e7d84611e3e565b611e23565b90508083825260208201905060208402830185811115611ea557611ea4611e6a565b5b835b81811015611ece5780611eba8882611b9c565b845260208401935050602081019050611ea7565b5050509392505050565b600082601f830112611eed57611eec611dbe565b5b8135611efd848260208601611e6f565b91505092915050565b600080fd5b600067ffffffffffffffff821115611f2657611f25611dc3565b5b611f2f82611d52565b9050602081019050919050565b82818337600083830152505050565b6000611f5e611f5984611f0b565b611e23565b905082815260208101848484011115611f7a57611f79611f06565b5b611f85848285611f3c565b509392505050565b600082601f830112611fa257611fa1611dbe565b5b8135611fb2848260208601611f4b565b91505092915050565b600080600080600060a08688031215611fd757611fd6611b13565b5b6000611fe588828901611b66565b9550506020611ff688828901611b66565b945050604086013567ffffffffffffffff81111561201757612016611b18565b5b61202388828901611ed8565b935050606086013567ffffffffffffffff81111561204457612043611b18565b5b61205088828901611ed8565b925050608086013567ffffffffffffffff81111561207157612070611b18565b5b61207d88828901611f8d565b9150509295509295909350565b6000819050919050565b60006120af6120aa6120a584611b1d565b61208a565b611b1d565b9050919050565b60006120c182612094565b9050919050565b60006120d3826120b6565b9050919050565b6120e3816120c8565b82525050565b60006020820190506120fe60008301846120da565b92915050565b600067ffffffffffffffff82111561211f5761211e611dc3565b5b602082029050602081019050919050565b600061214361213e84612104565b611e23565b9050808382526020820190506020840283018581111561216657612165611e6a565b5b835b8181101561218f578061217b8882611b66565b845260208401935050602081019050612168565b5050509392505050565b600082601f8301126121ae576121ad611dbe565b5b81356121be848260208601612130565b91505092915050565b600080604083850312156121de576121dd611b13565b5b600083013567ffffffffffffffff8111156121fc576121fb611b18565b5b61220885828601612199565b925050602083013567ffffffffffffffff81111561222957612228611b18565b5b61223585828601611ed8565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61227481611b7b565b82525050565b6000612286838361226b565b60208301905092915050565b6000602082019050919050565b60006122aa8261223f565b6122b4818561224a565b93506122bf8361225b565b8060005b838110156122f05781516122d7888261227a565b97506122e283612292565b9250506001810190506122c3565b5085935050505092915050565b60006020820190508181036000830152612317818461229f565b905092915050565b6000806000806080858703121561233957612338611b13565b5b600061234787828801611b66565b945050602061235887828801611b9c565b935050604061236987828801611b9c565b925050606085013567ffffffffffffffff81111561238a57612389611b18565b5b61239687828801611f8d565b91505092959194509250565b600067ffffffffffffffff8211156123bd576123bc611dc3565b5b6123c682611d52565b9050602081019050919050565b60006123e66123e1846123a2565b611e23565b90508281526020810184848401111561240257612401611f06565b5b61240d848285611f3c565b509392505050565b600082601f83011261242a57612429611dbe565b5b813561243a8482602086016123d3565b91505092915050565b6000806040838503121561245a57612459611b13565b5b600083013567ffffffffffffffff81111561247857612477611b18565b5b61248485828601612415565b925050602061249585828601611b66565b9150509250929050565b6124a881611ca0565b81146124b357600080fd5b50565b6000813590506124c58161249f565b92915050565b600080604083850312156124e2576124e1611b13565b5b60006124f085828601611b66565b9250506020612501858286016124b6565b9150509250929050565b6000806040838503121561252257612521611b13565b5b600061253085828601611b66565b925050602061254185828601611b66565b9150509250929050565b600080600080600060a0868803121561256757612566611b13565b5b600061257588828901611b66565b955050602061258688828901611b66565b945050604061259788828901611b9c565b93505060606125a888828901611b9c565b925050608086013567ffffffffffffffff8111156125c9576125c8611b18565b5b6125d588828901611f8d565b9150509295509295909350565b6000806000606084860312156125fb576125fa611b13565b5b600061260986828701611b66565b935050602061261a86828701611b9c565b925050604061262b86828701611b9c565b9150509250925092565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b6000612691602a83611d0e565b915061269c82612635565b604082019050919050565b600060208201905081810360008301526126c081612684565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061270e57607f821691505b60208210811415612722576127216126c7565b5b50919050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206e6f7220617070726f7665640000000000000000000000000000000000602082015250565b6000612784602f83611d0e565b915061278f82612728565b604082019050919050565b600060208201905081810360008301526127b381612777565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000612816602983611d0e565b9150612821826127ba565b604082019050919050565b6000602082019050818103600083015261284581612809565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006128b582611b7b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156128e8576128e761287b565b5b600182019050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061294f602e83611d0e565b915061295a826128f3565b604082019050919050565b6000602082019050818103600083015261297e81612942565b9050919050565b6000819050919050565b600060ff82169050919050565b60006129b76129b26129ad84612985565b61208a565b61298f565b9050919050565b6129c78161299c565b82525050565b60006020820190506129e260008301846129be565b92915050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b6000612a44602883611d0e565b9150612a4f826129e8565b604082019050919050565b60006020820190508181036000830152612a7381612a37565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000612ad6602583611d0e565b9150612ae182612a7a565b604082019050919050565b60006020820190508181036000830152612b0581612ac9565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000612b68602a83611d0e565b9150612b7382612b0c565b604082019050919050565b60006020820190508181036000830152612b9781612b5b565b9050919050565b6000612ba982611b7b565b9150612bb483611b7b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612be957612be861287b565b5b828201905092915050565b60006040820190508181036000830152612c0e818561229f565b90508181036020830152612c22818461229f565b90509392505050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612c87602183611d0e565b9150612c9282612c2b565b604082019050919050565b60006020820190508181036000830152612cb681612c7a565b9050919050565b6000604082019050612cd26000830185611bf1565b612cdf6020830184611bf1565b9392505050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000612d42602b83611d0e565b9150612d4d82612ce6565b604082019050919050565b60006020820190508181036000830152612d7181612d35565b9050919050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000612dd4602983611d0e565b9150612ddf82612d78565b604082019050919050565b60006020820190508181036000830152612e0381612dc7565b9050919050565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000612e66602383611d0e565b9150612e7182612e0a565b604082019050919050565b60006020820190508181036000830152612e9581612e59565b9050919050565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b6000612ef8602483611d0e565b9150612f0382612e9c565b604082019050919050565b60006020820190508181036000830152612f2781612eeb565b9050919050565b612f3781611b3d565b82525050565b600081519050919050565b600082825260208201905092915050565b6000612f6482612f3d565b612f6e8185612f48565b9350612f7e818560208601611d1f565b612f8781611d52565b840191505092915050565b600060a082019050612fa76000830188612f2e565b612fb46020830187612f2e565b8181036040830152612fc6818661229f565b90508181036060830152612fda818561229f565b90508181036080830152612fee8184612f59565b90509695505050505050565b60008151905061300981611c47565b92915050565b60006020828403121561302557613024611b13565b5b600061303384828501612ffa565b91505092915050565b60008160e01c9050919050565b600060033d11156130685760046000803e61306560005161303c565b90505b90565b600060443d101561307b576130fe565b613083611b09565b60043d036004823e80513d602482011167ffffffffffffffff821117156130ab5750506130fe565b808201805167ffffffffffffffff8111156130c957505050506130fe565b80602083010160043d0385018111156130e65750505050506130fe565b6130f582602001850186611df2565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b600061315d603483611d0e565b915061316882613101565b604082019050919050565b6000602082019050818103600083015261318c81613150565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b60006131ef602883611d0e565b91506131fa82613193565b604082019050919050565b6000602082019050818103600083015261321e816131e2565b9050919050565b600060a08201905061323a6000830188612f2e565b6132476020830187612f2e565b6132546040830186611bf1565b6132616060830185611bf1565b81810360808301526132738184612f59565b9050969550505050505056fea264697066735822122006d9d1412c3cd0ae078d6c84fded9a429bf5f302e280b136a5617c38210afb1e64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b35760003560e01c8063731133e911610071578063731133e9146101b25780637ab4339d146101ce578063a22cb465146101ea578063e985e9c514610206578063f242432a14610236578063f5298aca14610252576100b3565b8062fdd58e146100b857806301ffc9a7146100e85780630e89341c146101185780632eb2c2d6146101485780633ab76e9f146101645780634e1273f414610182575b600080fd5b6100d260048036038101906100cd9190611bb1565b61026e565b6040516100df9190611c00565b60405180910390f35b61010260048036038101906100fd9190611c73565b610338565b60405161010f9190611cbb565b60405180910390f35b610132600480360381019061012d9190611cd6565b61041a565b60405161013f9190611d9c565b60405180910390f35b610162600480360381019061015d9190611fbb565b6104ae565b005b61016c61054f565b60405161017991906120e9565b60405180910390f35b61019c600480360381019061019791906121c7565b610575565b6040516101a991906122fd565b60405180910390f35b6101cc60048036038101906101c7919061231f565b61068e565b005b6101e860048036038101906101e39190612443565b6106a0565b005b61020460048036038101906101ff91906124cb565b610822565b005b610220600480360381019061021b919061250b565b610838565b60405161022d9190611cbb565b60405180910390f35b610250600480360381019061024b919061254b565b6108cc565b005b61026c600480360381019061026791906125e2565b61096d565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156102df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d6906126a7565b60405180910390fd5b6065600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061040357507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061041357506104128261097d565b5b9050919050565b606060678054610429906126f6565b80601f0160208091040260200160405190810160405280929190818152602001828054610455906126f6565b80156104a25780601f10610477576101008083540402835291602001916104a2565b820191906000526020600020905b81548152906001019060200180831161048557829003601f168201915b50505050509050919050565b6104b66109e7565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806104fc57506104fb856104f66109e7565b610838565b5b61053b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105329061279a565b60405180910390fd5b61054885858585856109ef565b5050505050565b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606081518351146105bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b29061282c565b60405180910390fd5b6000835167ffffffffffffffff8111156105d8576105d7611dc3565b5b6040519080825280602002602001820160405280156106065781602001602082028036833780820191505090505b50905060005b84518110156106835761065385828151811061062b5761062a61284c565b5b60200260200101518583815181106106465761064561284c565b5b602002602001015161026e565b8282815181106106665761066561284c565b5b6020026020010181815250508061067c906128aa565b905061060c565b508091505092915050565b61069a84848484610d14565b50505050565b60008060019054906101000a900460ff161590508080156106d15750600160008054906101000a900460ff1660ff16105b806106fe57506106e030610ec6565b1580156106fd5750600160008054906101000a900460ff1660ff16145b5b61073d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073490612965565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561077a576001600060016101000a81548160ff0219169083151502179055505b61078383610ee9565b81609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550801561081d5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161081491906129cd565b60405180910390a15b505050565b61083461082d6109e7565b8383610f44565b5050565b6000606660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6108d46109e7565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061091a5750610919856109146109e7565b610838565b5b610959576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109509061279a565b60405180910390fd5b61096685858585856110b1565b5050505050565b610978838383611350565b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b8151835114610a33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2a90612a5a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610aa3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9a90612aec565b60405180910390fd5b6000610aad6109e7565b9050610abd818787878787611599565b60005b8451811015610c71576000858281518110610ade57610add61284c565b5b602002602001015190506000858381518110610afd57610afc61284c565b5b6020026020010151905060006065600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610b9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9690612b7e565b60405180910390fd5b8181036065600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816065600085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c569190612b9e565b9250508190555050505080610c6a906128aa565b9050610ac0565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610ce8929190612bf4565b60405180910390a4610cfe8187878787876115a1565b610d0c8187878787876115a9565b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610d84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7b90612c9d565b60405180910390fd5b6000610d8e6109e7565b90506000610d9b85611790565b90506000610da885611790565b9050610db983600089858589611599565b846065600088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e199190612b9e565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628989604051610e97929190612cbd565b60405180910390a4610eae836000898585896115a1565b610ebd8360008989898961180a565b50505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16610f38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2f90612d58565b60405180910390fd5b610f41816119f1565b50565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610fb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610faa90612dea565b60405180910390fd5b80606660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516110a49190611cbb565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611121576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111890612aec565b60405180910390fd5b600061112b6109e7565b9050600061113885611790565b9050600061114585611790565b9050611155838989858589611599565b60006065600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050858110156111ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e490612b7e565b60405180910390fd5b8581036065600089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550856065600089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112a49190612b9e565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a604051611321929190612cbd565b60405180910390a4611337848a8a86868a6115a1565b611345848a8a8a8a8a61180a565b505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156113c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b790612e7c565b60405180910390fd5b60006113ca6109e7565b905060006113d784611790565b905060006113e484611790565b905061140483876000858560405180602001604052806000815250611599565b60006065600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508481101561149c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149390612f0e565b60405180910390fd5b8481036065600088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62898960405161156a929190612cbd565b60405180910390a4611590848860008686604051806020016040528060008152506115a1565b50505050505050565b505050505050565b505050505050565b6115c88473ffffffffffffffffffffffffffffffffffffffff16610ec6565b15611788578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b815260040161160e959493929190612f92565b602060405180830381600087803b15801561162857600080fd5b505af192505050801561165957506040513d601f19601f82011682018060405250810190611656919061300f565b60015b6116ff57611665613049565b806308c379a014156116c2575061167a61306b565b8061168557506116c4565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b99190611d9c565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f690613173565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611786576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177d90613205565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff8111156117af576117ae611dc3565b5b6040519080825280602002602001820160405280156117dd5781602001602082028036833780820191505090505b50905082816000815181106117f5576117f461284c565b5b60200260200101818152505080915050919050565b6118298473ffffffffffffffffffffffffffffffffffffffff16610ec6565b156119e9578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b815260040161186f959493929190613225565b602060405180830381600087803b15801561188957600080fd5b505af19250505080156118ba57506040513d601f19601f820116820180604052508101906118b7919061300f565b60015b611960576118c6613049565b806308c379a0141561192357506118db61306b565b806118e65750611925565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191a9190611d9c565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195790613173565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146119e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119de90613205565b60405180910390fd5b505b505050505050565b600060019054906101000a900460ff16611a40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3790612d58565b60405180910390fd5b611a4981611a4c565b50565b8060679080519060200190611a62929190611a66565b5050565b828054611a72906126f6565b90600052602060002090601f016020900481019282611a945760008555611adb565b82601f10611aad57805160ff1916838001178555611adb565b82800160010185558215611adb579182015b82811115611ada578251825591602001919060010190611abf565b5b509050611ae89190611aec565b5090565b5b80821115611b05576000816000905550600101611aed565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611b4882611b1d565b9050919050565b611b5881611b3d565b8114611b6357600080fd5b50565b600081359050611b7581611b4f565b92915050565b6000819050919050565b611b8e81611b7b565b8114611b9957600080fd5b50565b600081359050611bab81611b85565b92915050565b60008060408385031215611bc857611bc7611b13565b5b6000611bd685828601611b66565b9250506020611be785828601611b9c565b9150509250929050565b611bfa81611b7b565b82525050565b6000602082019050611c156000830184611bf1565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611c5081611c1b565b8114611c5b57600080fd5b50565b600081359050611c6d81611c47565b92915050565b600060208284031215611c8957611c88611b13565b5b6000611c9784828501611c5e565b91505092915050565b60008115159050919050565b611cb581611ca0565b82525050565b6000602082019050611cd06000830184611cac565b92915050565b600060208284031215611cec57611ceb611b13565b5b6000611cfa84828501611b9c565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611d3d578082015181840152602081019050611d22565b83811115611d4c576000848401525b50505050565b6000601f19601f8301169050919050565b6000611d6e82611d03565b611d788185611d0e565b9350611d88818560208601611d1f565b611d9181611d52565b840191505092915050565b60006020820190508181036000830152611db68184611d63565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611dfb82611d52565b810181811067ffffffffffffffff82111715611e1a57611e19611dc3565b5b80604052505050565b6000611e2d611b09565b9050611e398282611df2565b919050565b600067ffffffffffffffff821115611e5957611e58611dc3565b5b602082029050602081019050919050565b600080fd5b6000611e82611e7d84611e3e565b611e23565b90508083825260208201905060208402830185811115611ea557611ea4611e6a565b5b835b81811015611ece5780611eba8882611b9c565b845260208401935050602081019050611ea7565b5050509392505050565b600082601f830112611eed57611eec611dbe565b5b8135611efd848260208601611e6f565b91505092915050565b600080fd5b600067ffffffffffffffff821115611f2657611f25611dc3565b5b611f2f82611d52565b9050602081019050919050565b82818337600083830152505050565b6000611f5e611f5984611f0b565b611e23565b905082815260208101848484011115611f7a57611f79611f06565b5b611f85848285611f3c565b509392505050565b600082601f830112611fa257611fa1611dbe565b5b8135611fb2848260208601611f4b565b91505092915050565b600080600080600060a08688031215611fd757611fd6611b13565b5b6000611fe588828901611b66565b9550506020611ff688828901611b66565b945050604086013567ffffffffffffffff81111561201757612016611b18565b5b61202388828901611ed8565b935050606086013567ffffffffffffffff81111561204457612043611b18565b5b61205088828901611ed8565b925050608086013567ffffffffffffffff81111561207157612070611b18565b5b61207d88828901611f8d565b9150509295509295909350565b6000819050919050565b60006120af6120aa6120a584611b1d565b61208a565b611b1d565b9050919050565b60006120c182612094565b9050919050565b60006120d3826120b6565b9050919050565b6120e3816120c8565b82525050565b60006020820190506120fe60008301846120da565b92915050565b600067ffffffffffffffff82111561211f5761211e611dc3565b5b602082029050602081019050919050565b600061214361213e84612104565b611e23565b9050808382526020820190506020840283018581111561216657612165611e6a565b5b835b8181101561218f578061217b8882611b66565b845260208401935050602081019050612168565b5050509392505050565b600082601f8301126121ae576121ad611dbe565b5b81356121be848260208601612130565b91505092915050565b600080604083850312156121de576121dd611b13565b5b600083013567ffffffffffffffff8111156121fc576121fb611b18565b5b61220885828601612199565b925050602083013567ffffffffffffffff81111561222957612228611b18565b5b61223585828601611ed8565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61227481611b7b565b82525050565b6000612286838361226b565b60208301905092915050565b6000602082019050919050565b60006122aa8261223f565b6122b4818561224a565b93506122bf8361225b565b8060005b838110156122f05781516122d7888261227a565b97506122e283612292565b9250506001810190506122c3565b5085935050505092915050565b60006020820190508181036000830152612317818461229f565b905092915050565b6000806000806080858703121561233957612338611b13565b5b600061234787828801611b66565b945050602061235887828801611b9c565b935050604061236987828801611b9c565b925050606085013567ffffffffffffffff81111561238a57612389611b18565b5b61239687828801611f8d565b91505092959194509250565b600067ffffffffffffffff8211156123bd576123bc611dc3565b5b6123c682611d52565b9050602081019050919050565b60006123e66123e1846123a2565b611e23565b90508281526020810184848401111561240257612401611f06565b5b61240d848285611f3c565b509392505050565b600082601f83011261242a57612429611dbe565b5b813561243a8482602086016123d3565b91505092915050565b6000806040838503121561245a57612459611b13565b5b600083013567ffffffffffffffff81111561247857612477611b18565b5b61248485828601612415565b925050602061249585828601611b66565b9150509250929050565b6124a881611ca0565b81146124b357600080fd5b50565b6000813590506124c58161249f565b92915050565b600080604083850312156124e2576124e1611b13565b5b60006124f085828601611b66565b9250506020612501858286016124b6565b9150509250929050565b6000806040838503121561252257612521611b13565b5b600061253085828601611b66565b925050602061254185828601611b66565b9150509250929050565b600080600080600060a0868803121561256757612566611b13565b5b600061257588828901611b66565b955050602061258688828901611b66565b945050604061259788828901611b9c565b93505060606125a888828901611b9c565b925050608086013567ffffffffffffffff8111156125c9576125c8611b18565b5b6125d588828901611f8d565b9150509295509295909350565b6000806000606084860312156125fb576125fa611b13565b5b600061260986828701611b66565b935050602061261a86828701611b9c565b925050604061262b86828701611b9c565b9150509250925092565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b6000612691602a83611d0e565b915061269c82612635565b604082019050919050565b600060208201905081810360008301526126c081612684565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061270e57607f821691505b60208210811415612722576127216126c7565b5b50919050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206e6f7220617070726f7665640000000000000000000000000000000000602082015250565b6000612784602f83611d0e565b915061278f82612728565b604082019050919050565b600060208201905081810360008301526127b381612777565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000612816602983611d0e565b9150612821826127ba565b604082019050919050565b6000602082019050818103600083015261284581612809565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006128b582611b7b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156128e8576128e761287b565b5b600182019050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061294f602e83611d0e565b915061295a826128f3565b604082019050919050565b6000602082019050818103600083015261297e81612942565b9050919050565b6000819050919050565b600060ff82169050919050565b60006129b76129b26129ad84612985565b61208a565b61298f565b9050919050565b6129c78161299c565b82525050565b60006020820190506129e260008301846129be565b92915050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b6000612a44602883611d0e565b9150612a4f826129e8565b604082019050919050565b60006020820190508181036000830152612a7381612a37565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000612ad6602583611d0e565b9150612ae182612a7a565b604082019050919050565b60006020820190508181036000830152612b0581612ac9565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000612b68602a83611d0e565b9150612b7382612b0c565b604082019050919050565b60006020820190508181036000830152612b9781612b5b565b9050919050565b6000612ba982611b7b565b9150612bb483611b7b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612be957612be861287b565b5b828201905092915050565b60006040820190508181036000830152612c0e818561229f565b90508181036020830152612c22818461229f565b90509392505050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612c87602183611d0e565b9150612c9282612c2b565b604082019050919050565b60006020820190508181036000830152612cb681612c7a565b9050919050565b6000604082019050612cd26000830185611bf1565b612cdf6020830184611bf1565b9392505050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000612d42602b83611d0e565b9150612d4d82612ce6565b604082019050919050565b60006020820190508181036000830152612d7181612d35565b9050919050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000612dd4602983611d0e565b9150612ddf82612d78565b604082019050919050565b60006020820190508181036000830152612e0381612dc7565b9050919050565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000612e66602383611d0e565b9150612e7182612e0a565b604082019050919050565b60006020820190508181036000830152612e9581612e59565b9050919050565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b6000612ef8602483611d0e565b9150612f0382612e9c565b604082019050919050565b60006020820190508181036000830152612f2781612eeb565b9050919050565b612f3781611b3d565b82525050565b600081519050919050565b600082825260208201905092915050565b6000612f6482612f3d565b612f6e8185612f48565b9350612f7e818560208601611d1f565b612f8781611d52565b840191505092915050565b600060a082019050612fa76000830188612f2e565b612fb46020830187612f2e565b8181036040830152612fc6818661229f565b90508181036060830152612fda818561229f565b90508181036080830152612fee8184612f59565b90509695505050505050565b60008151905061300981611c47565b92915050565b60006020828403121561302557613024611b13565b5b600061303384828501612ffa565b91505092915050565b60008160e01c9050919050565b600060033d11156130685760046000803e61306560005161303c565b90505b90565b600060443d101561307b576130fe565b613083611b09565b60043d036004823e80513d602482011167ffffffffffffffff821117156130ab5750506130fe565b808201805167ffffffffffffffff8111156130c957505050506130fe565b80602083010160043d0385018111156130e65750505050506130fe565b6130f582602001850186611df2565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b600061315d603483611d0e565b915061316882613101565b604082019050919050565b6000602082019050818103600083015261318c81613150565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b60006131ef602883611d0e565b91506131fa82613193565b604082019050919050565b6000602082019050818103600083015261321e816131e2565b9050919050565b600060a08201905061323a6000830188612f2e565b6132476020830187612f2e565b6132546040830186611bf1565b6132616060830185611bf1565b81810360808301526132738184612f59565b9050969550505050505056fea264697066735822122006d9d1412c3cd0ae078d6c84fded9a429bf5f302e280b136a5617c38210afb1e64736f6c63430008090033",
  "devdoc": {
    "details": "This contract implements the ERC115 standard and is used for unit testing purposes only Anyone can mint or burn tokens",
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "burn(address,uint256,uint256)": {
        "details": "allows anyone to burn tokens"
      },
      "initialize(string,address)": {
        "details": "initializer to call after deployment, can only be called once"
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "mint(address,uint256,uint256,bytes)": {
        "details": "Allows anyone to mint tokens"
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "title": "TestErc1155",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2366,
        "contract": "contracts/Testing/TestErc1155.sol:TestErc1155",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2369,
        "contract": "contracts/Testing/TestErc1155.sol:TestErc1155",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6485,
        "contract": "contracts/Testing/TestErc1155.sol:TestErc1155",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6755,
        "contract": "contracts/Testing/TestErc1155.sol:TestErc1155",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2598,
        "contract": "contracts/Testing/TestErc1155.sol:TestErc1155",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2604,
        "contract": "contracts/Testing/TestErc1155.sol:TestErc1155",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2606,
        "contract": "contracts/Testing/TestErc1155.sol:TestErc1155",
        "label": "_uri",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 3813,
        "contract": "contracts/Testing/TestErc1155.sol:TestErc1155",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 12906,
        "contract": "contracts/Testing/TestErc1155.sol:TestErc1155",
        "label": "addressManager",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IAddressManager)8538"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAddressManager)8538": {
        "encoding": "inplace",
        "label": "contract IAddressManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
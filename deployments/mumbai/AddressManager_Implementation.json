{
  "address": "0x8940522aF61FeDA91632aad25d952629e71a720e",
  "abi": [
    {
      "inputs": [],
      "name": "childRegistrar",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultCuratorVault",
      "outputs": [
        {
          "internalType": "contract ICuratorVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRoleManager",
          "name": "_roleManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "makerRegistrar",
      "outputs": [
        {
          "internalType": "contract IMakerRegistrar",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "parameterManager",
      "outputs": [
        {
          "internalType": "contract IParameterManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reactionNftContract",
      "outputs": [
        {
          "internalType": "contract IStandard1155",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleManager",
      "outputs": [
        {
          "internalType": "contract IRoleManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_childRegistrar",
          "type": "address"
        }
      ],
      "name": "setChildRegistrar",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICuratorVault",
          "name": "_defaultCuratorVault",
          "type": "address"
        }
      ],
      "name": "setDefaultCuratorVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMakerRegistrar",
          "name": "_makerRegistrar",
          "type": "address"
        }
      ],
      "name": "setMakerRegistrar",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IParameterManager",
          "name": "_parameterManager",
          "type": "address"
        }
      ],
      "name": "setParameterManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStandard1155",
          "name": "_reactionNftContract",
          "type": "address"
        }
      ],
      "name": "setReactionNftContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRoleManager",
          "name": "_roleManager",
          "type": "address"
        }
      ],
      "name": "setRoleManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x36059c0984e04e3872d0d45e87c7608c42d2dedb4e908d84aa000b8b2ab600f9",
  "receipt": {
    "to": null,
    "from": "0x8f1809FA5DDcf8275cf9C92fCeF40B2154a01022",
    "contractAddress": "0x8940522aF61FeDA91632aad25d952629e71a720e",
    "transactionIndex": 9,
    "gasUsed": "1372231",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000800000000000000008000100000000004000000000000000000000000000000000000000000000000080020000000000000000000000000000000000000000000000000000000080000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000100040000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0xab7046a2773325fe46f043e715c7a310df976d93fbe35ba4a4a017061f87f937",
    "transactionHash": "0x36059c0984e04e3872d0d45e87c7608c42d2dedb4e908d84aa000b8b2ab600f9",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 26081985,
        "transactionHash": "0x36059c0984e04e3872d0d45e87c7608c42d2dedb4e908d84aa000b8b2ab600f9",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008f1809fa5ddcf8275cf9c92fcef40b2154a01022",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000006180bc880d01110000000000000000000000000000000000000000000000000d70a7e823c2fa5a0000000000000000000000000000000000000000000012fa29786a225cb992410000000000000000000000000000000000000000000000000d0f272b9bb5f9490000000000000000000000000000000000000000000012fa29d9eadee4c69352",
        "logIndex": 126,
        "blockHash": "0xab7046a2773325fe46f043e715c7a310df976d93fbe35ba4a4a017061f87f937"
      }
    ],
    "blockNumber": 26081985,
    "cumulativeGasUsed": "5831284",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0aa2446dfdd461104da7fca84166983e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"childRegistrar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultCuratorVault\",\"outputs\":[{\"internalType\":\"contract ICuratorVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoleManager\",\"name\":\"_roleManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makerRegistrar\",\"outputs\":[{\"internalType\":\"contract IMakerRegistrar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parameterManager\",\"outputs\":[{\"internalType\":\"contract IParameterManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reactionNftContract\",\"outputs\":[{\"internalType\":\"contract IStandard1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleManager\",\"outputs\":[{\"internalType\":\"contract IRoleManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_childRegistrar\",\"type\":\"address\"}],\"name\":\"setChildRegistrar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICuratorVault\",\"name\":\"_defaultCuratorVault\",\"type\":\"address\"}],\"name\":\"setDefaultCuratorVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMakerRegistrar\",\"name\":\"_makerRegistrar\",\"type\":\"address\"}],\"name\":\"setMakerRegistrar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IParameterManager\",\"name\":\"_parameterManager\",\"type\":\"address\"}],\"name\":\"setParameterManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStandard1155\",\"name\":\"_reactionNftContract\",\"type\":\"address\"}],\"name\":\"setReactionNftContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoleManager\",\"name\":\"_roleManager\",\"type\":\"address\"}],\"name\":\"setRoleManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"initialize(address)\":{\"details\":\"initializer to call after deployment, can only be called once\"},\"setChildRegistrar(address)\":{\"details\":\"Setter for the L2 bridge registrar\"},\"setDefaultCuratorVault(address)\":{\"details\":\"Setter for the default curator vault address\"},\"setMakerRegistrar(address)\":{\"details\":\"Setter for the maker registrar address\"},\"setParameterManager(address)\":{\"details\":\"Setter for the role manager address\"},\"setReactionNftContract(address)\":{\"details\":\"Setter for the maker registrar address\"},\"setRoleManager(address)\":{\"details\":\"Setter for the role manager address\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Config/AddressManager.sol\":\"AddressManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"contracts/Config/AddressManager.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.9;\\n\\nimport \\\"./AddressManagerStorage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract AddressManager is Initializable, AddressManagerStorageV1 {\\n    /// @dev Verifies with the role manager that the calling address has ADMIN role\\n    modifier onlyAdmin() {\\n        require(roleManager.isAddressManagerAdmin(msg.sender), \\\"Not Admin\\\");\\n        _;\\n    }\\n\\n    /// @dev initializer to call after deployment, can only be called once\\n    function initialize(IRoleManager _roleManager) public initializer {\\n        require(address(_roleManager) != address(0x0), ZERO_INPUT);\\n        roleManager = _roleManager;\\n    }\\n\\n    /// @dev Setter for the role manager address\\n    function setRoleManager(IRoleManager _roleManager) external onlyAdmin {\\n        // Sanity check\\n        require(address(_roleManager) != address(0x0), ZERO_INPUT);\\n\\n        // If the role manager address gets corrupted then this contract is DOA\\n        // since no future updates can be performed via permission checks.\\n        // Ensure the target address is valid and configured by requiring the current admin\\n        // making this call is an admin on the new contract\\n        require(_roleManager.isAdmin(msg.sender), \\\"RM invalid\\\");\\n\\n        roleManager = _roleManager;\\n    }\\n\\n    /// @dev Setter for the role manager address\\n    function setParameterManager(IParameterManager _parameterManager)\\n        external\\n        onlyAdmin\\n    {\\n        require(address(_parameterManager) != address(0x0), ZERO_INPUT);\\n        parameterManager = _parameterManager;\\n    }\\n\\n    /// @dev Setter for the maker registrar address\\n    function setMakerRegistrar(IMakerRegistrar _makerRegistrar)\\n        external\\n        onlyAdmin\\n    {\\n        require(address(_makerRegistrar) != address(0x0), ZERO_INPUT);\\n        makerRegistrar = _makerRegistrar;\\n    }\\n\\n    /// @dev Setter for the maker registrar address\\n    function setReactionNftContract(IStandard1155 _reactionNftContract)\\n        external\\n        onlyAdmin\\n    {\\n        require(address(_reactionNftContract) != address(0x0), ZERO_INPUT);\\n        reactionNftContract = _reactionNftContract;\\n    }\\n\\n    /// @dev Setter for the default curator vault address\\n    function setDefaultCuratorVault(ICuratorVault _defaultCuratorVault)\\n        external\\n        onlyAdmin\\n    {\\n        require(address(_defaultCuratorVault) != address(0x0), ZERO_INPUT);\\n        defaultCuratorVault = _defaultCuratorVault;\\n    }\\n\\n    /// @dev Setter for the L2 bridge registrar\\n    function setChildRegistrar(address _childRegistrar) external onlyAdmin {\\n        require(address(_childRegistrar) != address(0x0), ZERO_INPUT);\\n        childRegistrar = _childRegistrar;\\n    }\\n}\\n\",\"keccak256\":\"0xc70580ffc2a19961e3635f48749d059b4f8113709ba9064b15865d5f26adf22e\",\"license\":\"GPL-3.0-only\"},\"contracts/Config/AddressManagerStorage.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.9;\\n\\nimport \\\"../Permissions/IRoleManager.sol\\\";\\nimport \\\"../Parameters/IParameterManager.sol\\\";\\nimport \\\"../Maker/IMakerRegistrar.sol\\\";\\nimport \\\"../Token/IStandard1155.sol\\\";\\nimport \\\"./IAddressManager.sol\\\";\\n\\n/// @title AddressManagerStorage\\n/// @dev This contract will hold all local variables for the AddressManager Contract\\n/// When upgrading the protocol, inherit from this contract on the V2 version and change the\\n/// AddressManager to inherit from the later version.  This ensures there are no storage layout\\n/// corruptions when upgrading.\\nabstract contract AddressManagerStorageV1 is IAddressManager {\\n    /// @dev Input error for 0 value param\\n    string internal constant ZERO_INPUT = \\\"Invalid 0 input\\\";\\n\\n    /// @dev Local reference to the role manager contract\\n    IRoleManager public roleManager;\\n\\n    /// @dev Local reference to the payment manager contract\\n    IParameterManager public parameterManager;\\n\\n    /// @dev Local reference to the maker registrar contract\\n    IMakerRegistrar public makerRegistrar;\\n\\n    /// @dev Local reference to the reaction NFT contract\\n    IStandard1155 public reactionNftContract;\\n\\n    /// @dev Local reference to the default curator vault\\n    ICuratorVault public defaultCuratorVault;\\n\\n    /// @dev Local reference to the L2 bridge registrar\\n    address public childRegistrar;\\n}\\n\\n/// On the next version of the protocol, if new variables are added, put them in the below\\n/// contract and use this as the inheritance chain.\\n/**\\ncontract AddressManagerStorageV2 is AddressManagerStorageV1 {\\n  address newVariable;\\n}\\n */\\n\",\"keccak256\":\"0x4e11f5a86c54e5a0e8d55e3fc711a2441f0f550801740ae8d6ee51e2f2093f91\",\"license\":\"GPL-3.0-only\"},\"contracts/Config/IAddressManager.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.9;\\n\\nimport \\\"../Permissions/IRoleManager.sol\\\";\\nimport \\\"../Parameters/IParameterManager.sol\\\";\\nimport \\\"../Maker/IMakerRegistrar.sol\\\";\\nimport \\\"../Token/IStandard1155.sol\\\";\\nimport \\\"../Reactions/IReactionVault.sol\\\";\\nimport \\\"../CuratorVault/ICuratorVault.sol\\\";\\n\\ninterface IAddressManager {\\n    /// @dev Getter for the role manager address\\n    function roleManager() external returns (IRoleManager);\\n\\n    /// @dev Setter for the role manager address\\n    function setRoleManager(IRoleManager _roleManager) external;\\n\\n    /// @dev Getter for the role manager address\\n    function parameterManager() external returns (IParameterManager);\\n\\n    /// @dev Setter for the role manager address\\n    function setParameterManager(IParameterManager _parameterManager) external;\\n\\n    /// @dev Getter for the maker registrar address\\n    function makerRegistrar() external returns (IMakerRegistrar);\\n\\n    /// @dev Setter for the maker registrar address\\n    function setMakerRegistrar(IMakerRegistrar _makerRegistrar) external;\\n\\n    /// @dev Getter for the reaction NFT contract address\\n    function reactionNftContract() external returns (IStandard1155);\\n\\n    /// @dev Setter for the reaction NFT contract address\\n    function setReactionNftContract(IStandard1155 _reactionNftContract)\\n        external;\\n\\n    /// @dev Getter for the default Curator Vault contract address\\n    function defaultCuratorVault() external returns (ICuratorVault);\\n\\n    /// @dev Setter for the default Curator Vault contract address\\n    function setDefaultCuratorVault(ICuratorVault _defaultCuratorVault)\\n        external;\\n\\n    /// @dev Getter for the L2 bridge registrar\\n    function childRegistrar() external returns (address);\\n\\n    /// @dev Setter for the L2 bridge registrar\\n    function setChildRegistrar(address _childRegistrar) external;\\n}\\n\",\"keccak256\":\"0x64a481ca905e86b48270c918b0b6a97fb66cdd52fa1732957d2891b4daa6b7c5\",\"license\":\"GPL-3.0-only\"},\"contracts/CuratorVault/ICuratorVault.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.9;\\n\\nimport \\\"../Token/IStandard1155.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n/// @dev Interface for the curator vault\\ninterface ICuratorVault {\\n    function getTokenId(\\n        uint256 nftChainId,\\n        address nftAddress,\\n        uint256 nftId,\\n        IERC20Upgradeable paymentToken\\n    ) external returns (uint256);\\n\\n    function buyCuratorTokens(\\n        uint256 nftChainId,\\n        address nftAddress,\\n        uint256 nftId,\\n        IERC20Upgradeable paymentToken,\\n        uint256 paymentAmount,\\n        address mintToAddress,\\n        bool isTakerPosition\\n    ) external returns (uint256);\\n\\n    function sellCuratorTokens(\\n        uint256 nftChainId,\\n        address nftAddress,\\n        uint256 nftId,\\n        IERC20Upgradeable paymentToken,\\n        uint256 tokensToBurn,\\n        address refundToAddress\\n    ) external returns (uint256);\\n\\n    function curatorTokens() external returns (IStandard1155);\\n}\\n\",\"keccak256\":\"0x6df35df492ee7525fd81d9ff9257891a2f41b0b54e39c88ce29203abee7fbf77\",\"license\":\"GPL-3.0-only\"},\"contracts/Maker/IMakerRegistrar.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.9;\\n\\n/// @dev Interface for the maker registrar that supports registering and de-registering NFTs\\ninterface IMakerRegistrar {\\n    /// @dev struct for storing details about a registered NFT\\n    struct NftDetails {\\n        bool registered;\\n        address owner;\\n        address creator;\\n        uint256 creatorSaleBasisPoints;\\n    }\\n\\n    function transformToSourceLookup(uint256 metaId) external returns (uint256);\\n\\n    function deriveSourceId(\\n        uint256 nftChainId,\\n        address nftAddress,\\n        uint256 nftId\\n    ) external returns (uint256);\\n\\n    /// @dev lookup for NftDetails from source ID\\n    function sourceToDetailsLookup(uint256)\\n        external\\n        returns (\\n            bool,\\n            address,\\n            address,\\n            uint256\\n        );\\n\\n    function verifyOwnership(\\n        address nftContractAddress,\\n        uint256 nftId,\\n        address potentialOwner\\n    ) external returns (bool);\\n\\n    function registerNftFromBridge(\\n        address owner,\\n        uint256 chainId,\\n        address nftContractAddress,\\n        uint256 nftId,\\n        address creatorAddress,\\n        uint256 creatorSaleBasisPoints,\\n        uint256 optionBits,\\n        string memory ipfsMetadataHash\\n    ) external;\\n\\n    function deRegisterNftFromBridge(\\n        address owner,\\n        uint256 chainId,\\n        address nftContractAddress,\\n        uint256 nftId\\n    ) external;\\n}\\n\",\"keccak256\":\"0xdc5d430e2c4a45584ca040fa196b20fd33c94fafda6611d877b38dcdf5b2ab9d\",\"license\":\"GPL-3.0-only\"},\"contracts/Parameters/IParameterManager.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.9;\\n\\nimport \\\"../Permissions/IRoleManager.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IParameterManager {\\n    struct SigmoidCurveParameters {\\n        uint256 a;\\n        uint256 b;\\n        uint256 c;\\n    }\\n\\n    /// @dev Getter for the payment token\\n    function paymentToken() external returns (IERC20Upgradeable);\\n\\n    /// @dev Setter for the payment token\\n    function setPaymentToken(IERC20Upgradeable _paymentToken) external;\\n\\n    /// @dev Getter for the reaction price\\n    function reactionPrice() external returns (uint256);\\n\\n    /// @dev Setter for the reaction price\\n    function setReactionPrice(uint256 _reactionPrice) external;\\n\\n    /// @dev Getter for the cut of purchase price going to the curator liability\\n    function saleCuratorLiabilityBasisPoints() external returns (uint256);\\n\\n    /// @dev Setter for the cut of purchase price going to the curator liability\\n    function setSaleCuratorLiabilityBasisPoints(\\n        uint256 _saleCuratorLiabilityBasisPoints\\n    ) external;\\n\\n    /// @dev Getter for the cut of purchase price going to the referrer\\n    function saleReferrerBasisPoints() external returns (uint256);\\n\\n    /// @dev Setter for the cut of purchase price going to the referrer\\n    function setSaleReferrerBasisPoints(uint256 _saleReferrerBasisPoints)\\n        external;\\n\\n    /// @dev Getter for the cut of spend curator liability going to the taker\\n    function spendTakerBasisPoints() external returns (uint256);\\n\\n    /// @dev Setter for the cut of spend curator liability going to the taker\\n    function setSpendTakerBasisPoints(uint256 _spendTakerBasisPoints) external;\\n\\n    /// @dev Getter for the cut of spend curator liability going to the taker\\n    function spendReferrerBasisPoints() external returns (uint256);\\n\\n    /// @dev Setter for the cut of spend curator liability going to the referrer\\n    function setSpendReferrerBasisPoints(uint256 _spendReferrerBasisPoints)\\n        external;\\n\\n    /// @dev Getter for the check to see if a curator vault is allowed to be used\\n    function approvedCuratorVaults(address potentialVault)\\n        external\\n        returns (bool);\\n\\n    /// @dev Setter for the list of curator vaults allowed to be used\\n    function setApprovedCuratorVaults(address vault, bool approved) external;\\n\\n    // @dev Getter for curator vault bonding curve params\\n    function bondingCurveParams()\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    // @dev Setter for curator vault bonding curve params\\n    function setBondingCurveParams(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7f365d25b5d2b1f4f5f457f9d716bfdc75307fffec3f07f20c00c8311ca6c048\",\"license\":\"GPL-3.0-only\"},\"contracts/Permissions/IRoleManager.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.9;\\n\\ninterface IRoleManager {\\n    /// @dev Determines if the specified address has capability to mint and burn reaction NFTs\\n    /// @param potentialAddress Address to check\\n    function isAdmin(address potentialAddress) external view returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to udpate addresses in the protocol\\n    /// @param potentialAddress Address to check\\n    function isAddressManagerAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to update parameters in the protocol\\n    /// @param potentialAddress Address to check\\n    function isParameterManagerAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to to mint and burn reaction NFTs\\n    /// @param potentialAddress Address to check\\n    function isReactionNftAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to purchase curator vault tokens\\n    /// @param potentialAddress Address to check\\n    function isCuratorVaultPurchaser(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to mint and burn curator tokens\\n    /// @param potentialAddress Address to check\\n    function isCuratorTokenAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x99dc318b1cd6ebfb106d7151e4e6b57c0466921de23bdc5aefb57fa37ee9433b\",\"license\":\"GPL-3.0-only\"},\"contracts/Reactions/IReactionVault.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.9;\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @dev Interface for the ReactionVault that supports buying and spending reactions\\ninterface IReactionVault {\\n    struct ReactionPriceDetails {\\n        IERC20Upgradeable paymentToken;\\n        uint256 reactionPrice;\\n        uint256 saleCuratorLiabilityBasisPoints;\\n    }\\n}\\n\",\"keccak256\":\"0x778ef735f1c5fb0960b64440ee0cc737d8713a95965e715afc641b73787dedd8\",\"license\":\"GPL-3.0-only\"},\"contracts/Token/IStandard1155.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.9;\\n\\n/// @dev Interface for the Standard1155 toke contract.\\ninterface IStandard1155 {\\n    /// @dev Allows a priviledged account to mint tokens to the specified address\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    function burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb029e180e6804b70d25b8972334703e160344619d2f1e7b38b4c51194125b70e\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506117ff806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ce5760003560e01c80636fdfe8c51161008c578063b27bcea111610066578063b27bcea1146101d9578063c0dc0697146101f7578063c4d66de814610213578063f1d588c51461022f576100ce565b80636fdfe8c51461018157806376104ad51461019f5780637ab0a0d8146101bd576100ce565b8062435da5146100d3578063085da310146100f157806332823e221461010f578063363f8a651461012b5780635c7bdf9d146101495780636345b9e514610165575b600080fd5b6100db61024b565b6040516100e89190611183565b60405180910390f35b6100f9610271565b60405161010691906111bf565b60405180910390f35b6101296004803603810190610124919061121d565b610297565b005b61013361046e565b604051610140919061126b565b60405180910390f35b610163600480360381019061015e91906112c4565b610494565b005b61017f600480360381019061017a919061132f565b61066b565b005b610189610842565b604051610196919061137d565b60405180910390f35b6101a7610868565b6040516101b491906113b9565b60405180910390f35b6101d760048036038101906101d29190611412565b61088e565b005b6101e1610a65565b6040516101ee9190611460565b60405180910390f35b610211600480360381019061020c91906114a7565b610a8b565b005b61022d60048036038101906102289190611512565b610c62565b005b61024960048036038101906102449190611512565b610e31565b005b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663888e81fb336040518263ffffffff1660e01b81526004016102f291906111bf565b60206040518083038186803b15801561030a57600080fd5b505afa15801561031e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103429190611577565b610381576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037890611601565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600f81526020017f496e76616c6964203020696e707574000000000000000000000000000000000081525090610429576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042091906116a9565b60405180910390fd5b5080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663888e81fb336040518263ffffffff1660e01b81526004016104ef91906111bf565b60206040518083038186803b15801561050757600080fd5b505afa15801561051b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053f9190611577565b61057e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057590611601565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600f81526020017f496e76616c6964203020696e707574000000000000000000000000000000000081525090610626576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061d91906116a9565b60405180910390fd5b5080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663888e81fb336040518263ffffffff1660e01b81526004016106c691906111bf565b60206040518083038186803b1580156106de57600080fd5b505afa1580156106f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107169190611577565b610755576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074c90611601565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600f81526020017f496e76616c6964203020696e7075740000000000000000000000000000000000815250906107fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f491906116a9565b60405180910390fd5b5080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663888e81fb336040518263ffffffff1660e01b81526004016108e991906111bf565b60206040518083038186803b15801561090157600080fd5b505afa158015610915573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109399190611577565b610978576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096f90611601565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600f81526020017f496e76616c6964203020696e707574000000000000000000000000000000000081525090610a20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1791906116a9565b60405180910390fd5b5080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663888e81fb336040518263ffffffff1660e01b8152600401610ae691906111bf565b60206040518083038186803b158015610afe57600080fd5b505afa158015610b12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b369190611577565b610b75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6c90611601565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600f81526020017f496e76616c6964203020696e707574000000000000000000000000000000000081525090610c1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1491906116a9565b60405180910390fd5b5080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060019054906101000a900460ff16610c8a5760008054906101000a900460ff1615610c93565b610c926110d0565b5b610cd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc99061173d565b60405180910390fd5b60008060019054906101000a900460ff161590508015610d22576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600f81526020017f496e76616c6964203020696e707574000000000000000000000000000000000081525090610dca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc191906116a9565b60405180910390fd5b5081600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015610e2d5760008060016101000a81548160ff0219169083151502179055505b5050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663888e81fb336040518263ffffffff1660e01b8152600401610e8c91906111bf565b60206040518083038186803b158015610ea457600080fd5b505afa158015610eb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edc9190611577565b610f1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1290611601565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600f81526020017f496e76616c6964203020696e707574000000000000000000000000000000000081525090610fc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fba91906116a9565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff166324d7806c336040518263ffffffff1660e01b8152600401610ffd91906111bf565b60206040518083038186803b15801561101557600080fd5b505afa158015611029573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104d9190611577565b61108c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611083906117a9565b60405180910390fd5b80600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006110db306110e1565b15905090565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061114961114461113f84611104565b611124565b611104565b9050919050565b600061115b8261112e565b9050919050565b600061116d82611150565b9050919050565b61117d81611162565b82525050565b60006020820190506111986000830184611174565b92915050565b60006111a982611104565b9050919050565b6111b98161119e565b82525050565b60006020820190506111d460008301846111b0565b92915050565b600080fd5b60006111ea8261119e565b9050919050565b6111fa816111df565b811461120557600080fd5b50565b600081359050611217816111f1565b92915050565b600060208284031215611233576112326111da565b5b600061124184828501611208565b91505092915050565b600061125582611150565b9050919050565b6112658161124a565b82525050565b6000602082019050611280600083018461125c565b92915050565b60006112918261119e565b9050919050565b6112a181611286565b81146112ac57600080fd5b50565b6000813590506112be81611298565b92915050565b6000602082840312156112da576112d96111da565b5b60006112e8848285016112af565b91505092915050565b60006112fc8261119e565b9050919050565b61130c816112f1565b811461131757600080fd5b50565b60008135905061132981611303565b92915050565b600060208284031215611345576113446111da565b5b60006113538482850161131a565b91505092915050565b600061136782611150565b9050919050565b6113778161135c565b82525050565b6000602082019050611392600083018461136e565b92915050565b60006113a382611150565b9050919050565b6113b381611398565b82525050565b60006020820190506113ce60008301846113aa565b92915050565b60006113df8261119e565b9050919050565b6113ef816113d4565b81146113fa57600080fd5b50565b60008135905061140c816113e6565b92915050565b600060208284031215611428576114276111da565b5b6000611436848285016113fd565b91505092915050565b600061144a82611150565b9050919050565b61145a8161143f565b82525050565b60006020820190506114756000830184611451565b92915050565b6114848161119e565b811461148f57600080fd5b50565b6000813590506114a18161147b565b92915050565b6000602082840312156114bd576114bc6111da565b5b60006114cb84828501611492565b91505092915050565b60006114df8261119e565b9050919050565b6114ef816114d4565b81146114fa57600080fd5b50565b60008135905061150c816114e6565b92915050565b600060208284031215611528576115276111da565b5b6000611536848285016114fd565b91505092915050565b60008115159050919050565b6115548161153f565b811461155f57600080fd5b50565b6000815190506115718161154b565b92915050565b60006020828403121561158d5761158c6111da565b5b600061159b84828501611562565b91505092915050565b600082825260208201905092915050565b7f4e6f742041646d696e0000000000000000000000000000000000000000000000600082015250565b60006115eb6009836115a4565b91506115f6826115b5565b602082019050919050565b6000602082019050818103600083015261161a816115de565b9050919050565b600081519050919050565b60005b8381101561164a57808201518184015260208101905061162f565b83811115611659576000848401525b50505050565b6000601f19601f8301169050919050565b600061167b82611621565b61168581856115a4565b935061169581856020860161162c565b61169e8161165f565b840191505092915050565b600060208201905081810360008301526116c38184611670565b905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000611727602e836115a4565b9150611732826116cb565b604082019050919050565b600060208201905081810360008301526117568161171a565b9050919050565b7f524d20696e76616c696400000000000000000000000000000000000000000000600082015250565b6000611793600a836115a4565b915061179e8261175d565b602082019050919050565b600060208201905081810360008301526117c281611786565b905091905056fea26469706673582212203b6c3dc179bf75d02ed6120e792e4982c33e7ce955b3d88cce4ca93d78051df164736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ce5760003560e01c80636fdfe8c51161008c578063b27bcea111610066578063b27bcea1146101d9578063c0dc0697146101f7578063c4d66de814610213578063f1d588c51461022f576100ce565b80636fdfe8c51461018157806376104ad51461019f5780637ab0a0d8146101bd576100ce565b8062435da5146100d3578063085da310146100f157806332823e221461010f578063363f8a651461012b5780635c7bdf9d146101495780636345b9e514610165575b600080fd5b6100db61024b565b6040516100e89190611183565b60405180910390f35b6100f9610271565b60405161010691906111bf565b60405180910390f35b6101296004803603810190610124919061121d565b610297565b005b61013361046e565b604051610140919061126b565b60405180910390f35b610163600480360381019061015e91906112c4565b610494565b005b61017f600480360381019061017a919061132f565b61066b565b005b610189610842565b604051610196919061137d565b60405180910390f35b6101a7610868565b6040516101b491906113b9565b60405180910390f35b6101d760048036038101906101d29190611412565b61088e565b005b6101e1610a65565b6040516101ee9190611460565b60405180910390f35b610211600480360381019061020c91906114a7565b610a8b565b005b61022d60048036038101906102289190611512565b610c62565b005b61024960048036038101906102449190611512565b610e31565b005b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663888e81fb336040518263ffffffff1660e01b81526004016102f291906111bf565b60206040518083038186803b15801561030a57600080fd5b505afa15801561031e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103429190611577565b610381576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037890611601565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600f81526020017f496e76616c6964203020696e707574000000000000000000000000000000000081525090610429576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042091906116a9565b60405180910390fd5b5080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663888e81fb336040518263ffffffff1660e01b81526004016104ef91906111bf565b60206040518083038186803b15801561050757600080fd5b505afa15801561051b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053f9190611577565b61057e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057590611601565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600f81526020017f496e76616c6964203020696e707574000000000000000000000000000000000081525090610626576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061d91906116a9565b60405180910390fd5b5080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663888e81fb336040518263ffffffff1660e01b81526004016106c691906111bf565b60206040518083038186803b1580156106de57600080fd5b505afa1580156106f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107169190611577565b610755576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074c90611601565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600f81526020017f496e76616c6964203020696e7075740000000000000000000000000000000000815250906107fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f491906116a9565b60405180910390fd5b5080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663888e81fb336040518263ffffffff1660e01b81526004016108e991906111bf565b60206040518083038186803b15801561090157600080fd5b505afa158015610915573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109399190611577565b610978576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096f90611601565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600f81526020017f496e76616c6964203020696e707574000000000000000000000000000000000081525090610a20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1791906116a9565b60405180910390fd5b5080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663888e81fb336040518263ffffffff1660e01b8152600401610ae691906111bf565b60206040518083038186803b158015610afe57600080fd5b505afa158015610b12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b369190611577565b610b75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6c90611601565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600f81526020017f496e76616c6964203020696e707574000000000000000000000000000000000081525090610c1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1491906116a9565b60405180910390fd5b5080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060019054906101000a900460ff16610c8a5760008054906101000a900460ff1615610c93565b610c926110d0565b5b610cd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc99061173d565b60405180910390fd5b60008060019054906101000a900460ff161590508015610d22576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600f81526020017f496e76616c6964203020696e707574000000000000000000000000000000000081525090610dca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc191906116a9565b60405180910390fd5b5081600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015610e2d5760008060016101000a81548160ff0219169083151502179055505b5050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663888e81fb336040518263ffffffff1660e01b8152600401610e8c91906111bf565b60206040518083038186803b158015610ea457600080fd5b505afa158015610eb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edc9190611577565b610f1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1290611601565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600f81526020017f496e76616c6964203020696e707574000000000000000000000000000000000081525090610fc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fba91906116a9565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff166324d7806c336040518263ffffffff1660e01b8152600401610ffd91906111bf565b60206040518083038186803b15801561101557600080fd5b505afa158015611029573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104d9190611577565b61108c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611083906117a9565b60405180910390fd5b80600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006110db306110e1565b15905090565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061114961114461113f84611104565b611124565b611104565b9050919050565b600061115b8261112e565b9050919050565b600061116d82611150565b9050919050565b61117d81611162565b82525050565b60006020820190506111986000830184611174565b92915050565b60006111a982611104565b9050919050565b6111b98161119e565b82525050565b60006020820190506111d460008301846111b0565b92915050565b600080fd5b60006111ea8261119e565b9050919050565b6111fa816111df565b811461120557600080fd5b50565b600081359050611217816111f1565b92915050565b600060208284031215611233576112326111da565b5b600061124184828501611208565b91505092915050565b600061125582611150565b9050919050565b6112658161124a565b82525050565b6000602082019050611280600083018461125c565b92915050565b60006112918261119e565b9050919050565b6112a181611286565b81146112ac57600080fd5b50565b6000813590506112be81611298565b92915050565b6000602082840312156112da576112d96111da565b5b60006112e8848285016112af565b91505092915050565b60006112fc8261119e565b9050919050565b61130c816112f1565b811461131757600080fd5b50565b60008135905061132981611303565b92915050565b600060208284031215611345576113446111da565b5b60006113538482850161131a565b91505092915050565b600061136782611150565b9050919050565b6113778161135c565b82525050565b6000602082019050611392600083018461136e565b92915050565b60006113a382611150565b9050919050565b6113b381611398565b82525050565b60006020820190506113ce60008301846113aa565b92915050565b60006113df8261119e565b9050919050565b6113ef816113d4565b81146113fa57600080fd5b50565b60008135905061140c816113e6565b92915050565b600060208284031215611428576114276111da565b5b6000611436848285016113fd565b91505092915050565b600061144a82611150565b9050919050565b61145a8161143f565b82525050565b60006020820190506114756000830184611451565b92915050565b6114848161119e565b811461148f57600080fd5b50565b6000813590506114a18161147b565b92915050565b6000602082840312156114bd576114bc6111da565b5b60006114cb84828501611492565b91505092915050565b60006114df8261119e565b9050919050565b6114ef816114d4565b81146114fa57600080fd5b50565b60008135905061150c816114e6565b92915050565b600060208284031215611528576115276111da565b5b6000611536848285016114fd565b91505092915050565b60008115159050919050565b6115548161153f565b811461155f57600080fd5b50565b6000815190506115718161154b565b92915050565b60006020828403121561158d5761158c6111da565b5b600061159b84828501611562565b91505092915050565b600082825260208201905092915050565b7f4e6f742041646d696e0000000000000000000000000000000000000000000000600082015250565b60006115eb6009836115a4565b91506115f6826115b5565b602082019050919050565b6000602082019050818103600083015261161a816115de565b9050919050565b600081519050919050565b60005b8381101561164a57808201518184015260208101905061162f565b83811115611659576000848401525b50505050565b6000601f19601f8301169050919050565b600061167b82611621565b61168581856115a4565b935061169581856020860161162c565b61169e8161165f565b840191505092915050565b600060208201905081810360008301526116c38184611670565b905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000611727602e836115a4565b9150611732826116cb565b604082019050919050565b600060208201905081810360008301526117568161171a565b9050919050565b7f524d20696e76616c696400000000000000000000000000000000000000000000600082015250565b6000611793600a836115a4565b915061179e8261175d565b602082019050919050565b600060208201905081810360008301526117c281611786565b905091905056fea26469706673582212203b6c3dc179bf75d02ed6120e792e4982c33e7ce955b3d88cce4ca93d78051df164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "initialize(address)": {
        "details": "initializer to call after deployment, can only be called once"
      },
      "setChildRegistrar(address)": {
        "details": "Setter for the L2 bridge registrar"
      },
      "setDefaultCuratorVault(address)": {
        "details": "Setter for the default curator vault address"
      },
      "setMakerRegistrar(address)": {
        "details": "Setter for the maker registrar address"
      },
      "setParameterManager(address)": {
        "details": "Setter for the role manager address"
      },
      "setReactionNftContract(address)": {
        "details": "Setter for the maker registrar address"
      },
      "setRoleManager(address)": {
        "details": "Setter for the role manager address"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2797,
        "contract": "contracts/Config/AddressManager.sol:AddressManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2800,
        "contract": "contracts/Config/AddressManager.sol:AddressManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7440,
        "contract": "contracts/Config/AddressManager.sol:AddressManager",
        "label": "roleManager",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IRoleManager)8741"
      },
      {
        "astId": 7444,
        "contract": "contracts/Config/AddressManager.sol:AddressManager",
        "label": "parameterManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IParameterManager)8416"
      },
      {
        "astId": 7448,
        "contract": "contracts/Config/AddressManager.sol:AddressManager",
        "label": "makerRegistrar",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IMakerRegistrar)7765"
      },
      {
        "astId": 7452,
        "contract": "contracts/Config/AddressManager.sol:AddressManager",
        "label": "reactionNftContract",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IStandard1155)11442"
      },
      {
        "astId": 7456,
        "contract": "contracts/Config/AddressManager.sol:AddressManager",
        "label": "defaultCuratorVault",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ICuratorVault)7615"
      },
      {
        "astId": 7459,
        "contract": "contracts/Config/AddressManager.sol:AddressManager",
        "label": "childRegistrar",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICuratorVault)7615": {
        "encoding": "inplace",
        "label": "contract ICuratorVault",
        "numberOfBytes": "20"
      },
      "t_contract(IMakerRegistrar)7765": {
        "encoding": "inplace",
        "label": "contract IMakerRegistrar",
        "numberOfBytes": "20"
      },
      "t_contract(IParameterManager)8416": {
        "encoding": "inplace",
        "label": "contract IParameterManager",
        "numberOfBytes": "20"
      },
      "t_contract(IRoleManager)8741": {
        "encoding": "inplace",
        "label": "contract IRoleManager",
        "numberOfBytes": "20"
      },
      "t_contract(IStandard1155)11442": {
        "encoding": "inplace",
        "label": "contract IStandard1155",
        "numberOfBytes": "20"
      }
    }
  }
}
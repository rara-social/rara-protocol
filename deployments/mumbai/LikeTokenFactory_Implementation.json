{
  "address": "0x71e52AffE853714aef81253Fd38116f18D5b3264",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "takerNftChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "takerNftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "takerNftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "deployedContract",
          "type": "address"
        }
      ],
      "name": "TokenDeployed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addressManager",
      "outputs": [
        {
          "internalType": "contract IAddressManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseTokenUri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAddressManager",
          "name": "_addressManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenImplementation",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_baseTokenUri",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "targetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "takerNftChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "takerNftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "takerNftId",
          "type": "uint256"
        }
      ],
      "name": "issueLikeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "likeTokens",
      "outputs": [
        {
          "internalType": "contract ILikeToken1155",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8bfb92847cb4df2b82bfc96554de389dc67339b4f373fcea0afbe0182aaef9e3",
  "receipt": {
    "to": null,
    "from": "0x8f1809FA5DDcf8275cf9C92fCeF40B2154a01022",
    "contractAddress": "0x71e52AffE853714aef81253Fd38116f18D5b3264",
    "transactionIndex": 5,
    "gasUsed": "830437",
    "logsBloom": "0x
    "blockHash": "0x6f9bad1b3dc85ce8c3c5e108d2c0010e205bc8b384220ca2c69673788eeefd49",
    "transactionHash": "0x8bfb92847cb4df2b82bfc96554de389dc67339b4f373fcea0afbe0182aaef9e3",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 29506872,
        "transactionHash": "0x8bfb92847cb4df2b82bfc96554de389dc67339b4f373fcea0afbe0182aaef9e3",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008f1809fa5ddcf8275cf9c92fcef40b2154a01022",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000074a490cc7105e0000000000000000000000000000000000000000000000000561bbcd96b71ad1000000000000000000000000000000000000000000000925fedee21547113649000000000000000000000000000000000000000000000000055a718489f00a73000000000000000000000000000000000000000000000925fee62c5e53d846a7",
        "logIndex": 20,
        "blockHash": "0x6f9bad1b3dc85ce8c3c5e108d2c0010e205bc8b384220ca2c69673788eeefd49"
      }
    ],
    "blockNumber": 29506872,
    "cumulativeGasUsed": "1652198",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "ce4e5efcce12a63bbd861be302cf8cc2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"takerNftChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"takerNftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"takerNftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"deployedContract\",\"type\":\"address\"}],\"name\":\"TokenDeployed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressManager\",\"outputs\":[{\"internalType\":\"contract IAddressManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAddressManager\",\"name\":\"_addressManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenImplementation\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_baseTokenUri\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takerNftChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"takerNftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takerNftId\",\"type\":\"uint256\"}],\"name\":\"issueLikeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"likeTokens\",\"outputs\":[{\"internalType\":\"contract ILikeToken1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is responsible for issuing like tokens for a target NFT. It will keep track of like token contracts for each NFT.  When a new Like Token is issued, it will check to see if it already has deployed a like token contract and if not, deploy a new proxy contract for that token.\",\"events\":{\"TokenDeployed(uint256,address,uint256,address)\":{\"details\":\"emitted when new like token contract is created\"}},\"kind\":\"dev\",\"methods\":{\"initialize(address,address,string)\":{\"details\":\"initializer to call after deployment, can only be called once\"},\"issueLikeToken(address,uint256,address,uint256)\":{\"details\":\"issue like token to target address\"}},\"title\":\"LikeTokenFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Likes/LikeTokenFactory.sol\":\"LikeTokenFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary ClonesUpgradeable {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x45fe5b6e09537c84248325b6cb3595aed7752b07425dfe136351234f2d8130dd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"contracts/Config/IAddressManager.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"../Permissions/IRoleManager.sol\\\";\\nimport \\\"../Parameters/IParameterManager.sol\\\";\\nimport \\\"../Maker/IMakerRegistrar.sol\\\";\\nimport \\\"../Token/IStandard1155.sol\\\";\\nimport \\\"../Reactions/IReactionVault.sol\\\";\\nimport \\\"../CuratorVault/SigmoidCuratorVault/ICuratorVault.sol\\\";\\n\\ninterface IAddressManager {\\n    /// @dev Getter for the role manager address\\n    function roleManager() external returns (IRoleManager);\\n\\n    /// @dev Setter for the role manager address\\n    function setRoleManager(IRoleManager _roleManager) external;\\n\\n    /// @dev Getter for the role manager address\\n    function parameterManager() external returns (IParameterManager);\\n\\n    /// @dev Setter for the role manager address\\n    function setParameterManager(IParameterManager _parameterManager) external;\\n\\n    /// @dev Getter for the maker registrar address\\n    function makerRegistrar() external returns (IMakerRegistrar);\\n\\n    /// @dev Setter for the maker registrar address\\n    function setMakerRegistrar(IMakerRegistrar _makerRegistrar) external;\\n\\n    /// @dev Getter for the reaction NFT contract address\\n    function reactionNftContract() external returns (IStandard1155);\\n\\n    /// @dev Setter for the reaction NFT contract address\\n    function setReactionNftContract(IStandard1155 _reactionNftContract)\\n        external;\\n\\n    /// @dev Getter for the default Curator Vault contract address\\n    function defaultCuratorVault() external returns (ICuratorVault);\\n\\n    /// @dev Setter for the default Curator Vault contract address\\n    function setDefaultCuratorVault(ICuratorVault _defaultCuratorVault)\\n        external;\\n\\n    /// @dev Getter for the L2 bridge registrar\\n    function childRegistrar() external returns (address);\\n\\n    /// @dev Setter for the L2 bridge registrar\\n    function setChildRegistrar(address _childRegistrar) external;\\n\\n    /// @dev Getter for the address of the royalty registry\\n    function royaltyRegistry() external returns (address);\\n\\n    /// @dev Setter for the address of the royalty registry\\n    function setRoyaltyRegistry(address _royaltyRegistry) external;\\n\\n    /// @dev Getter for the address of the Like Token Factory\\n    function likeTokenFactory() external returns (address);\\n\\n    /// @dev Setter for the address of the Like Token Factory\\n    function setLikeTokenFactory(address _likeTokenFactory) external;\\n}\\n\",\"keccak256\":\"0x9fc0369919645ae39e271e02ced9e27ede2ad724fdff4361cf50f3170f60c736\",\"license\":\"GPL-3.0\"},\"contracts/CuratorVault/SigmoidCuratorVault/ICuratorVault.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"../../Token/IStandard1155.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n/// @dev Interface for the curator vault\\ninterface ICuratorVault {\\n    function getTokenId(\\n        uint256 nftChainId,\\n        address nftAddress,\\n        uint256 nftId,\\n        IERC20Upgradeable paymentToken\\n    ) external returns (uint256);\\n\\n    function buyCuratorTokens(\\n        uint256 nftChainId,\\n        address nftAddress,\\n        uint256 nftId,\\n        IERC20Upgradeable paymentToken,\\n        uint256 paymentAmount,\\n        address mintToAddress,\\n        bool isTakerPosition\\n    ) external returns (uint256);\\n\\n    function sellCuratorTokens(\\n        uint256 nftChainId,\\n        address nftAddress,\\n        uint256 nftId,\\n        IERC20Upgradeable paymentToken,\\n        uint256 tokensToBurn,\\n        address refundToAddress\\n    ) external returns (uint256);\\n\\n    function curatorTokens() external returns (IStandard1155);\\n}\\n\",\"keccak256\":\"0x4c69f5f3d4f76dcbceb716ed541680e3bc17154f158f41dd4c7723719478e17d\",\"license\":\"GPL-3.0\"},\"contracts/Likes/ILikeTokenFactory.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\n/// @dev Interface for the LikeTokenFactory\\ninterface ILikeTokenFactory {\\n    /// @dev Issue a like token for a specific NFT\\n    function issueLikeToken(\\n        address targetAddress,\\n        uint256 takerNftChainId,\\n        address takerNftAddress,\\n        uint256 takerNftId\\n    ) external returns (address, uint256);\\n}\\n\",\"keccak256\":\"0xe8ad80831927931b0a9354493f128fd62ff11329dd9d9f04672a6bce328fcca8\",\"license\":\"GPL-3.0\"},\"contracts/Likes/LikeTokenFactory.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"./ILikeTokenFactory.sol\\\";\\nimport \\\"./LikeTokenFactoryStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n\\n/// @title LikeTokenFactory\\n/// @dev This contract is responsible for issuing like tokens for a target NFT.\\n/// It will keep track of like token contracts for each NFT.  When a new Like Token\\n/// is issued, it will check to see if it already has deployed a like token contract\\n/// and if not, deploy a new proxy contract for that token.\\ncontract LikeTokenFactory is\\n    Initializable,\\n    ILikeTokenFactory,\\n    LikeTokenFactoryStorageV1\\n{\\n    /// @dev emitted when new like token contract is created\\n    event TokenDeployed(\\n        uint256 takerNftChainId,\\n        address takerNftAddress,\\n        uint256 takerNftId,\\n        address deployedContract\\n    );\\n\\n    /// @dev verifies that the calling account has a role to enable minting tokens\\n    modifier onlyReactionNftAdmin() {\\n        IRoleManager roleManager = IRoleManager(addressManager.roleManager());\\n        require(roleManager.isReactionNftAdmin(msg.sender), \\\"Not NFT Admin\\\");\\n        _;\\n    }\\n\\n    /// @dev initializer to call after deployment, can only be called once\\n    function initialize(\\n        IAddressManager _addressManager,\\n        address _tokenImplementation,\\n        string calldata _baseTokenUri\\n    ) public initializer {\\n        require(address(_addressManager) != address(0x0), \\\"Invalid 0 input\\\");\\n        addressManager = _addressManager;\\n\\n        require(\\n            address(_tokenImplementation) != address(0x0),\\n            \\\"Invalid 0 input\\\"\\n        );\\n        tokenImplementation = _tokenImplementation;\\n\\n        baseTokenUri = _baseTokenUri;\\n    }\\n\\n    /// @dev issue like token to target address\\n    function issueLikeToken(\\n        address targetAddress,\\n        uint256 takerNftChainId,\\n        address takerNftAddress,\\n        uint256 takerNftId\\n    ) public onlyReactionNftAdmin returns (address, uint256) {\\n        // Get the key from the taker nft details\\n        uint256 tokenIndex = uint256(\\n            keccak256(abi.encode(takerNftChainId, takerNftAddress, takerNftId))\\n        );\\n\\n        // Check if it exists\\n        ILikeToken1155 targetContract = likeTokens[tokenIndex];\\n\\n        // If it doesn't exist, then create it\\n        if (address(targetContract) == address(0x0)) {\\n            // Deploy it\\n            address newlyDeployed = ClonesUpgradeable.clone(\\n                tokenImplementation\\n            );\\n\\n            // Initialize it\\n            ILikeToken1155(newlyDeployed).initialize(\\n                // The URI is a concat of the base URI + addr + \\\"/{id}\\n                string(\\n                    abi.encodePacked(\\n                        baseTokenUri,\\n                        StringsUpgradeable.toHexString(\\n                            uint256(uint160(newlyDeployed)),\\n                            20\\n                        ),\\n                        \\\"/{id}\\\"\\n                    )\\n                ),\\n                address(addressManager),\\n                string(\\n                    abi.encodePacked(\\n                        string.concat(bytes(baseTokenUri), \\\"/contract/\\\"),\\n                        StringsUpgradeable.toHexString(\\n                            uint256(uint160(newlyDeployed)),\\n                            20\\n                        )\\n                    )\\n                )\\n            );\\n\\n            // Save it to the mapping\\n            likeTokens[tokenIndex] = ILikeToken1155(newlyDeployed);\\n\\n            // Set the address\\n            targetContract = ILikeToken1155(newlyDeployed);\\n\\n            // Emit event\\n            emit TokenDeployed(\\n                takerNftChainId,\\n                takerNftAddress,\\n                takerNftId,\\n                newlyDeployed\\n            );\\n        }\\n\\n        // Mint the token\\n        uint256 tokenId = targetContract.mint(targetAddress);\\n        return (targetAddress, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x7c496770926acf7ae94f759f5e3b9325c46ea57b7479143dfaa61bc09fbc89f3\",\"license\":\"GPL-3.0\"},\"contracts/Likes/LikeTokenFactoryStorage.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"../Config/IAddressManager.sol\\\";\\nimport \\\"./Token/ILikeToken1155.sol\\\";\\n\\n/// @title LikeTokenFactoryStorageV1\\n/// @dev This contract will hold all local variables for the LikeTokenFactory Contract\\n/// When upgrading the protocol, inherit from this contract on the V2 version and change the\\n/// LikeTokenFactory to inherit from the later version.  This ensures there are no storage layout\\n/// corruptions when upgrading.\\ncontract LikeTokenFactoryStorageV1 {\\n    /// @dev local storage of the address manager\\n    IAddressManager public addressManager;\\n\\n    /// @dev mapping for deployed like token contracts - key is hash of NFT details\\n    mapping(uint256 => ILikeToken1155) public likeTokens;\\n\\n    /// @dev the implementation address of the token contract\\n    address public tokenImplementation;\\n\\n    /// @dev the base string for the token URIs that will be set on the like tokens\\n    /// The base token uri should be set to a format similar to \\\"https://www.rara.social/tokens\\\"\\n    /// When a like token is created, it will append the token contract \\\"address\\\" and \\\"{id}\\\" so the final\\n    /// uri on an individual token will look like:\\n    ///   \\\"https://www.rara.social/tokens/E5BA5c73378BC8Da94738CB04490680ae3eab88C/{id}\\\"\\n    string public baseTokenUri;\\n}\\n\\n/// On the next version of the protocol, if new variables are added, put them in the below\\n/// contract and use this as the inheritance chain.\\n/**\\ncontract LikeTokenFactoryStorageV2 is LikeTokenFactoryStorageV1 {\\n  address newVariable;\\n}\\n */\\n\",\"keccak256\":\"0xec155174bf7e25d853349e8fab96c5b616b41830fa393f2deaad2d1e39c9bb09\",\"license\":\"GPL-3.0\"},\"contracts/Likes/Token/ILikeToken1155.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\n/// @dev Interface for the LikeToken1155 toke contract.\\ninterface ILikeToken1155 {\\n    /// @dev initialize the state\\n    function initialize(\\n        string memory _uri,\\n        address _addressManager,\\n        string memory _contractUri\\n    ) external;\\n\\n    /// @dev Allows a priviledged account to mint a token to the specified address\\n    function mint(address to) external returns (uint256);\\n\\n    /// @dev Allows the owner to burn a token to from their address\\n    function burn(uint256 id) external;\\n}\\n\",\"keccak256\":\"0x151c7acb30070fbd87c8fa78bff3425d343097ced9275be157f92999cdb91119\",\"license\":\"GPL-3.0\"},\"contracts/Maker/IMakerRegistrar.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\n/// @dev Interface for the maker registrar that supports registering and de-registering NFTs\\ninterface IMakerRegistrar {\\n    /// @dev struct for storing details about a registered NFT\\n    struct NftDetails {\\n        bool registered;\\n        address owner;\\n        address[] creators;\\n        uint256[] creatorSaleBasisPoints;\\n    }\\n\\n    function transformToSourceLookup(uint256 metaId) external returns (uint256);\\n\\n    function deriveSourceId(\\n        uint256 nftChainId,\\n        address nftAddress,\\n        uint256 nftId\\n    ) external returns (uint256);\\n\\n    /// @dev lookup for NftDetails from source ID\\n    function sourceToDetailsLookup(uint256)\\n        external\\n        returns (NftDetails memory);\\n\\n    function verifyOwnership(\\n        address nftContractAddress,\\n        uint256 nftId,\\n        address potentialOwner\\n    ) external returns (bool);\\n\\n    function registerNftFromBridge(\\n        address owner,\\n        uint256 chainId,\\n        address nftContractAddress,\\n        uint256 nftId,\\n        address[] memory nftCreatorAddresses,\\n        uint256[] memory creatorSaleBasisPoints,\\n        uint256 optionBits,\\n        string memory ipfsMetadataHash\\n    ) external;\\n\\n    function deRegisterNftFromBridge(\\n        address owner,\\n        uint256 chainId,\\n        address nftContractAddress,\\n        uint256 nftId\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcba279f4966ad3a5d506b0661c847b6593805c2e25fbebb3792d33e71769656f\",\"license\":\"GPL-3.0\"},\"contracts/Parameters/IParameterManager.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"../Permissions/IRoleManager.sol\\\";\\nimport \\\"../Token/IWMATIC.sol\\\";\\n\\ninterface IParameterManager {\\n    /// @dev Getter for the payment token\\n    function paymentToken() external returns (IWMATIC);\\n\\n    /// @dev Setter for the payment token\\n    function setPaymentToken(IWMATIC _paymentToken) external;\\n\\n    /// @dev Getter for the reaction price\\n    function reactionPrice() external returns (uint256);\\n\\n    /// @dev Setter for the reaction price\\n    function setReactionPrice(uint256 _reactionPrice) external;\\n\\n    /// @dev Getter for the cut of purchase price going to the curator liability\\n    function saleCuratorLiabilityBasisPoints() external returns (uint256);\\n\\n    /// @dev Setter for the cut of purchase price going to the curator liability\\n    function setSaleCuratorLiabilityBasisPoints(\\n        uint256 _saleCuratorLiabilityBasisPoints\\n    ) external;\\n\\n    /// @dev Getter for the cut of purchase price going to the referrer\\n    function saleReferrerBasisPoints() external returns (uint256);\\n\\n    /// @dev Setter for the cut of purchase price going to the referrer\\n    function setSaleReferrerBasisPoints(uint256 _saleReferrerBasisPoints)\\n        external;\\n\\n    /// @dev Getter for the cut of spend curator liability going to the taker\\n    function spendTakerBasisPoints() external returns (uint256);\\n\\n    /// @dev Setter for the cut of spend curator liability going to the taker\\n    function setSpendTakerBasisPoints(uint256 _spendTakerBasisPoints) external;\\n\\n    /// @dev Getter for the cut of spend curator liability going to the taker\\n    function spendReferrerBasisPoints() external returns (uint256);\\n\\n    /// @dev Setter for the cut of spend curator liability going to the referrer\\n    function setSpendReferrerBasisPoints(uint256 _spendReferrerBasisPoints)\\n        external;\\n\\n    /// @dev Getter for the check to see if a curator vault is allowed to be used\\n    function approvedCuratorVaults(address potentialVault)\\n        external\\n        returns (bool);\\n\\n    /// @dev Setter for the list of curator vaults allowed to be used\\n    function setApprovedCuratorVaults(address vault, bool approved) external;\\n\\n    /// @dev Getter for the native wrapped ERC20 token (e.g. WMATIC)\\n    function nativeWrappedToken() external returns (IERC20Upgradeable);\\n\\n    /// @dev Setter for the native wrapped ERC20 token (e.g. WMATIC)\\n    function setNativeWrappedToken(IERC20Upgradeable _nativeWrappedToken)\\n        external;\\n\\n    /// @dev Setter for free reaction limit\\n    function freeReactionLimit() external returns (uint256);\\n\\n    /// @dev Setter for free reaction limit\\n    function setFreeReactionLimit(uint256 limit) external;\\n}\\n\",\"keccak256\":\"0x091430591a4f7b0d4ac989f9bc08a26c91ae3a01cc4eedc5d4a4cf839c524e04\",\"license\":\"GPL-3.0\"},\"contracts/Permissions/IRoleManager.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\ninterface IRoleManager {\\n    /// @dev Determines if the specified address has capability to mint and burn reaction NFTs\\n    /// @param potentialAddress Address to check\\n    function isAdmin(address potentialAddress) external view returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to udpate addresses in the protocol\\n    /// @param potentialAddress Address to check\\n    function isAddressManagerAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to update parameters in the protocol\\n    /// @param potentialAddress Address to check\\n    function isParameterManagerAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to to mint and burn reaction NFTs\\n    /// @param potentialAddress Address to check\\n    function isReactionNftAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to purchase curator vault tokens\\n    /// @param potentialAddress Address to check\\n    function isCuratorVaultPurchaser(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to mint and burn curator tokens\\n    /// @param potentialAddress Address to check\\n    function isCuratorTokenAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x335b249b073e02dd1ca255772734a1f21909694cf774e8c00f04c8095bf9eb30\",\"license\":\"GPL-3.0\"},\"contracts/Reactions/IReactionVault.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\nimport \\\"../Token/IWMATIC.sol\\\";\\n\\n/// @dev Interface for the ReactionVault that supports buying and spending reactions\\ninterface IReactionVault {\\n    struct ReactionPriceDetails {\\n        IWMATIC paymentToken;\\n        uint256 reactionPrice;\\n        uint256 saleCuratorLiabilityBasisPoints;\\n    }\\n}\\n\",\"keccak256\":\"0x686da314820d3b0a9eaa7409a6885bf49021f2906430167f610cdb047b46dc1b\",\"license\":\"GPL-3.0\"},\"contracts/Token/IStandard1155.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\n/// @dev Interface for the Standard1155 toke contract.\\ninterface IStandard1155 {\\n    /// @dev Allows a priviledged account to mint tokens to the specified address\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    function burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4d68249e8c10bd9aab5ae4dce0c72c88ac899a451b8624c409780cd60e88abc4\",\"license\":\"GPL-3.0\"},\"contracts/Token/IWMATIC.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n/// @dev Interface for interacting with the wrapped matic token contract\\ninterface IWMATIC is IERC20Upgradeable {\\n    // Send MATIC directly to contract\\n    receive() external payable;\\n\\n    // Call deposit directly\\n    function deposit() external payable;\\n\\n    // Withdraw wrapped tokens into MATIC\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x24dc1098e5e0ac44ae003cd466dd7d8693b2b5591804cf1f7d9600195b6d7d1c\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610e11806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632f3a3d5d146100675780633ab76e9f146100905780634571e3a6146100a95780634c690434146100be5780637a0101a2146100f0578063e242f76d14610105575b600080fd5b60025461007a906001600160a01b031681565b60405161008791906109a0565b60405180910390f35b60005461007a906201000090046001600160a01b031681565b6100bc6100b73660046109cc565b61012e565b005b6100d16100cc366004610a5e565b610285565b604080516001600160a01b039093168352602083019190915201610087565b6100f8610639565b6040516100879190610b02565b61007a610113366004610b15565b6001602052600090815260409020546001600160a01b031681565b600054610100900460ff166101495760005460ff161561014d565b303b155b6101b55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff161580156101d7576000805461ffff19166101011790555b6001600160a01b0385166101fd5760405162461bcd60e51b81526004016101ac90610b2e565b600080546001600160a01b03808816620100000262010000600160b01b03199092169190911790915584166102445760405162461bcd60e51b81526004016101ac90610b2e565b600280546001600160a01b0319166001600160a01b03861617905561026b60038484610907565b50801561027e576000805461ff00191690555b5050505050565b60008060008060029054906101000a90046001600160a01b03166001600160a01b031662435da56040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156102d857600080fd5b505af11580156102ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103109190610b57565b6040516306cddfb760e51b81529091506001600160a01b0382169063d9bbf6e09061033f9033906004016109a0565b60206040518083038186803b15801561035757600080fd5b505afa15801561036b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038f9190610b74565b6103cb5760405162461bcd60e51b815260206004820152600d60248201526c2737ba1027232a1020b236b4b760991b60448201526064016101ac565b6040805160208082018990526001600160a01b038881168385015260608084018990528451808503909101815260809093018452825192820192909220600081815260019092529290205416806105aa57600254600090610434906001600160a01b03166106c7565b90506001600160a01b0381166395a2fadc6003610452836014610764565b604051602001610463929190610c6a565b604051602081830303815290604052600060029054906101000a90046001600160a01b0316600360405160200161049a9190610c9f565b6040516020818303038152906040526104bd866001600160a01b03166014610764565b6040516020016104ce929190610cc5565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016104fb93929190610cf4565b600060405180830381600087803b15801561051557600080fd5b505af1158015610529573d6000803e3d6000fd5b50505060008481526001602090815260409182902080546001600160a01b0319166001600160a01b0386811691821790925583518e8152918d16928201929092529182018a9052606082015291925082917f5018656a5c4c1dafde997aba1d1703b2697ccf17eb2dfa247d6ad960b8814214915060800160405180910390a1505b6040516335313c2160e11b81526000906001600160a01b03831690636a627842906105d9908d906004016109a0565b602060405180830381600087803b1580156105f357600080fd5b505af1158015610607573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062b9190610d32565b999a98505050505050505050565b6003805461064690610b96565b80601f016020809104026020016040519081016040528092919081815260200182805461067290610b96565b80156106bf5780601f10610694576101008083540402835291602001916106bf565b820191906000526020600020905b8154815290600101906020018083116106a257829003601f168201915b505050505081565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b03811661075f5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064016101ac565b919050565b60606000610773836002610d61565b61077e906002610d80565b67ffffffffffffffff81111561079657610796610d98565b6040519080825280601f01601f1916602001820160405280156107c0576020820181803683370190505b509050600360fc1b816000815181106107db576107db610dae565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061080a5761080a610dae565b60200101906001600160f81b031916908160001a905350600061082e846002610d61565b610839906001610d80565b90505b60018111156108b1576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061086d5761086d610dae565b1a60f81b82828151811061088357610883610dae565b60200101906001600160f81b031916908160001a90535060049490941c936108aa81610dc4565b905061083c565b5083156109005760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016101ac565b9392505050565b82805461091390610b96565b90600052602060002090601f016020900481019282610935576000855561097b565b82601f1061094e5782800160ff1982351617855561097b565b8280016001018555821561097b579182015b8281111561097b578235825591602001919060010190610960565b5061098792915061098b565b5090565b5b80821115610987576000815560010161098c565b6001600160a01b0391909116815260200190565b6001600160a01b03811681146109c957600080fd5b50565b600080600080606085870312156109e257600080fd5b84356109ed816109b4565b935060208501356109fd816109b4565b9250604085013567ffffffffffffffff80821115610a1a57600080fd5b818701915087601f830112610a2e57600080fd5b813581811115610a3d57600080fd5b886020828501011115610a4f57600080fd5b95989497505060200194505050565b60008060008060808587031215610a7457600080fd5b8435610a7f816109b4565b9350602085013592506040850135610a96816109b4565b9396929550929360600135925050565b60005b83811015610ac1578181015183820152602001610aa9565b83811115610ad0576000848401525b50505050565b60008151808452610aee816020860160208601610aa6565b601f01601f19169290920160200192915050565b6020815260006109006020830184610ad6565b600060208284031215610b2757600080fd5b5035919050565b6020808252600f908201526e125b9d985b1a59080c081a5b9c1d5d608a1b604082015260600190565b600060208284031215610b6957600080fd5b8151610900816109b4565b600060208284031215610b8657600080fd5b8151801515811461090057600080fd5b600181811c90821680610baa57607f821691505b60208210811415610bcb57634e487b7160e01b600052602260045260246000fd5b50919050565b8054600090600181811c9080831680610beb57607f831692505b6020808410821415610c0d57634e487b7160e01b600052602260045260246000fd5b818015610c215760018114610c3257610c5e565b60ff19861689528489019650610c5e565b876000528160002060005b86811015610c565781548b820152908501908301610c3d565b505084890196505b50505050505092915050565b6000610c768285610bd1565b8351610c86818360208801610aa6565b642f7b69647d60d81b9101908152600501949350505050565b6000610cab8284610bd1565b692f636f6e74726163742f60b01b8152600a019392505050565b60008351610cd7818460208801610aa6565b835190830190610ceb818360208801610aa6565b01949350505050565b606081526000610d076060830186610ad6565b6001600160a01b03851660208401528281036040840152610d288185610ad6565b9695505050505050565b600060208284031215610d4457600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610d7b57610d7b610d4b565b500290565b60008219821115610d9357610d93610d4b565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081610dd357610dd3610d4b565b50600019019056fea2646970667358221220dd11a7a5f42699bf48384a88eee5c5c251bff487e734981ac4a4d5d225f0566c64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80632f3a3d5d146100675780633ab76e9f146100905780634571e3a6146100a95780634c690434146100be5780637a0101a2146100f0578063e242f76d14610105575b600080fd5b60025461007a906001600160a01b031681565b60405161008791906109a0565b60405180910390f35b60005461007a906201000090046001600160a01b031681565b6100bc6100b73660046109cc565b61012e565b005b6100d16100cc366004610a5e565b610285565b604080516001600160a01b039093168352602083019190915201610087565b6100f8610639565b6040516100879190610b02565b61007a610113366004610b15565b6001602052600090815260409020546001600160a01b031681565b600054610100900460ff166101495760005460ff161561014d565b303b155b6101b55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff161580156101d7576000805461ffff19166101011790555b6001600160a01b0385166101fd5760405162461bcd60e51b81526004016101ac90610b2e565b600080546001600160a01b03808816620100000262010000600160b01b03199092169190911790915584166102445760405162461bcd60e51b81526004016101ac90610b2e565b600280546001600160a01b0319166001600160a01b03861617905561026b60038484610907565b50801561027e576000805461ff00191690555b5050505050565b60008060008060029054906101000a90046001600160a01b03166001600160a01b031662435da56040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156102d857600080fd5b505af11580156102ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103109190610b57565b6040516306cddfb760e51b81529091506001600160a01b0382169063d9bbf6e09061033f9033906004016109a0565b60206040518083038186803b15801561035757600080fd5b505afa15801561036b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038f9190610b74565b6103cb5760405162461bcd60e51b815260206004820152600d60248201526c2737ba1027232a1020b236b4b760991b60448201526064016101ac565b6040805160208082018990526001600160a01b038881168385015260608084018990528451808503909101815260809093018452825192820192909220600081815260019092529290205416806105aa57600254600090610434906001600160a01b03166106c7565b90506001600160a01b0381166395a2fadc6003610452836014610764565b604051602001610463929190610c6a565b604051602081830303815290604052600060029054906101000a90046001600160a01b0316600360405160200161049a9190610c9f565b6040516020818303038152906040526104bd866001600160a01b03166014610764565b6040516020016104ce929190610cc5565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016104fb93929190610cf4565b600060405180830381600087803b15801561051557600080fd5b505af1158015610529573d6000803e3d6000fd5b50505060008481526001602090815260409182902080546001600160a01b0319166001600160a01b0386811691821790925583518e8152918d16928201929092529182018a9052606082015291925082917f5018656a5c4c1dafde997aba1d1703b2697ccf17eb2dfa247d6ad960b8814214915060800160405180910390a1505b6040516335313c2160e11b81526000906001600160a01b03831690636a627842906105d9908d906004016109a0565b602060405180830381600087803b1580156105f357600080fd5b505af1158015610607573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062b9190610d32565b999a98505050505050505050565b6003805461064690610b96565b80601f016020809104026020016040519081016040528092919081815260200182805461067290610b96565b80156106bf5780601f10610694576101008083540402835291602001916106bf565b820191906000526020600020905b8154815290600101906020018083116106a257829003601f168201915b505050505081565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b03811661075f5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064016101ac565b919050565b60606000610773836002610d61565b61077e906002610d80565b67ffffffffffffffff81111561079657610796610d98565b6040519080825280601f01601f1916602001820160405280156107c0576020820181803683370190505b509050600360fc1b816000815181106107db576107db610dae565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061080a5761080a610dae565b60200101906001600160f81b031916908160001a905350600061082e846002610d61565b610839906001610d80565b90505b60018111156108b1576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061086d5761086d610dae565b1a60f81b82828151811061088357610883610dae565b60200101906001600160f81b031916908160001a90535060049490941c936108aa81610dc4565b905061083c565b5083156109005760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016101ac565b9392505050565b82805461091390610b96565b90600052602060002090601f016020900481019282610935576000855561097b565b82601f1061094e5782800160ff1982351617855561097b565b8280016001018555821561097b579182015b8281111561097b578235825591602001919060010190610960565b5061098792915061098b565b5090565b5b80821115610987576000815560010161098c565b6001600160a01b0391909116815260200190565b6001600160a01b03811681146109c957600080fd5b50565b600080600080606085870312156109e257600080fd5b84356109ed816109b4565b935060208501356109fd816109b4565b9250604085013567ffffffffffffffff80821115610a1a57600080fd5b818701915087601f830112610a2e57600080fd5b813581811115610a3d57600080fd5b886020828501011115610a4f57600080fd5b95989497505060200194505050565b60008060008060808587031215610a7457600080fd5b8435610a7f816109b4565b9350602085013592506040850135610a96816109b4565b9396929550929360600135925050565b60005b83811015610ac1578181015183820152602001610aa9565b83811115610ad0576000848401525b50505050565b60008151808452610aee816020860160208601610aa6565b601f01601f19169290920160200192915050565b6020815260006109006020830184610ad6565b600060208284031215610b2757600080fd5b5035919050565b6020808252600f908201526e125b9d985b1a59080c081a5b9c1d5d608a1b604082015260600190565b600060208284031215610b6957600080fd5b8151610900816109b4565b600060208284031215610b8657600080fd5b8151801515811461090057600080fd5b600181811c90821680610baa57607f821691505b60208210811415610bcb57634e487b7160e01b600052602260045260246000fd5b50919050565b8054600090600181811c9080831680610beb57607f831692505b6020808410821415610c0d57634e487b7160e01b600052602260045260246000fd5b818015610c215760018114610c3257610c5e565b60ff19861689528489019650610c5e565b876000528160002060005b86811015610c565781548b820152908501908301610c3d565b505084890196505b50505050505092915050565b6000610c768285610bd1565b8351610c86818360208801610aa6565b642f7b69647d60d81b9101908152600501949350505050565b6000610cab8284610bd1565b692f636f6e74726163742f60b01b8152600a019392505050565b60008351610cd7818460208801610aa6565b835190830190610ceb818360208801610aa6565b01949350505050565b606081526000610d076060830186610ad6565b6001600160a01b03851660208401528281036040840152610d288185610ad6565b9695505050505050565b600060208284031215610d4457600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610d7b57610d7b610d4b565b500290565b60008219821115610d9357610d93610d4b565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081610dd357610dd3610d4b565b50600019019056fea2646970667358221220dd11a7a5f42699bf48384a88eee5c5c251bff487e734981ac4a4d5d225f0566c64736f6c63430008090033",
  "devdoc": {
    "details": "This contract is responsible for issuing like tokens for a target NFT. It will keep track of like token contracts for each NFT.  When a new Like Token is issued, it will check to see if it already has deployed a like token contract and if not, deploy a new proxy contract for that token.",
    "events": {
      "TokenDeployed(uint256,address,uint256,address)": {
        "details": "emitted when new like token contract is created"
      }
    },
    "kind": "dev",
    "methods": {
      "initialize(address,address,string)": {
        "details": "initializer to call after deployment, can only be called once"
      },
      "issueLikeToken(address,uint256,address,uint256)": {
        "details": "issue like token to target address"
      }
    },
    "title": "LikeTokenFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2435,
        "contract": "contracts/Likes/LikeTokenFactory.sol:LikeTokenFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2438,
        "contract": "contracts/Likes/LikeTokenFactory.sol:LikeTokenFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10658,
        "contract": "contracts/Likes/LikeTokenFactory.sol:LikeTokenFactory",
        "label": "addressManager",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IAddressManager)8328"
      },
      {
        "astId": 10664,
        "contract": "contracts/Likes/LikeTokenFactory.sol:LikeTokenFactory",
        "label": "likeTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_contract(ILikeToken1155)10699)"
      },
      {
        "astId": 10667,
        "contract": "contracts/Likes/LikeTokenFactory.sol:LikeTokenFactory",
        "label": "tokenImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10670,
        "contract": "contracts/Likes/LikeTokenFactory.sol:LikeTokenFactory",
        "label": "baseTokenUri",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAddressManager)8328": {
        "encoding": "inplace",
        "label": "contract IAddressManager",
        "numberOfBytes": "20"
      },
      "t_contract(ILikeToken1155)10699": {
        "encoding": "inplace",
        "label": "contract ILikeToken1155",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_contract(ILikeToken1155)10699)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract ILikeToken1155)",
        "numberOfBytes": "32",
        "value": "t_contract(ILikeToken1155)10699"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0xA47c49884025ac35A24Fb2689484Dc08367F0429",
  "abi": [
    {
      "inputs": [],
      "name": "addressManager",
      "outputs": [
        {
          "internalType": "contract IAddressManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedCuratorVaults",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondingCurveParams",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "c",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAddressManager",
          "name": "_addressManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentToken",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reactionPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleCuratorLiabilityBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleReferrerBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovedCuratorVaults",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "c",
          "type": "uint256"
        }
      ],
      "name": "setBondingCurveParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_paymentToken",
          "type": "address"
        }
      ],
      "name": "setPaymentToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reactionPrice",
          "type": "uint256"
        }
      ],
      "name": "setReactionPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_saleCuratorLiabilityBasisPoints",
          "type": "uint256"
        }
      ],
      "name": "setSaleCuratorLiabilityBasisPoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_saleReferrerBasisPoints",
          "type": "uint256"
        }
      ],
      "name": "setSaleReferrerBasisPoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_spendReferrerBasisPoints",
          "type": "uint256"
        }
      ],
      "name": "setSpendReferrerBasisPoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_spendTakerBasisPoints",
          "type": "uint256"
        }
      ],
      "name": "setSpendTakerBasisPoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spendReferrerBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spendTakerBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbe081ab36e72cc3e4ed970e03a012392a97be9d0f67d9818f08f222b30d5ea62",
  "receipt": {
    "to": null,
    "from": "0xE27B562C20f689c0e80e6eAaA59D17ABB662129F",
    "contractAddress": "0xA47c49884025ac35A24Fb2689484Dc08367F0429",
    "transactionIndex": 14,
    "gasUsed": "1619304",
    "logsBloom": "0x
    "blockHash": "0x23d15860b167bdb35a60e0168047b034ec79706b731e5010e8e6c988b435af75",
    "transactionHash": "0xbe081ab36e72cc3e4ed970e03a012392a97be9d0f67d9818f08f222b30d5ea62",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 25543292,
        "transactionHash": "0xbe081ab36e72cc3e4ed970e03a012392a97be9d0f67d9818f08f222b30d5ea62",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000e27b562c20f689c0e80e6eaaa59d17abb662129f",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000008d30103c47a980000000000000000000000000000000000000000000000000ab748f3aabe8d4000000000000000000000000000000000000000000000080dd2f73f991d6ece0f0000000000000000000000000000000000000000000000000aae75f2a6fa12a800000000000000000000000000000000000000000000080dd300129a213348a7",
        "logIndex": 47,
        "blockHash": "0x23d15860b167bdb35a60e0168047b034ec79706b731e5010e8e6c988b435af75"
      }
    ],
    "blockNumber": 25543292,
    "cumulativeGasUsed": "3616995",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "98ed655dfe93b2144762bf03a912e3f6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"addressManager\",\"outputs\":[{\"internalType\":\"contract IAddressManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedCuratorVaults\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondingCurveParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAddressManager\",\"name\":\"_addressManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reactionPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleCuratorLiabilityBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleReferrerBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovedCuratorVaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"setBondingCurveParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_paymentToken\",\"type\":\"address\"}],\"name\":\"setPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reactionPrice\",\"type\":\"uint256\"}],\"name\":\"setReactionPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleCuratorLiabilityBasisPoints\",\"type\":\"uint256\"}],\"name\":\"setSaleCuratorLiabilityBasisPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleReferrerBasisPoints\",\"type\":\"uint256\"}],\"name\":\"setSaleReferrerBasisPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_spendReferrerBasisPoints\",\"type\":\"uint256\"}],\"name\":\"setSpendReferrerBasisPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_spendTakerBasisPoints\",\"type\":\"uint256\"}],\"name\":\"setSpendTakerBasisPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spendReferrerBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spendTakerBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"initialize(address)\":{\"details\":\"initializer to call after deployment, can only be called once\"},\"setApprovedCuratorVaults(address,bool)\":{\"details\":\"Setter for the list of curator vaults allowed to be used\"},\"setPaymentToken(address)\":{\"details\":\"Setter for the payment token\"},\"setReactionPrice(uint256)\":{\"details\":\"Setter for the reaction price\"},\"setSaleCuratorLiabilityBasisPoints(uint256)\":{\"details\":\"Setter for the reaction price\"},\"setSaleReferrerBasisPoints(uint256)\":{\"details\":\"Setter for the reaction price\"},\"setSpendReferrerBasisPoints(uint256)\":{\"details\":\"Setter for the spend referrer basis points\"},\"setSpendTakerBasisPoints(uint256)\":{\"details\":\"Setter for the spend taker basis points\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Parameters/ParameterManager.sol\":\"ParameterManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"contracts/Config/IAddressManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"../Permissions/IRoleManager.sol\\\";\\nimport \\\"../Parameters/IParameterManager.sol\\\";\\nimport \\\"../Maker/IMakerRegistrar.sol\\\";\\nimport \\\"../Token/IStandard1155.sol\\\";\\nimport \\\"../Reactions/IReactionVault.sol\\\";\\nimport \\\"../CuratorVault/ICuratorVault.sol\\\";\\n\\ninterface IAddressManager {\\n    /// @dev Getter for the role manager address\\n    function roleManager() external returns (IRoleManager);\\n\\n    /// @dev Setter for the role manager address\\n    function setRoleManager(IRoleManager _roleManager) external;\\n\\n    /// @dev Getter for the role manager address\\n    function parameterManager() external returns (IParameterManager);\\n\\n    /// @dev Setter for the role manager address\\n    function setParameterManager(IParameterManager _parameterManager) external;\\n\\n    /// @dev Getter for the maker registrar address\\n    function makerRegistrar() external returns (IMakerRegistrar);\\n\\n    /// @dev Setter for the maker registrar address\\n    function setMakerRegistrar(IMakerRegistrar _makerRegistrar) external;\\n\\n    /// @dev Getter for the reaction NFT contract address\\n    function reactionNftContract() external returns (IStandard1155);\\n\\n    /// @dev Setter for the reaction NFT contract address\\n    function setReactionNftContract(IStandard1155 _reactionNftContract)\\n        external;\\n\\n    /// @dev Getter for the default Curator Vault contract address\\n    function defaultCuratorVault() external returns (ICuratorVault);\\n\\n    /// @dev Setter for the default Curator Vault contract address\\n    function setDefaultCuratorVault(ICuratorVault _defaultCuratorVault)\\n        external;\\n\\n    /// @dev Getter for the L2 bridge registrar\\n    function childRegistrar() external returns (address);\\n\\n    /// @dev Setter for the L2 bridge registrar\\n    function setChildRegistrar(address _childRegistrar) external;\\n}\\n\",\"keccak256\":\"0x6c5055daef120fe80f622663efc9488e0bc8c739fbdb7381c6212454c56dafb6\",\"license\":\"MIT\"},\"contracts/CuratorVault/ICuratorVault.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"../Token/IStandard1155.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n/// @dev Interface for the curator vault\\ninterface ICuratorVault {\\n    function getTokenId(\\n        uint256 nftChainId,\\n        address nftAddress,\\n        uint256 nftId,\\n        IERC20Upgradeable paymentToken\\n    ) external returns (uint256);\\n\\n    function buyCuratorShares(\\n        uint256 nftChainId,\\n        address nftAddress,\\n        uint256 nftId,\\n        IERC20Upgradeable paymentToken,\\n        uint256 paymentAmount,\\n        address mintToAddress,\\n        bool isTakerPosition\\n    ) external returns (uint256);\\n\\n    function sellCuratorShares(\\n        uint256 nftChainId,\\n        address nftAddress,\\n        uint256 nftId,\\n        IERC20Upgradeable paymentToken,\\n        uint256 sharesToBurn,\\n        address refundToAddress\\n    ) external returns (uint256);\\n\\n    function curatorShares() external returns (IStandard1155);\\n}\\n\",\"keccak256\":\"0xc1e29f5f0d321ba365bde8d06c782436d49b539795420c1434f55e109ba94520\",\"license\":\"MIT\"},\"contracts/Maker/IMakerRegistrar.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/// @dev Interface for the maker registrar that supports registering and de-registering NFTs\\ninterface IMakerRegistrar {\\n    /// @dev struct for storing details about a registered NFT\\n    struct NftDetails {\\n        bool registered;\\n        address owner;\\n        address creator;\\n        uint256 creatorSaleBasisPoints;\\n    }\\n\\n    function transformToSourceLookup(uint256 metaId) external returns (uint256);\\n\\n    function deriveSourceId(\\n        uint256 nftChainId,\\n        address nftAddress,\\n        uint256 nftId\\n    ) external returns (uint256);\\n\\n    /// @dev lookup for NftDetails from source ID\\n    function sourceToDetailsLookup(uint256)\\n        external\\n        returns (\\n            bool,\\n            address,\\n            address,\\n            uint256\\n        );\\n\\n    function verifyOwnership(\\n        address nftContractAddress,\\n        uint256 nftId,\\n        address potentialOwner\\n    ) external returns (bool);\\n\\n    function registerNftFromBridge(\\n        address owner,\\n        uint256 chainId,\\n        address nftContractAddress,\\n        uint256 nftId,\\n        address creatorAddress,\\n        uint256 creatorSaleBasisPoints,\\n        uint256 optionBits\\n    ) external;\\n\\n    function deRegisterNftFromBridge(\\n        address owner,\\n        uint256 chainId,\\n        address nftContractAddress,\\n        uint256 nftId\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf92def1411e1f220f69ad6af9c7fbba78b13583b0822a991fc1dd6a526a227cb\",\"license\":\"MIT\"},\"contracts/Parameters/IParameterManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"../Permissions/IRoleManager.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IParameterManager {\\n    struct SigmoidCurveParameters {\\n        uint256 a;\\n        uint256 b;\\n        uint256 c;\\n    }\\n\\n    /// @dev Getter for the payment token\\n    function paymentToken() external returns (IERC20Upgradeable);\\n\\n    /// @dev Setter for the payment token\\n    function setPaymentToken(IERC20Upgradeable _paymentToken) external;\\n\\n    /// @dev Getter for the reaction price\\n    function reactionPrice() external returns (uint256);\\n\\n    /// @dev Setter for the reaction price\\n    function setReactionPrice(uint256 _reactionPrice) external;\\n\\n    /// @dev Getter for the cut of purchase price going to the curator liability\\n    function saleCuratorLiabilityBasisPoints() external returns (uint256);\\n\\n    /// @dev Setter for the cut of purchase price going to the curator liability\\n    function setSaleCuratorLiabilityBasisPoints(\\n        uint256 _saleCuratorLiabilityBasisPoints\\n    ) external;\\n\\n    /// @dev Getter for the cut of purchase price going to the referrer\\n    function saleReferrerBasisPoints() external returns (uint256);\\n\\n    /// @dev Setter for the cut of purchase price going to the referrer\\n    function setSaleReferrerBasisPoints(uint256 _saleReferrerBasisPoints)\\n        external;\\n\\n    /// @dev Getter for the cut of spend curator liability going to the taker\\n    function spendTakerBasisPoints() external returns (uint256);\\n\\n    /// @dev Setter for the cut of spend curator liability going to the taker\\n    function setSpendTakerBasisPoints(uint256 _spendTakerBasisPoints) external;\\n\\n    /// @dev Getter for the cut of spend curator liability going to the taker\\n    function spendReferrerBasisPoints() external returns (uint256);\\n\\n    /// @dev Setter for the cut of spend curator liability going to the referrer\\n    function setSpendReferrerBasisPoints(uint256 _spendReferrerBasisPoints)\\n        external;\\n\\n    /// @dev Getter for the check to see if a curator vault is allowed to be used\\n    function approvedCuratorVaults(address potentialVault)\\n        external\\n        returns (bool);\\n\\n    /// @dev Setter for the list of curator vaults allowed to be used\\n    function setApprovedCuratorVaults(address vault, bool approved) external;\\n\\n    // @dev Getter for curator vault bonding curve params\\n    function bondingCurveParams() external returns(uint256, uint256, uint256);\\n\\n    // @dev Setter for curator vault bonding curve params\\n    function setBondingCurveParams(uint256 a, uint256 b, uint256 c) external;\\n}\\n\",\"keccak256\":\"0xe996ce3e425253d7203b7d86189b378b7a097db54b2bff8f30d11960b11374da\",\"license\":\"MIT\"},\"contracts/Parameters/ParameterManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./ParameterManagerStorage.sol\\\";\\nimport \\\"../Config/IAddressManager.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract ParameterManager is Initializable, ParameterManagerStorageV1 {\\n    /// @dev Verifies with the role manager that the calling address has ADMIN role\\n    modifier onlyAdmin() {\\n        require(\\n            addressManager.roleManager().isParameterManagerAdmin(msg.sender),\\n            \\\"Not Admin\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev initializer to call after deployment, can only be called once\\n    function initialize(IAddressManager _addressManager) public initializer {\\n        addressManager = _addressManager;\\n    }\\n\\n    /// @dev Setter for the payment token\\n    function setPaymentToken(IERC20Upgradeable _paymentToken)\\n        external\\n        onlyAdmin\\n    {\\n        require(address(_paymentToken) != address(0x0), ZERO_INPUT);\\n        paymentToken = _paymentToken;\\n    }\\n\\n    /// @dev Setter for the reaction price\\n    function setReactionPrice(uint256 _reactionPrice) external onlyAdmin {\\n        require(_reactionPrice != 0, ZERO_INPUT);\\n        reactionPrice = _reactionPrice;\\n    }\\n\\n    /// @dev Setter for the reaction price\\n    function setSaleCuratorLiabilityBasisPoints(\\n        uint256 _saleCuratorLiabilityBasisPoints\\n    ) external onlyAdmin {\\n        require(_saleCuratorLiabilityBasisPoints != 0, ZERO_INPUT);\\n        saleCuratorLiabilityBasisPoints = _saleCuratorLiabilityBasisPoints;\\n    }\\n\\n    /// @dev Setter for the reaction price\\n    function setSaleReferrerBasisPoints(uint256 _saleReferrerBasisPoints)\\n        external\\n        onlyAdmin\\n    {\\n        require(_saleReferrerBasisPoints != 0, ZERO_INPUT);\\n        saleReferrerBasisPoints = _saleReferrerBasisPoints;\\n    }\\n\\n    /// @dev Setter for the spend taker basis points\\n    function setSpendTakerBasisPoints(uint256 _spendTakerBasisPoints)\\n        external\\n        onlyAdmin\\n    {\\n        require(_spendTakerBasisPoints != 0, ZERO_INPUT);\\n        spendTakerBasisPoints = _spendTakerBasisPoints;\\n    }\\n\\n    /// @dev Setter for the spend referrer basis points\\n    function setSpendReferrerBasisPoints(uint256 _spendReferrerBasisPoints)\\n        external\\n        onlyAdmin\\n    {\\n        require(_spendReferrerBasisPoints != 0, ZERO_INPUT);\\n        spendReferrerBasisPoints = _spendReferrerBasisPoints;\\n    }\\n\\n    /// @dev Setter for the list of curator vaults allowed to be used\\n    function setApprovedCuratorVaults(address vault, bool approved)\\n        external\\n        onlyAdmin\\n    {\\n        require(vault != address(0x0), ZERO_INPUT);\\n        approvedCuratorVaults[vault] = approved;\\n    }\\n\\n    // @dev Setter for curator vault bonding curve params\\n    function setBondingCurveParams(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) external onlyAdmin {\\n        require(a > 0 && b > 0 && c > 0, ZERO_INPUT);\\n        bondingCurveParams = SigmoidCurveParameters(a, b, c);\\n    }\\n}\\n\",\"keccak256\":\"0x919d66531205326947e29d346b37b55e54eddd5e8322d330ba6938230533f7ec\",\"license\":\"MIT\"},\"contracts/Parameters/ParameterManagerStorage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"../Config/IAddressManager.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"./IParameterManager.sol\\\";\\n\\n/// @title ParameterManagerStorage\\n/// @dev This contract will hold all local variables for the ParameterManager Contract\\n/// When upgrading the protocol, inherit from this contract on the V2 version and change the\\n/// ParameterManager to inherit from the later version.  This ensures there are no storage layout\\n/// corruptions when upgrading.\\nabstract contract ParameterManagerStorageV1 is IParameterManager {\\n    /// @dev Input error for 0 value param\\n    string internal constant ZERO_INPUT = \\\"Invalid 0 input\\\";\\n\\n    /// @dev local reference to the address manager contract\\n    IAddressManager public addressManager;\\n\\n    /// @dev The payment token used to buy reactions\\n    IERC20Upgradeable public paymentToken;\\n\\n    /// @dev The amount each reaction costs in paymentToken\\n    uint256 public reactionPrice;\\n\\n    /// @dev Basis points for the curator liability during a reaction sale\\n    /// Basis points are percentage divided by 100 (e.g. 100 Basis Points is 1%)\\n    uint256 public saleCuratorLiabilityBasisPoints;\\n\\n    /// @dev Basis points for the referrer during a reaction sale\\n    /// Basis points are percentage divided by 100 (e.g. 100 Basis Points is 1%)\\n    uint256 public saleReferrerBasisPoints;\\n\\n    /// @dev Basis points for the taker NFT owner.\\n    /// This is the percentage of the Curator Liability being assigned to the taker\\n    /// Basis points are percentage divided by 100 (e.g. 100 Basis Points is 1%)\\n    uint256 public spendTakerBasisPoints;\\n\\n    /// @dev Basis points for the spend referrer.\\n    /// This is the percentage of the Curator Liability being assigned to the referrer\\n    /// Basis points are percentage divided by 100 (e.g. 100 Basis Points is 1%)\\n    uint256 public spendReferrerBasisPoints;\\n\\n    /// @dev Mapping of the approved curator vaults (other than the default)\\n    /// If set to true then it is allowed to be used.\\n    mapping(address => bool) public approvedCuratorVaults;\\n\\n    /// @dev The parameters that define the bonding curve for the curator vault\\n    SigmoidCurveParameters public bondingCurveParams;\\n}\\n\\n/// On the next version of the protocol, if new variables are added, put them in the below\\n/// contract and use this as the inheritance chain.\\n/**\\ncontract ParameterManagerStorageV2 is ParameterManagerStorageV1 {\\n  address newVariable;\\n}\\n */\\n\",\"keccak256\":\"0xeb0f9d353ee1a11c63484ce96f8fa157e978155ecb1f137a0526a097840e506c\",\"license\":\"MIT\"},\"contracts/Permissions/IRoleManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IRoleManager {\\n    /// @dev Determines if the specified address has capability to mint and burn reaction NFTs\\n    /// @param potentialAddress Address to check\\n    function isAdmin(address potentialAddress) external view returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to udpate addresses in the protocol\\n    /// @param potentialAddress Address to check\\n    function isAddressManagerAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to update parameters in the protocol\\n    /// @param potentialAddress Address to check\\n    function isParameterManagerAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to to mint and burn reaction NFTs\\n    /// @param potentialAddress Address to check\\n    function isReactionNftAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to purchase curator vaults shares\\n    /// @param potentialAddress Address to check\\n    function isCuratorVaultPurchaser(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to mint and burn curator shares\\n    /// @param potentialAddress Address to check\\n    function isCuratorSharesAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x4ca6fe7b1920c930018ad1982f2d2b5a6046b4d1f84ee89771ee6c4f15185bae\",\"license\":\"MIT\"},\"contracts/Reactions/IReactionVault.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @dev Interface for the ReactionVault that supports buying and spending reactions\\ninterface IReactionVault {\\n    struct ReactionPriceDetails {\\n        IERC20Upgradeable paymentToken;\\n        uint256 reactionPrice;\\n        uint256 saleCuratorLiabilityBasisPoints;\\n    }\\n}\\n\",\"keccak256\":\"0x605828b6a6b2c289e937a84ff8cb134165cda8056a3e87c6b1c81557690611ca\",\"license\":\"MIT\"},\"contracts/Token/IStandard1155.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/// @dev Interface for the Standard1155 toke contract.\\ninterface IStandard1155 {\\n    /// @dev Allows a priviledged account to mint tokens to the specified address\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    function burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce417ba2e1c853d9a09361b82c0bcf27e30de8b5c960de128d410e9c783408a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101155760003560e01c806373cf2a67116100a2578063dafe4f9a11610071578063dafe4f9a146102a8578063e15a8ce8146102c4578063f467320e146102e0578063f93c0d79146102fe578063fbc8cc581461031c57610115565b806373cf2a671461021e578063c03ac3ea1461024e578063c4d66de81461026e578063cc22c3e21461028a57610115565b80635b3c42ff116100e95780635b3c42ff146101905780635ddb0cf2146101ac578063655f28c1146101ca578063690dafaf146101e65780636a326ab11461020257610115565b8062ac1c5a1461011a57806305ce6b49146101385780633013ce29146101545780633ab76e9f14610172575b600080fd5b610122610338565b60405161012f91906115f8565b60405180910390f35b610152600480360381019061014d9190611644565b61033e565b005b61015c61057d565b6040516101699190611716565b60405180910390f35b61017a6105a3565b6040516101879190611752565b60405180910390f35b6101aa60048036038101906101a5919061176d565b6105c9565b005b6101b46107b8565b6040516101c191906115f8565b60405180910390f35b6101e460048036038101906101df919061176d565b6107be565b005b61020060048036038101906101fb9190611810565b6109ad565b005b61021c6004803603810190610217919061188e565b610c19565b005b610238600480360381019061023391906118bb565b610e6e565b60405161024591906118f7565b60405180910390f35b610256610e8e565b60405161026593929190611912565b60405180910390f35b61028860048036038101906102839190611987565b610ea6565b005b610292610fcc565b60405161029f91906115f8565b60405180910390f35b6102c260048036038101906102bd919061176d565b610fd2565b005b6102de60048036038101906102d9919061176d565b6111c1565b005b6102e86113b0565b6040516102f591906115f8565b60405180910390f35b6103066113b6565b60405161031391906115f8565b60405180910390f35b6103366004803603810190610331919061176d565b6113bc565b005b60055481565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662435da56040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156103a757600080fd5b505af11580156103bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103df91906119f2565b73ffffffffffffffffffffffffffffffffffffffff16636d993046336040518263ffffffff1660e01b81526004016104179190611a2e565b60206040518083038186803b15801561042f57600080fd5b505afa158015610443573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104679190611a5e565b6104a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049d90611ae8565b60405180910390fd5b6000831180156104b65750600082115b80156104c25750600081115b6040518060400160405280600f81526020017f496e76616c6964203020696e707574000000000000000000000000000000000081525090610539576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105309190611b90565b60405180910390fd5b506040518060600160405280848152602001838152602001828152506008600082015181600001556020820151816001015560408201518160020155905050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662435da56040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561063257600080fd5b505af1158015610646573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066a91906119f2565b73ffffffffffffffffffffffffffffffffffffffff16636d993046336040518263ffffffff1660e01b81526004016106a29190611a2e565b60206040518083038186803b1580156106ba57600080fd5b505afa1580156106ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f29190611a5e565b610731576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072890611ae8565b60405180910390fd5b60008114156040518060400160405280600f81526020017f496e76616c6964203020696e7075740000000000000000000000000000000000815250906107ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a49190611b90565b60405180910390fd5b508060058190555050565b60025481565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662435da56040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561082757600080fd5b505af115801561083b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085f91906119f2565b73ffffffffffffffffffffffffffffffffffffffff16636d993046336040518263ffffffff1660e01b81526004016108979190611a2e565b60206040518083038186803b1580156108af57600080fd5b505afa1580156108c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e79190611a5e565b610926576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091d90611ae8565b60405180910390fd5b60008114156040518060400160405280600f81526020017f496e76616c6964203020696e7075740000000000000000000000000000000000815250906109a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109999190611b90565b60405180910390fd5b508060028190555050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662435da56040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610a1657600080fd5b505af1158015610a2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4e91906119f2565b73ffffffffffffffffffffffffffffffffffffffff16636d993046336040518263ffffffff1660e01b8152600401610a869190611a2e565b60206040518083038186803b158015610a9e57600080fd5b505afa158015610ab2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad69190611a5e565b610b15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0c90611ae8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600f81526020017f496e76616c6964203020696e707574000000000000000000000000000000000081525090610bbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb49190611b90565b60405180910390fd5b5080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662435da56040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610c8257600080fd5b505af1158015610c96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cba91906119f2565b73ffffffffffffffffffffffffffffffffffffffff16636d993046336040518263ffffffff1660e01b8152600401610cf29190611a2e565b60206040518083038186803b158015610d0a57600080fd5b505afa158015610d1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d429190611a5e565b610d81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7890611ae8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600f81526020017f496e76616c6964203020696e707574000000000000000000000000000000000081525090610e29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e209190611b90565b60405180910390fd5b5080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60076020528060005260406000206000915054906101000a900460ff1681565b60088060000154908060010154908060020154905083565b600060019054906101000a900460ff16610ece5760008054906101000a900460ff1615610ed7565b610ed66115ab565b5b610f16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0d90611c24565b60405180910390fd5b60008060019054906101000a900460ff161590508015610f66576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b81600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015610fc85760008060016101000a81548160ff0219169083151502179055505b5050565b60065481565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662435da56040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561103b57600080fd5b505af115801561104f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107391906119f2565b73ffffffffffffffffffffffffffffffffffffffff16636d993046336040518263ffffffff1660e01b81526004016110ab9190611a2e565b60206040518083038186803b1580156110c357600080fd5b505afa1580156110d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fb9190611a5e565b61113a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113190611ae8565b60405180910390fd5b60008114156040518060400160405280600f81526020017f496e76616c6964203020696e7075740000000000000000000000000000000000815250906111b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ad9190611b90565b60405180910390fd5b508060048190555050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662435da56040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561122a57600080fd5b505af115801561123e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126291906119f2565b73ffffffffffffffffffffffffffffffffffffffff16636d993046336040518263ffffffff1660e01b815260040161129a9190611a2e565b60206040518083038186803b1580156112b257600080fd5b505afa1580156112c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ea9190611a5e565b611329576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132090611ae8565b60405180910390fd5b60008114156040518060400160405280600f81526020017f496e76616c6964203020696e7075740000000000000000000000000000000000815250906113a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139c9190611b90565b60405180910390fd5b508060038190555050565b60045481565b60035481565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662435da56040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561142557600080fd5b505af1158015611439573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145d91906119f2565b73ffffffffffffffffffffffffffffffffffffffff16636d993046336040518263ffffffff1660e01b81526004016114959190611a2e565b60206040518083038186803b1580156114ad57600080fd5b505afa1580156114c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e59190611a5e565b611524576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151b90611ae8565b60405180910390fd5b60008114156040518060400160405280600f81526020017f496e76616c6964203020696e7075740000000000000000000000000000000000815250906115a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115979190611b90565b60405180910390fd5b508060068190555050565b60006115b6306115bc565b15905090565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000819050919050565b6115f2816115df565b82525050565b600060208201905061160d60008301846115e9565b92915050565b600080fd5b611621816115df565b811461162c57600080fd5b50565b60008135905061163e81611618565b92915050565b60008060006060848603121561165d5761165c611613565b5b600061166b8682870161162f565b935050602061167c8682870161162f565b925050604061168d8682870161162f565b9150509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006116dc6116d76116d284611697565b6116b7565b611697565b9050919050565b60006116ee826116c1565b9050919050565b6000611700826116e3565b9050919050565b611710816116f5565b82525050565b600060208201905061172b6000830184611707565b92915050565b600061173c826116e3565b9050919050565b61174c81611731565b82525050565b60006020820190506117676000830184611743565b92915050565b60006020828403121561178357611782611613565b5b60006117918482850161162f565b91505092915050565b60006117a582611697565b9050919050565b6117b58161179a565b81146117c057600080fd5b50565b6000813590506117d2816117ac565b92915050565b60008115159050919050565b6117ed816117d8565b81146117f857600080fd5b50565b60008135905061180a816117e4565b92915050565b6000806040838503121561182757611826611613565b5b6000611835858286016117c3565b9250506020611846858286016117fb565b9150509250929050565b600061185b8261179a565b9050919050565b61186b81611850565b811461187657600080fd5b50565b60008135905061188881611862565b92915050565b6000602082840312156118a4576118a3611613565b5b60006118b284828501611879565b91505092915050565b6000602082840312156118d1576118d0611613565b5b60006118df848285016117c3565b91505092915050565b6118f1816117d8565b82525050565b600060208201905061190c60008301846118e8565b92915050565b600060608201905061192760008301866115e9565b61193460208301856115e9565b61194160408301846115e9565b949350505050565b60006119548261179a565b9050919050565b61196481611949565b811461196f57600080fd5b50565b6000813590506119818161195b565b92915050565b60006020828403121561199d5761199c611613565b5b60006119ab84828501611972565b91505092915050565b60006119bf8261179a565b9050919050565b6119cf816119b4565b81146119da57600080fd5b50565b6000815190506119ec816119c6565b92915050565b600060208284031215611a0857611a07611613565b5b6000611a16848285016119dd565b91505092915050565b611a288161179a565b82525050565b6000602082019050611a436000830184611a1f565b92915050565b600081519050611a58816117e4565b92915050565b600060208284031215611a7457611a73611613565b5b6000611a8284828501611a49565b91505092915050565b600082825260208201905092915050565b7f4e6f742041646d696e0000000000000000000000000000000000000000000000600082015250565b6000611ad2600983611a8b565b9150611add82611a9c565b602082019050919050565b60006020820190508181036000830152611b0181611ac5565b9050919050565b600081519050919050565b60005b83811015611b31578082015181840152602081019050611b16565b83811115611b40576000848401525b50505050565b6000601f19601f8301169050919050565b6000611b6282611b08565b611b6c8185611a8b565b9350611b7c818560208601611b13565b611b8581611b46565b840191505092915050565b60006020820190508181036000830152611baa8184611b57565b905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000611c0e602e83611a8b565b9150611c1982611bb2565b604082019050919050565b60006020820190508181036000830152611c3d81611c01565b905091905056fea2646970667358221220643bcd4795605d6a7ed18282a9111c30e7cd4f12d77c586c18a4773b5dc32d9564736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "initialize(address)": {
        "details": "initializer to call after deployment, can only be called once"
      },
      "setApprovedCuratorVaults(address,bool)": {
        "details": "Setter for the list of curator vaults allowed to be used"
      },
      "setPaymentToken(address)": {
        "details": "Setter for the payment token"
      },
      "setReactionPrice(uint256)": {
        "details": "Setter for the reaction price"
      },
      "setSaleCuratorLiabilityBasisPoints(uint256)": {
        "details": "Setter for the reaction price"
      },
      "setSaleReferrerBasisPoints(uint256)": {
        "details": "Setter for the reaction price"
      },
      "setSpendReferrerBasisPoints(uint256)": {
        "details": "Setter for the spend referrer basis points"
      },
      "setSpendTakerBasisPoints(uint256)": {
        "details": "Setter for the spend taker basis points"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2797,
        "contract": "contracts/Parameters/ParameterManager.sol:ParameterManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2800,
        "contract": "contracts/Parameters/ParameterManager.sol:ParameterManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8640,
        "contract": "contracts/Parameters/ParameterManager.sol:ParameterManager",
        "label": "addressManager",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IAddressManager)7543"
      },
      {
        "astId": 8644,
        "contract": "contracts/Parameters/ParameterManager.sol:ParameterManager",
        "label": "paymentToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20Upgradeable)5035"
      },
      {
        "astId": 8647,
        "contract": "contracts/Parameters/ParameterManager.sol:ParameterManager",
        "label": "reactionPrice",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 8650,
        "contract": "contracts/Parameters/ParameterManager.sol:ParameterManager",
        "label": "saleCuratorLiabilityBasisPoints",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 8653,
        "contract": "contracts/Parameters/ParameterManager.sol:ParameterManager",
        "label": "saleReferrerBasisPoints",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 8656,
        "contract": "contracts/Parameters/ParameterManager.sol:ParameterManager",
        "label": "spendTakerBasisPoints",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 8659,
        "contract": "contracts/Parameters/ParameterManager.sol:ParameterManager",
        "label": "spendReferrerBasisPoints",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 8664,
        "contract": "contracts/Parameters/ParameterManager.sol:ParameterManager",
        "label": "approvedCuratorVaults",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8668,
        "contract": "contracts/Parameters/ParameterManager.sol:ParameterManager",
        "label": "bondingCurveParams",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(SigmoidCurveParameters)8286_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAddressManager)7543": {
        "encoding": "inplace",
        "label": "contract IAddressManager",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)5035": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(SigmoidCurveParameters)8286_storage": {
        "encoding": "inplace",
        "label": "struct IParameterManager.SigmoidCurveParameters",
        "members": [
          {
            "astId": 8281,
            "contract": "contracts/Parameters/ParameterManager.sol:ParameterManager",
            "label": "a",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8283,
            "contract": "contracts/Parameters/ParameterManager.sol:ParameterManager",
            "label": "b",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8285,
            "contract": "contracts/Parameters/ParameterManager.sol:ParameterManager",
            "label": "c",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
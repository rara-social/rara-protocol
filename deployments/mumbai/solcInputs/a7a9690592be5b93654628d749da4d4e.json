{
  "language": "Solidity",
  "sources": {
    "contracts/Bridge/ChildRegistrar.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@maticnetwork/fx-portal/contracts/tunnel/FxBaseChildTunnel.sol\";\nimport \"../Config/IAddressManager.sol\";\n\n/// @dev This contract lives on the L2 and receives messages from the L1 to register and unregister\n/// NFTs on the L1 chain.\n/// This is not an upgradeable contract and should not be used with a proxy.\ncontract ChildRegistrar is FxBaseChildTunnel {\n    bytes32 public constant REGISTER = keccak256(\"REGISTER\");\n    bytes32 public constant DE_REGISTER = keccak256(\"DE_REGISTER\");\n\n    /// @dev local reference to the address manager contract\n    IAddressManager public addressManager;\n\n    /// @param _fxChild - This is the contract deployed on the L2 that will be sending messages here.\n    /// This is a well known deployed contract that Matic has set up.\n    /// @param _addressManager - This is the address manager on the protocol\n    /// @dev After deployment you must call setFxRootTunnel() with the RootRegistrar Address on the L1.\n    constructor(address _fxChild, IAddressManager _addressManager)\n        FxBaseChildTunnel(_fxChild)\n    {\n        addressManager = _addressManager;\n    }\n\n    /// @dev The base contract ensures that the incoming message is from the contract _fxChild passed in the constructor.\n    /// The validateSender() makes sure that the contract on the root chain is the one relaying the message.\n    /// The root contract should have been set via setFxRootTunnel() after deployment\n    function _processMessageFromRoot(\n        uint256, /* stateId */\n        address sender,\n        bytes memory data\n    ) internal override validateSender(sender) {\n        // decode incoming data\n        (bytes32 syncType, bytes memory syncData) = abi.decode(\n            data,\n            (bytes32, bytes)\n        );\n\n        if (syncType == REGISTER) {\n            _registerNft(syncData);\n        } else if (syncType == DE_REGISTER) {\n            _deRegisterNft(syncData);\n        } else {\n            revert(\"ERR MSG\");\n        }\n    }\n\n    /// @dev Handler for messages coming from the L1 when an owner wants to register\n    function _registerNft(bytes memory syncData) internal {\n        // Decode the params from the data\n        (\n            address owner,\n            uint256 chainId,\n            address nftContractAddress,\n            uint256 nftId,\n            address creatorAddress,\n            uint256 creatorSaleBasisPoints,\n            uint256 optionBits\n        ) = abi.decode(\n                syncData,\n                (address, uint256, address, uint256, address, uint256, uint256)\n            );\n\n        // Call the registrar and register the NFT\n        addressManager.makerRegistrar().registerNftFromBridge(\n            owner,\n            chainId,\n            nftContractAddress,\n            nftId,\n            creatorAddress,\n            creatorSaleBasisPoints,\n            optionBits\n        );\n    }\n\n    /// @dev Handler for messages coming from the L1 when an owner wants to de-register\n    function _deRegisterNft(bytes memory syncData) internal {\n        // Decode the params from the data\n        (\n            address owner,\n            uint256 chainId,\n            address nftContractAddress,\n            uint256 nftId\n        ) = abi.decode(syncData, (address, uint256, address, uint256));\n\n        addressManager.makerRegistrar().deRegisterNftFromBridge(\n            owner,\n            chainId,\n            nftContractAddress,\n            nftId\n        );\n    }\n}\n"
    },
    "@maticnetwork/fx-portal/contracts/tunnel/FxBaseChildTunnel.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// IFxMessageProcessor represents interface to process message\ninterface IFxMessageProcessor {\n    function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes calldata data) external;\n}\n\n/**\n* @notice Mock child tunnel contract to receive and send message from L2\n*/\nabstract contract FxBaseChildTunnel is IFxMessageProcessor{\n    // MessageTunnel on L1 will get data from this event\n    event MessageSent(bytes message);\n\n    // fx child\n    address public fxChild;\n\n    // fx root tunnel\n    address public fxRootTunnel;\n\n    constructor(address _fxChild) {\n        fxChild = _fxChild;\n    }\n\n    // Sender must be fxRootTunnel in case of ERC20 tunnel\n    modifier validateSender(address sender) {\n        require(sender == fxRootTunnel, \"FxBaseChildTunnel: INVALID_SENDER_FROM_ROOT\");\n        _;\n    }\n\n    // set fxRootTunnel if not set already\n    function setFxRootTunnel(address _fxRootTunnel) external {\n        require(fxRootTunnel == address(0x0), \"FxBaseChildTunnel: ROOT_TUNNEL_ALREADY_SET\");\n        fxRootTunnel = _fxRootTunnel;\n    }\n\n    function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes calldata data) external override {\n        require(msg.sender == fxChild, \"FxBaseChildTunnel: INVALID_SENDER\");\n        _processMessageFromRoot(stateId, rootMessageSender, data);\n    }\n\n    /**\n     * @notice Emit message that can be received on Root Tunnel\n     * @dev Call the internal function when need to emit message\n     * @param message bytes message that will be sent to Root Tunnel\n     * some message examples -\n     *   abi.encode(tokenId);\n     *   abi.encode(tokenId, tokenMetadata);\n     *   abi.encode(messageType, messageData);\n     */\n    function _sendMessageToRoot(bytes memory message) internal {\n        emit MessageSent(message);\n    }\n\n    /**\n     * @notice Process message received from Root Tunnel\n     * @dev function needs to be implemented to handle message as per requirement\n     * This is called by onStateReceive function.\n     * Since it is called via a system call, any event will not be emitted during its execution.\n     * @param stateId unique state id\n     * @param sender root message sender\n     * @param message bytes message that was sent from Root Tunnel\n     */\n    function _processMessageFromRoot(uint256 stateId, address sender, bytes memory message) virtual internal;\n}\n"
    },
    "contracts/Config/IAddressManager.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../Permissions/IRoleManager.sol\";\nimport \"../Parameters/IParameterManager.sol\";\nimport \"../Maker/IMakerRegistrar.sol\";\nimport \"../Token/IStandard1155.sol\";\nimport \"../Reactions/IReactionVault.sol\";\nimport \"../CuratorVault/ICuratorVault.sol\";\n\ninterface IAddressManager {\n    /// @dev Getter for the role manager address\n    function roleManager() external returns (IRoleManager);\n\n    /// @dev Setter for the role manager address\n    function setRoleManager(IRoleManager _roleManager) external;\n\n    /// @dev Getter for the role manager address\n    function parameterManager() external returns (IParameterManager);\n\n    /// @dev Setter for the role manager address\n    function setParameterManager(IParameterManager _parameterManager) external;\n\n    /// @dev Getter for the maker registrar address\n    function makerRegistrar() external returns (IMakerRegistrar);\n\n    /// @dev Setter for the maker registrar address\n    function setMakerRegistrar(IMakerRegistrar _makerRegistrar) external;\n\n    /// @dev Getter for the reaction NFT contract address\n    function reactionNftContract() external returns (IStandard1155);\n\n    /// @dev Setter for the reaction NFT contract address\n    function setReactionNftContract(IStandard1155 _reactionNftContract)\n        external;\n\n    /// @dev Getter for the default Curator Vault contract address\n    function defaultCuratorVault() external returns (ICuratorVault);\n\n    /// @dev Setter for the default Curator Vault contract address\n    function setDefaultCuratorVault(ICuratorVault _defaultCuratorVault)\n        external;\n\n    /// @dev Getter for the L2 bridge registrar\n    function childRegistrar() external returns (address);\n\n    /// @dev Setter for the L2 bridge registrar\n    function setChildRegistrar(address _childRegistrar) external;\n}\n"
    },
    "contracts/Permissions/IRoleManager.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IRoleManager {\n    /// @dev Determines if the specified address has capability to mint and burn reaction NFTs\n    /// @param potentialAddress Address to check\n    function isAdmin(address potentialAddress) external view returns (bool);\n\n    /// @dev Determines if the specified address has permission to udpate addresses in the protocol\n    /// @param potentialAddress Address to check\n    function isAddressManagerAdmin(address potentialAddress)\n        external\n        view\n        returns (bool);\n\n    /// @dev Determines if the specified address has permission to update parameters in the protocol\n    /// @param potentialAddress Address to check\n    function isParameterManagerAdmin(address potentialAddress)\n        external\n        view\n        returns (bool);\n\n    /// @dev Determines if the specified address has permission to to mint and burn reaction NFTs\n    /// @param potentialAddress Address to check\n    function isReactionNftAdmin(address potentialAddress)\n        external\n        view\n        returns (bool);\n\n    /// @dev Determines if the specified address has permission to purchase curator vault tokens\n    /// @param potentialAddress Address to check\n    function isCuratorVaultPurchaser(address potentialAddress)\n        external\n        view\n        returns (bool);\n\n    /// @dev Determines if the specified address has permission to mint and burn curator tokens\n    /// @param potentialAddress Address to check\n    function isCuratorTokenAdmin(address potentialAddress)\n        external\n        view\n        returns (bool);\n}\n"
    },
    "contracts/Parameters/IParameterManager.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../Permissions/IRoleManager.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\ninterface IParameterManager {\n    struct SigmoidCurveParameters {\n        uint256 a;\n        uint256 b;\n        uint256 c;\n    }\n\n    /// @dev Getter for the payment token\n    function paymentToken() external returns (IERC20Upgradeable);\n\n    /// @dev Setter for the payment token\n    function setPaymentToken(IERC20Upgradeable _paymentToken) external;\n\n    /// @dev Getter for the reaction price\n    function reactionPrice() external returns (uint256);\n\n    /// @dev Setter for the reaction price\n    function setReactionPrice(uint256 _reactionPrice) external;\n\n    /// @dev Getter for the cut of purchase price going to the curator liability\n    function saleCuratorLiabilityBasisPoints() external returns (uint256);\n\n    /// @dev Setter for the cut of purchase price going to the curator liability\n    function setSaleCuratorLiabilityBasisPoints(\n        uint256 _saleCuratorLiabilityBasisPoints\n    ) external;\n\n    /// @dev Getter for the cut of purchase price going to the referrer\n    function saleReferrerBasisPoints() external returns (uint256);\n\n    /// @dev Setter for the cut of purchase price going to the referrer\n    function setSaleReferrerBasisPoints(uint256 _saleReferrerBasisPoints)\n        external;\n\n    /// @dev Getter for the cut of spend curator liability going to the taker\n    function spendTakerBasisPoints() external returns (uint256);\n\n    /// @dev Setter for the cut of spend curator liability going to the taker\n    function setSpendTakerBasisPoints(uint256 _spendTakerBasisPoints) external;\n\n    /// @dev Getter for the cut of spend curator liability going to the taker\n    function spendReferrerBasisPoints() external returns (uint256);\n\n    /// @dev Setter for the cut of spend curator liability going to the referrer\n    function setSpendReferrerBasisPoints(uint256 _spendReferrerBasisPoints)\n        external;\n\n    /// @dev Getter for the check to see if a curator vault is allowed to be used\n    function approvedCuratorVaults(address potentialVault)\n        external\n        returns (bool);\n\n    /// @dev Setter for the list of curator vaults allowed to be used\n    function setApprovedCuratorVaults(address vault, bool approved) external;\n\n    // @dev Getter for curator vault bonding curve params\n    function bondingCurveParams() external returns(uint256, uint256, uint256);\n\n    // @dev Setter for curator vault bonding curve params\n    function setBondingCurveParams(uint256 a, uint256 b, uint256 c) external;\n}\n"
    },
    "contracts/Maker/IMakerRegistrar.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\n/// @dev Interface for the maker registrar that supports registering and de-registering NFTs\ninterface IMakerRegistrar {\n    /// @dev struct for storing details about a registered NFT\n    struct NftDetails {\n        bool registered;\n        address owner;\n        address creator;\n        uint256 creatorSaleBasisPoints;\n    }\n\n    function transformToSourceLookup(uint256 metaId) external returns (uint256);\n\n    function deriveSourceId(\n        uint256 nftChainId,\n        address nftAddress,\n        uint256 nftId\n    ) external returns (uint256);\n\n    /// @dev lookup for NftDetails from source ID\n    function sourceToDetailsLookup(uint256)\n        external\n        returns (\n            bool,\n            address,\n            address,\n            uint256\n        );\n\n    function verifyOwnership(\n        address nftContractAddress,\n        uint256 nftId,\n        address potentialOwner\n    ) external returns (bool);\n\n    function registerNftFromBridge(\n        address owner,\n        uint256 chainId,\n        address nftContractAddress,\n        uint256 nftId,\n        address creatorAddress,\n        uint256 creatorSaleBasisPoints,\n        uint256 optionBits\n    ) external;\n\n    function deRegisterNftFromBridge(\n        address owner,\n        uint256 chainId,\n        address nftContractAddress,\n        uint256 nftId\n    ) external;\n}\n"
    },
    "contracts/Token/IStandard1155.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\n/// @dev Interface for the Standard1155 toke contract.\ninterface IStandard1155 {\n    /// @dev Allows a priviledged account to mint tokens to the specified address\n    function mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) external;\n\n    function burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) external;\n}\n"
    },
    "contracts/Reactions/IReactionVault.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\n/// @dev Interface for the ReactionVault that supports buying and spending reactions\ninterface IReactionVault {\n    struct ReactionPriceDetails {\n        IERC20Upgradeable paymentToken;\n        uint256 reactionPrice;\n        uint256 saleCuratorLiabilityBasisPoints;\n    }\n}\n"
    },
    "contracts/CuratorVault/ICuratorVault.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../Token/IStandard1155.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\n/// @dev Interface for the curator vault\ninterface ICuratorVault {\n    function getTokenId(\n        uint256 nftChainId,\n        address nftAddress,\n        uint256 nftId,\n        IERC20Upgradeable paymentToken\n    ) external returns (uint256);\n\n    function buyCuratorTokens(\n        uint256 nftChainId,\n        address nftAddress,\n        uint256 nftId,\n        IERC20Upgradeable paymentToken,\n        uint256 paymentAmount,\n        address mintToAddress,\n        bool isTakerPosition\n    ) external returns (uint256);\n\n    function sellCuratorTokens(\n        uint256 nftChainId,\n        address nftAddress,\n        uint256 nftId,\n        IERC20Upgradeable paymentToken,\n        uint256 tokensToBurn,\n        address refundToAddress\n    ) external returns (uint256);\n\n    function curatorTokens() external returns (IStandard1155);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/SigmoidCuratorVault/SigmoidCuratorVaultStorage.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../Config/IAddressManager.sol\";\nimport \"../CuratorVault/ICuratorVault.sol\";\n\n/// @title SigmoidCuratorVaultStorage\n/// @dev This contract will hold all local variables for the SigmoidCuratorVault Contract\n/// When upgrading the protocol, inherit from this contract on the V2 version and change the\n/// CuratorVault to inherit from the later version.  This ensures there are no storage layout\n/// corruptions when upgrading.\nabstract contract SigmoidCuratorVaultStorageV1 is ICuratorVault {\n    /// @dev local reference to the address manager contract\n    IAddressManager public addressManager;\n\n    /// @dev tracks the total supply for each curator Token token ID\n    mapping(uint256 => uint256) public curatorTokenSupply;\n\n    /// @dev tracks the total payment amount held for each curator Token token ID\n    mapping(uint256 => uint256) public reserves;\n\n    /// @dev the 1155 contract to track curator Tokens\n    IStandard1155 public curatorTokens;\n}\n\n/// On the next version of the protocol, if new variables are added, put them in the below\n/// contract and use this as the inheritance chain.\n/**\ncontract SigmoidCuratorVaultStorageV2 is SigmoidCuratorVaultStorageV1 {\n  address newVariable;\n}\n */\n"
    },
    "contracts/SigmoidCuratorVault/SigmoidCuratorVault.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"../Token/IStandard1155.sol\";\nimport \"../Config/IAddressManager.sol\";\nimport \"./SigmoidCuratorVaultStorage.sol\";\nimport \"./Curve/Sigmoid.sol\";\n\n/// @title SigmoidCuratorVault\n/// @dev This contract tracks tokens in a sigmoid bonding curve per Taker NFT.\n/// When users spend reactions against a Taker NFT, it will use the Curator Liability\n/// to buy curator tokens against that Taker NFT and allocate to various parties.\n/// The curator tokens will be priced via the sigmoid curve.  The params that control\n/// the shape of the sigmoid are set in the parameter manager.\n/// At any point in time the owners of the curator tokens can sell them back to the\n/// bonding curve.\ncontract SigmoidCuratorVault is\n    ReentrancyGuardUpgradeable,\n    Sigmoid,\n    SigmoidCuratorVaultStorageV1\n{\n    /// @dev Use the safe methods when interacting with transfers with outside ERC20s\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    /// @dev verifies that the calling address is the reaction vault\n    modifier onlyCuratorVaultPurchaser() {\n        require(\n            addressManager.roleManager().isCuratorVaultPurchaser(msg.sender),\n            \"Not Admin\"\n        );\n        _;\n    }\n\n    /// @dev Event triggered when curator tokens are purchased\n    event CuratorTokensBought(\n        uint256 indexed curatorTokenId,\n        uint256 nftChainId,\n        address nftAddress,\n        uint256 nftId,\n        IERC20Upgradeable paymentToken,\n        uint256 paymentTokenPaid,\n        uint256 curatorTokensBought,\n        bool isTakerPosition\n    );\n\n    /// @dev Event triggered when curator tokens are sold\n    event CuratorTokensSold(\n        uint256 indexed curatorTokenId,\n        uint256 paymentTokenRefunded,\n        uint256 curatorTokensSold\n    );\n\n    /// @dev initializer to call after deployment, can only be called once\n    function initialize(address _addressManager, IStandard1155 _curatorTokens)\n        public\n        initializer\n    {\n        // Save the address manager\n        addressManager = IAddressManager(_addressManager);\n\n        // Save the curator token contract\n        curatorTokens = _curatorTokens;\n    }\n\n    /// @dev get a unique token ID for a given nft address and nft ID\n    function getTokenId(\n        uint256 nftChainId,\n        address nftAddress,\n        uint256 nftId,\n        IERC20Upgradeable paymentToken\n    ) external pure returns (uint256) {\n        return _getTokenId(nftChainId, nftAddress, nftId, paymentToken);\n    }\n\n    function _getTokenId(\n        uint256 nftChainId,\n        address nftAddress,\n        uint256 nftId,\n        IERC20Upgradeable paymentToken\n    ) internal pure returns (uint256) {\n        return\n            uint256(\n                keccak256(\n                    abi.encode(nftChainId, nftAddress, nftId, paymentToken)\n                )\n            );\n    }\n\n    /// @dev Buy curator Tokens when reactions are spent.\n    /// The reaction vault is the only account allowed to call this.\n    /// @return Returns the amount of curator tokens purchased.\n    function buyCuratorTokens(\n        uint256 nftChainId,\n        address nftAddress,\n        uint256 nftId,\n        IERC20Upgradeable paymentToken,\n        uint256 paymentAmount,\n        address mintToAddress,\n        bool isTakerPosition\n    ) external onlyCuratorVaultPurchaser returns (uint256) {\n        // Get the curator token token ID\n        uint256 curatorTokenId = _getTokenId(\n            nftChainId,\n            nftAddress,\n            nftId,\n            paymentToken\n        );\n\n        //\n        // Pull value from ReactionVault\n        //\n        paymentToken.safeTransferFrom(msg.sender, address(this), paymentAmount);\n\n        // Get curve params\n        (uint256 a, uint256 b, uint256 c) = addressManager\n            .parameterManager()\n            .bondingCurveParams();\n\n        // Calculate the amount of tokens that will be minted based on the price\n        uint256 curatorTokenAmount = calculateTokensBoughtFromPayment(\n            int256(a),\n            int256(b),\n            int256(c),\n            int256(curatorTokenSupply[curatorTokenId]),\n            int256(reserves[curatorTokenId]),\n            int256(paymentAmount)\n        );\n\n        // Update the amounts\n        reserves[curatorTokenId] += paymentAmount;\n        curatorTokenSupply[curatorTokenId] += curatorTokenAmount;\n\n        // Mint the tokens\n        curatorTokens.mint(\n            mintToAddress,\n            curatorTokenId,\n            curatorTokenAmount,\n            new bytes(0)\n        );\n\n        // Emit the event\n        emit CuratorTokensBought(\n            curatorTokenId,\n            nftChainId,\n            nftAddress,\n            nftId,\n            paymentToken,\n            paymentAmount,\n            curatorTokenAmount,\n            isTakerPosition\n        );\n\n        return curatorTokenAmount;\n    }\n\n    /// @dev Sell curator tokens back into the bonding curve.\n    /// Any holder who owns tokens can sell them back\n    /// @return Returns the amount of payment tokens received for the curator tokens.\n    function sellCuratorTokens(\n        uint256 nftChainId,\n        address nftAddress,\n        uint256 nftId,\n        IERC20Upgradeable paymentToken,\n        uint256 tokensToBurn,\n        address refundToAddress\n    ) external nonReentrant returns (uint256) {\n        require(tokensToBurn > 0, \"Invalid 0 input\");\n\n        // Get the curator token token ID\n        uint256 curatorTokenId = _getTokenId(\n            nftChainId,\n            nftAddress,\n            nftId,\n            paymentToken\n        );\n\n        // Burn the curator tokens\n        curatorTokens.burn(msg.sender, curatorTokenId, tokensToBurn);\n\n        // Get curve params\n        (uint256 a, uint256 b, uint256 c) = addressManager\n            .parameterManager()\n            .bondingCurveParams();\n\n        // Calculate the amount of tokens that will be minted based on the price\n        uint256 refundAmount = calculatePaymentReturnedFromTokens(\n            int256(a),\n            int256(b),\n            int256(c),\n            int256(curatorTokenSupply[curatorTokenId]),\n            int256(reserves[curatorTokenId]),\n            int256(tokensToBurn)\n        );\n\n        // Update the amounts\n        reserves[curatorTokenId] -= refundAmount;\n        curatorTokenSupply[curatorTokenId] -= tokensToBurn;\n\n        // Send payment token back\n        paymentToken.safeTransfer(refundToAddress, refundAmount);\n\n        // Emit the event\n        emit CuratorTokensSold(curatorTokenId, refundAmount, tokensToBurn);\n\n        return refundAmount;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/SigmoidCuratorVault/Curve/Sigmoid.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./ExtendedMath.sol\";\n\n/// @dev This is a sigmoid bonding curve implementation to calculate buying and selling amounts\n/// Formulas are inspired from https://medium.com/molecule-blog/designing-different-fundraising-scenarios-with-sigmoidal-token-bonding-curves-ceafc734ed97\ncontract Sigmoid {\n    using ExtendedMath for int256;\n\n    function n1(\n        int256 a,\n        int256 b,\n        int256 c,\n        int256 newReserves\n    ) internal pure returns (int256) {\n        return 2 * a.pow2() * b * newReserves * (b.pow2() + c).sqrt();\n    }\n\n    function n2(\n        int256 a,\n        int256 b,\n        int256,\n        int256 newReserves\n    ) internal pure returns (int256) {\n        return 2 * a.pow2() * b.pow2() * newReserves;\n    }\n\n    function n3(\n        int256 a,\n        int256,\n        int256 c,\n        int256 newReserves\n    ) internal pure returns (int256) {\n        return 2 * a.pow2() * c * newReserves;\n    }\n\n    function n4(\n        int256 a,\n        int256 b,\n        int256 c,\n        int256 newReserves\n    ) internal pure returns (int256) {\n        return a * newReserves.pow2() * (b.pow2() + c).sqrt();\n    }\n\n    function n5(\n        int256 a,\n        int256 b,\n        int256,\n        int256 newReserves\n    ) internal pure returns (int256) {\n        return 1 * a * b * newReserves.pow2();\n    }\n\n    function n6(\n        int256,\n        int256,\n        int256,\n        int256 newReserves\n    ) internal pure returns (int256) {\n        return newReserves.pow3();\n    }\n\n    function d1(\n        int256 a,\n        int256 b,\n        int256 c,\n        int256 newReserves\n    ) internal pure returns (int256) {\n        return\n            a *\n            (-2 *\n                a.pow2() *\n                c -\n                4 *\n                a *\n                b *\n                newReserves +\n                2 *\n                newReserves.pow2());\n    }\n\n    /// @dev Buying into the curve with payment tokens will return Tokens amount to be bought\n    /// @param a maxPrice of the curve / 2\n    /// @param b inflectionPoint of the curve\n    /// @param c slope steepness of the curve\n    /// @param currentTokensSupply current amount of Tokens in the curve\n    /// @param paymentReserves current mount of payment reserves in the curve\n    /// @param paymentToSpend amount the of payment tokens to buy Tokens with\n    function calculateTokensBoughtFromPayment(\n        int256 a,\n        int256 b,\n        int256 c,\n        int256 currentTokensSupply,\n        int256 paymentReserves,\n        int256 paymentToSpend\n    ) public pure returns (uint256) {\n        // The amount of reserves after payment is made\n        int256 newReserves = paymentReserves + paymentToSpend;\n\n        // Calculations cause \"stack too deep\" so are broken into individual numerator and denominator functions\n        int256 newSupply = (n6(a, b, c, newReserves) +\n            n4(a, b, c, newReserves) -\n            n1(a, b, c, newReserves) -\n            n2(a, b, c, newReserves) -\n            n3(a, b, c, newReserves) -\n            n5(a, b, c, newReserves)) / (d1(a, b, c, newReserves));\n\n        // Return the difference\n        return uint256(newSupply - currentTokensSupply);\n    }\n\n    /// @dev Selling Tokens into the curve will return payment tokens to be refunded\n    /// @param a maxPrice of the curve / 2\n    /// @param b inflectionPoint of the curve\n    /// @param c slope steepness of the curve\n    /// @param currentTokenSupply current amount of Tokens in the curve\n    /// @param paymentReserves current mount of payment reserves in the curve\n    /// @param tokensToSell amount the of Tokens the user wants to sell\n    function calculatePaymentReturnedFromTokens(\n        int256 a,\n        int256 b,\n        int256 c,\n        int256 currentTokenSupply,\n        int256 paymentReserves,\n        int256 tokensToSell\n    ) public pure returns (uint256) {\n        // Supply after Tokens are sold\n        int256 newSupply = currentTokenSupply - tokensToSell;\n\n        // Calc the constant at supply = 0\n        int256 constantVal = a * ((b.pow2() + c).sqrt());\n\n        // Calculate the new reserve amount\n        int256 newReserves = (a *\n            (((b - newSupply).pow2() + c).sqrt() + newSupply)) - constantVal;\n\n        // Return the difference\n        return uint256(paymentReserves - newReserves);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "contracts/SigmoidCuratorVault/Curve/ExtendedMath.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nlibrary ExtendedMath {\n    /**\n     * @return The given number raised to the power of 2\n     */\n    function pow2(int256 a) internal pure returns (int256) {\n        if (a == 0) {\n            return 0;\n        }\n        int256 c = a * a;\n        require(c / a == a, \"ExtendedMath: squaring overflow\");\n        return c;\n    }\n\n    function pow3(int256 a) internal pure returns (int256) {\n        if (a == 0) {\n            return 0;\n        }\n        int256 c = a * a;\n        require(c / a == a, \"ExtendedMath: cubing overflow2\");\n\n        int256 d = c * a;\n        require(d / a == c, \"ExtendedMath: cubing overflow3\");\n        return d;\n    }\n\n    /**\n     * @return z The square root of the given positive number\n     */\n    function sqrt(int256 y) internal pure returns (int256 z) {\n        require(y >= 0, \"Negative sqrt\");\n        if (y > 3) {\n            z = y;\n            int256 x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n"
    },
    "contracts/Reactions/ReactionVault.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\";\nimport \"../Permissions/IRoleManager.sol\";\nimport \"./IReactionVault.sol\";\nimport \"./ReactionVaultStorage.sol\";\nimport \"../Maker/IMakerRegistrar.sol\";\nimport \"../Parameters/IParameterManager.sol\";\nimport \"../Token/IStandard1155.sol\";\n\n/// @title ReactionVault\n/// @dev This contract buying and spending reactions\ncontract ReactionVault is\n    IReactionVault,\n    Initializable,\n    ReentrancyGuardUpgradeable,\n    ERC1155HolderUpgradeable,\n    ReactionVaultStorageV1\n{\n    /// @dev Use the safe methods when interacting with transfers with outside ERC20s\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    /// @dev Event emitted when a reaction is purchased\n    event ReactionsPurchased(\n        uint256 transformId,\n        uint256 quantity,\n        address destinationWallet,\n        address referrer,\n        uint256 reactionId,\n        uint256 parameterVersion\n    );\n\n    /// @dev Event emitted when reaction is spent\n    event ReactionsSpent(\n        uint256 takerNftChainId,\n        address takerNftAddress,\n        uint256 takerNftId,\n        uint256 reactionId,\n        address paymentToken,\n        uint256 quantity,\n        uint256 ipfsMetadataHash,\n        address referrer,\n        address curatorVaultAddress,\n        uint256 curatorTokenId,\n        uint256 curatorTokenAmount,\n        uint256 takerTokenAmount\n    );\n\n    /// @dev Event emitted when rewards are granted to a creator\n    event CreatorRewardsGranted(\n        address creator,\n        IERC20Upgradeable paymentToken,\n        uint256 amount,\n        uint256 reactionId\n    );\n\n    /// @dev Event emitted when rewards are granted to a referrer\n    event ReferrerRewardsGranted(\n        address referrer,\n        IERC20Upgradeable paymentToken,\n        uint256 amount,\n        uint256 reactionId\n    );\n\n    /// @dev Event emitted when rewards are granted to a maker\n    event MakerRewardsGranted(\n        address maker,\n        IERC20Upgradeable paymentToken,\n        uint256 amount,\n        uint256 reactionId\n    );\n\n    /// @dev Event emitted when an account withdraws ERC20 rewards\n    event ERC20RewardsClaimed(address token, uint256 amount, address recipient);\n\n    /// @dev Event emitted when taker claims curator tokens\n    event TakerWithdraw(\n        uint256 indexed curatorTokenId,\n        uint256 curatorTokensSold,\n        uint256 paymentTokenTaker,\n        uint256 paymentTokenCreator\n    );\n\n    /// @dev initializer to call after deployment, can only be called once\n    function initialize(IAddressManager _addressManager) public initializer {\n        __ReentrancyGuard_init();\n        __ERC1155Holder_init();\n        addressManager = _addressManager;\n    }\n\n    /// @dev Struct to hold local vars in buyReaction()\n    struct ReactionInfo {\n        IMakerRegistrar makerRegistrar;\n        IParameterManager parameterManager;\n        uint256 sourceId;\n        bool registered;\n        address owner;\n        address creator;\n        uint256 creatorSaleBasisPoints;\n        uint256 reactionPrice;\n        uint256 totalPurchasePrice;\n        uint256 creatorCut;\n        uint256 referrerCut;\n        uint256 makerCut;\n        uint256 curatorLiabilityCut;\n        uint256 reactionId;\n        uint256 parameterVersion;\n    }\n\n    /// @dev External func to allow a user to buy reaction NFTs based on a registered Maker NFT\n    /// @param transformId transform to be purchased\n    /// @param quantity Number of reactions to buy\n    /// @param destinationWallet reactions will be minted into this wallet\n    /// (allows bulk buying from other contracts since reactions are non-transferrable)\n    /// @param referrer Optional param to specify an address where referrer rewards are allocated\n    /// @param optionBits Optional param to specify options how the user wants transform reaction\n    function buyReaction(\n        uint256 transformId,\n        uint256 quantity,\n        address destinationWallet,\n        address referrer,\n        uint256 optionBits\n    ) external nonReentrant {\n        // Call internal function\n        return\n            _buyReaction(\n                transformId,\n                quantity,\n                destinationWallet,\n                referrer,\n                optionBits\n            );\n    }\n\n    /// @dev Derive the pricing parameters version\n    /// E.g. if the price of a reaction changes, the paramaterVersion should be different\n    function deriveParameterVersion(IParameterManager parameterManager)\n        public\n        returns (uint256)\n    {\n        // Build the parameter version from the price details\n        return\n            uint256(\n                keccak256(\n                    abi.encode(\n                        parameterManager.paymentToken(),\n                        parameterManager.reactionPrice(),\n                        parameterManager.saleCuratorLiabilityBasisPoints()\n                    )\n                )\n            );\n    }\n\n    /// @dev Derive the reaction ID from the parameters\n    /// This unique ID will be used to track instances of reactions built from the same params\n    /// E.g. if the price of a reaction changes, the reaction ID should be different\n    function deriveReactionId(\n        uint256 transformId,\n        uint256 optionBits,\n        uint256 parameterVersion\n    ) public pure returns (uint256) {\n        // Build and return the reaction ID\n        return\n            uint256(\n                keccak256(\n                    abi.encode(\n                        REACTION_META_PREFIX,\n                        parameterVersion,\n                        transformId,\n                        optionBits\n                    )\n                )\n            );\n    }\n\n    /// @dev Internal buy function\n    function _buyReaction(\n        uint256 transformId,\n        uint256 quantity,\n        address destinationWallet,\n        address referrer,\n        uint256 optionBits\n    ) internal {\n        // Ensure valid quantity\n        require(quantity > 0, \"Invalid 0 input\");\n\n        // Create a struct to hold local vars (and prevent \"stack too deep\")\n        ReactionInfo memory info;\n\n        // Get the NFT Source ID from the maker registrar\n        info.makerRegistrar = addressManager.makerRegistrar();\n        info.sourceId = info.makerRegistrar.transformToSourceLookup(\n            transformId\n        );\n        require(info.sourceId != 0, \"Unknown NFT\");\n\n        // Verify it is registered\n        (\n            info.registered,\n            info.owner,\n            info.creator,\n            info.creatorSaleBasisPoints\n        ) = info.makerRegistrar.sourceToDetailsLookup(info.sourceId);\n        require(info.registered, \"NFT not registered\");\n\n        // Move the funds into the this contract from the buyer\n        info.parameterManager = addressManager.parameterManager();\n        IERC20Upgradeable paymentToken = info.parameterManager.paymentToken();\n        info.reactionPrice = info.parameterManager.reactionPrice();\n        info.totalPurchasePrice = info.reactionPrice * quantity;\n        paymentToken.safeTransferFrom(\n            msg.sender,\n            address(this),\n            info.totalPurchasePrice\n        );\n\n        // calc payment parameter version\n        info.parameterVersion = deriveParameterVersion(info.parameterManager);\n\n        // Build reaction ID\n        info.reactionId = deriveReactionId(\n            transformId,\n            optionBits,\n            info.parameterVersion\n        );\n\n        // Assign funds to different stakeholders\n        // First, allocate to referrer, if set\n        info.referrerCut = 0;\n        if (referrer != address(0x0)) {\n            // Calc the amount\n            info.referrerCut =\n                (info.parameterManager.saleReferrerBasisPoints() *\n                    info.totalPurchasePrice) /\n                10_000;\n\n            // Assign awards to referrer\n            ownerToRewardsMapping[paymentToken][referrer] += info.referrerCut;\n            emit ReferrerRewardsGranted(\n                referrer,\n                paymentToken,\n                info.referrerCut,\n                info.reactionId\n            );\n        }\n\n        // Next, allocate the amount to the curator liability\n        uint256 saleCuratorLiabilityBasisPoints = info\n            .parameterManager\n            .saleCuratorLiabilityBasisPoints();\n        info.curatorLiabilityCut =\n            (saleCuratorLiabilityBasisPoints * info.totalPurchasePrice) /\n            10_000;\n\n        // Next, to the maker by subtracting the other amounts from the total\n        info.makerCut =\n            info.totalPurchasePrice -\n            info.referrerCut -\n            info.curatorLiabilityCut;\n\n        // Next, subtract the Creator cut from the Maker cut if it is set\n        info.creatorCut = 0;\n        if (info.creator != address(0x0) && info.creatorSaleBasisPoints > 0) {\n            // Calc the amount\n            info.creatorCut =\n                (info.creatorSaleBasisPoints * info.makerCut) /\n                10_000;\n\n            // Assign awards to creator\n            ownerToRewardsMapping[paymentToken][info.creator] += info\n                .creatorCut;\n\n            // emit event\n            emit CreatorRewardsGranted(\n                info.creator,\n                paymentToken,\n                info.creatorCut,\n                info.reactionId\n            );\n\n            // Subtract the creator cut from the maker cut\n            info.makerCut -= info.creatorCut;\n        }\n\n        // Assign awards to maker\n        ownerToRewardsMapping[paymentToken][info.owner] += info.makerCut;\n        emit MakerRewardsGranted(\n            info.owner,\n            paymentToken,\n            info.makerCut,\n            info.reactionId\n        );\n\n        // Save off the details of this reaction purchase info for usage later when they are spent\n        reactionPriceDetailsMapping[info.reactionId] = ReactionPriceDetails(\n            paymentToken,\n            info.reactionPrice,\n            saleCuratorLiabilityBasisPoints\n        );\n\n        // Mint NFTs to destination wallet\n        IStandard1155 reactionNftContract = addressManager\n            .reactionNftContract();\n        reactionNftContract.mint(\n            destinationWallet,\n            info.reactionId,\n            quantity,\n            new bytes(0)\n        );\n\n        // Emit event\n        emit ReactionsPurchased(\n            transformId,\n            quantity,\n            destinationWallet,\n            referrer,\n            info.reactionId,\n            info.parameterVersion\n        );\n    }\n\n    /// @dev Struct to hold local vars in spendReaction()\n    struct SpendInfo {\n        IStandard1155 reactionNftContract;\n        ReactionPriceDetails reactionDetails;\n        uint256 totalCuratorLiability;\n        uint256 referrerCut;\n        uint256 takerAmount;\n        uint256 spenderAmount;\n        ICuratorVault curatorVault;\n        uint256 takerCuratorTokens;\n        uint256 spenderCuratorTokens;\n    }\n\n    /// @dev Allows a reaction NFT owner to spend (burn) their tokens at a specific target Taker NFT.\n    /// @param takerNftChainId Chain ID where the NFT lives\n    /// @param takerNftAddress Target contract where the reaction is targeting\n    /// @param takerNftId Target NFT ID in the contract\n    /// @param reactionId Reaction to spend\n    /// @param reactionQuantity How many reactions to spend\n    /// @param referrer Optional address where referrer rewards are allocated\n    /// @param curatorVaultOverride Optional address of non-default curator vault\n    /// @param ipfsMetadataHash Optional hash of any metadata being associated with spend action\n    function spendReaction(\n        uint256 takerNftChainId,\n        address takerNftAddress,\n        uint256 takerNftId,\n        uint256 reactionId,\n        uint256 reactionQuantity,\n        address referrer,\n        address curatorVaultOverride,\n        uint256 ipfsMetadataHash\n    ) external nonReentrant {\n        // Call internal function\n        return\n            _spendReaction(\n                takerNftChainId,\n                takerNftAddress,\n                takerNftId,\n                reactionId,\n                reactionQuantity,\n                referrer,\n                curatorVaultOverride,\n                ipfsMetadataHash\n            );\n    }\n\n    /// @dev Internal spend function\n    function _spendReaction(\n        uint256 takerNftChainId,\n        address takerNftAddress,\n        uint256 takerNftId,\n        uint256 reactionId,\n        uint256 reactionQuantity,\n        address referrer,\n        address curatorVaultOverride,\n        uint256 ipfsMetadataHash\n    ) internal {\n        // Verify quantity\n        require(reactionQuantity > 0, \"Invalid 0 input\");\n\n        // Create a struct to hold local vars (and prevent \"stack too deep\")\n        SpendInfo memory info;\n\n        //\n        // Burn Reactions\n        //\n\n        // Burn reactions from sender\n        info.reactionNftContract = addressManager.reactionNftContract();\n        info.reactionNftContract.burn(msg.sender, reactionId, reactionQuantity);\n\n        //\n        // Calc Splits\n        //\n\n        // Look up curator vault liability details from when the reaction was purchased\n        info.reactionDetails = reactionPriceDetailsMapping[reactionId];\n\n        // Calculate the total amount of curator liability will be used to spend\n        // the reactions when buying curator Tokens\n        info.totalCuratorLiability =\n            (info.reactionDetails.reactionPrice *\n                info.reactionDetails.saleCuratorLiabilityBasisPoints *\n                reactionQuantity) /\n            10_000;\n\n        // If there is a referrer on the spend, subtract the amount and assign it\n        if (referrer != address(0)) {\n            // Calc the amount\n            info.referrerCut =\n                (addressManager.parameterManager().spendReferrerBasisPoints() *\n                    info.totalCuratorLiability) /\n                10_000;\n\n            // Assign awards to referrer\n            ownerToRewardsMapping[info.reactionDetails.paymentToken][\n                referrer\n            ] += info.referrerCut;\n\n            emit ReferrerRewardsGranted(\n                referrer,\n                info.reactionDetails.paymentToken,\n                info.referrerCut,\n                reactionId\n            );\n\n            // Subtract the referrer cut from the total being used going forward\n            info.totalCuratorLiability -= info.referrerCut;\n        }\n\n        // Calc the amount of curator liability being used for the taker\n        info.takerAmount =\n            (info.totalCuratorLiability *\n                addressManager.parameterManager().spendTakerBasisPoints()) /\n            10_000;\n\n        // The remaining amount goes to the spender\n        info.spenderAmount = info.totalCuratorLiability - info.takerAmount;\n\n        //\n        // Setup Curator Vault\n        //\n\n        // Get the default curator vault\n        info.curatorVault = addressManager.defaultCuratorVault();\n\n        // If a custom Curator Vault was passed in, verify it and use it instead\n        if (curatorVaultOverride != address(0)) {\n            require(\n                addressManager.parameterManager().approvedCuratorVaults(\n                    curatorVaultOverride\n                ),\n                \"Err CuratorVault\"\n            );\n            info.curatorVault = ICuratorVault(curatorVaultOverride);\n        }\n\n        // Get the token ID for this taker\n        uint256 curatorTokenId = info.curatorVault.getTokenId(\n            takerNftChainId,\n            takerNftAddress,\n            takerNftId,\n            info.reactionDetails.paymentToken\n        );\n\n        //\n        // Buy Curator Tokens for target NFT's owner\n        //\n\n        // Approve the full amount\n        info.reactionDetails.paymentToken.approve(\n            address(info.curatorVault),\n            info.totalCuratorLiability\n        );\n\n        // Buy Tokens for the taker and store them in this contract\n        info.takerCuratorTokens = info.curatorVault.buyCuratorTokens(\n            takerNftChainId,\n            takerNftAddress,\n            takerNftId,\n            info.reactionDetails.paymentToken,\n            info.takerAmount,\n            address(this),\n            true\n        );\n\n        // Build a hash of the rewards params\n        uint256 rewardsIndex = uint256(\n            keccak256(\n                abi.encode(\n                    takerNftChainId,\n                    takerNftAddress,\n                    takerNftId,\n                    address(info.curatorVault),\n                    curatorTokenId\n                )\n            )\n        );\n\n        // Allocate rewards to be claimed by NFT Owner\n        nftOwnerRewards[rewardsIndex] += info.takerCuratorTokens;\n\n        //\n        // Buy Curator Tokens for Reaction Spender\n        //\n\n        // Buy Tokens for the spender.  Tokens get sent directly to their address.\n        info.spenderCuratorTokens = info.curatorVault.buyCuratorTokens(\n            takerNftChainId,\n            takerNftAddress,\n            takerNftId,\n            info.reactionDetails.paymentToken,\n            info.spenderAmount,\n            msg.sender,\n            false\n        );\n\n        // Emit the event for the overall reaction spend\n        emit ReactionsSpent(\n            takerNftChainId,\n            takerNftAddress,\n            takerNftId,\n            reactionId,\n            address(info.reactionDetails.paymentToken),\n            reactionQuantity,\n            ipfsMetadataHash,\n            referrer,\n            address(info.curatorVault),\n            curatorTokenId,\n            info.spenderCuratorTokens,\n            info.takerCuratorTokens\n        );\n    }\n\n    /// @dev Allows a user to buy and spend a reaction in 1 transaction instead of first buying and then spending\n    /// in 2 separate transactions\n    function buyAndSpendReaction(\n        uint256 transformId,\n        uint256 quantity,\n        address referrer,\n        uint256 optionBits,\n        uint256 takerNftChainId,\n        address takerNftAddress,\n        uint256 takerNftId,\n        address curatorVaultOverride,\n        uint256 ipfsMetadataHash\n    ) external nonReentrant {\n        // Buy the reactions\n        _buyReaction(transformId, quantity, msg.sender, referrer, optionBits);\n\n        // calc payment parameter version\n        uint256 parameterVersion = deriveParameterVersion(\n            addressManager.parameterManager()\n        );\n\n        // Build reaction ID\n        uint256 reactionId = deriveReactionId(\n            transformId,\n            optionBits,\n            parameterVersion\n        );\n\n        // Spend it from the msg senders wallet\n        _spendReaction(\n            takerNftChainId,\n            takerNftAddress,\n            takerNftId,\n            reactionId,\n            quantity,\n            referrer,\n            curatorVaultOverride,\n            ipfsMetadataHash\n        );\n    }\n\n    /// @dev Allows an account that has been allocated rewards to withdraw (Maker, creator, referrer)\n    /// @param token ERC20 token that rewards are valued in\n    function withdrawErc20Rewards(IERC20Upgradeable token)\n        external\n        nonReentrant\n        returns (uint256)\n    {\n        // Get the amount owed\n        uint256 rewardAmount = ownerToRewardsMapping[token][msg.sender];\n        require(rewardAmount > 0, \"Invalid 0 input\");\n\n        // Reset amount back to 0\n        ownerToRewardsMapping[token][msg.sender] = 0;\n\n        // Send tokens\n        token.safeTransfer(msg.sender, rewardAmount);\n\n        // Emit event\n        emit ERC20RewardsClaimed(address(token), rewardAmount, msg.sender);\n\n        // Return amount sent\n        return rewardAmount;\n    }\n\n    /// @dev Struct to hold local vars in withdrawTakerRewards()\n    struct TakerWithdrawInfo {\n        uint256 rewardsIndex;\n        uint256 takerCuratorTokensBalance;\n        uint256 sourceId;\n        uint256 paymentTokensForMaker;\n        uint256 creatorCut;\n    }\n\n    /// @dev Allows an NFT taker to withdraw rewards for reactions that were spent against\n    /// an NFT that they own.\n    /// The owner of the NFT must register the NFT into the system before they can claim the rewards.\n    function withdrawTakerRewards(\n        uint256 takerNftChainId,\n        address takerNftAddress,\n        uint256 takerNftId,\n        IERC20Upgradeable paymentToken,\n        address curatorVault,\n        uint256 curatorTokenId,\n        uint256 tokensToBurn,\n        address refundToAddress\n    ) external nonReentrant returns (uint256) {\n        // Create a struct to hold local vars (and prevent \"stack too deep\")\n        TakerWithdrawInfo memory info;\n\n        // Build a hash of the rewards params\n        info.rewardsIndex = uint256(\n            keccak256(\n                abi.encode(\n                    takerNftChainId,\n                    takerNftAddress,\n                    takerNftId,\n                    curatorVault,\n                    curatorTokenId\n                )\n            )\n        );\n\n        // Verify the balance\n        info.takerCuratorTokensBalance = nftOwnerRewards[info.rewardsIndex];\n        require(info.takerCuratorTokensBalance > 0, \"No rewards\");\n        require(\n            info.takerCuratorTokensBalance >= tokensToBurn,\n            \"Rewards balance < tokensToBurn\"\n        );\n\n        // Look up the targeted NFT source ID\n        info.sourceId = addressManager.makerRegistrar().deriveSourceId(\n            takerNftChainId,\n            takerNftAddress,\n            takerNftId\n        );\n\n        // Get the details about the NFT\n        (\n            bool registered,\n            address owner,\n            address creator,\n            uint256 creatorSaleBasisPoints\n        ) = (addressManager.makerRegistrar()).sourceToDetailsLookup(\n                info.sourceId\n            );\n\n        // Verify it is registered and the caller is the one who registered it\n        // Since NFTs may be on a different chain (L1 vs L2) we cannot directly check this\n        require(registered, \"NFT not registered\");\n\n        // This NFT could have been registered on another chain, but this assumes the\n        // Taker is withdrawing rewards on the L2 with the same account/address\n        require(owner == msg.sender, \"NFT not owned\");\n\n        // Sell the curator Tokens - payment tokens will be sent this address\n        info.paymentTokensForMaker = ICuratorVault(curatorVault)\n            .sellCuratorTokens(\n                takerNftChainId,\n                takerNftAddress,\n                takerNftId,\n                paymentToken,\n                tokensToBurn,\n                address(this)\n            );\n\n        // decrement owner rewards balance\n        nftOwnerRewards[info.rewardsIndex] -= tokensToBurn;\n\n        // If the registration included a creator cut calculate and set aside amount\n        if (creator != address(0x0) && creatorSaleBasisPoints > 0) {\n            info.creatorCut =\n                (info.paymentTokensForMaker * creatorSaleBasisPoints) /\n                10_000;\n\n            // Allocate for the creator\n            ownerToRewardsMapping[paymentToken][creator] += info.creatorCut;\n            emit CreatorRewardsGranted(\n                creator,\n                paymentToken,\n                info.creatorCut,\n                info.sourceId\n            );\n\n            info.paymentTokensForMaker -= info.creatorCut;\n        }\n\n        // Transfer the remaining amount to the caller (Maker)\n        paymentToken.safeTransfer(refundToAddress, info.paymentTokensForMaker);\n\n        emit TakerWithdraw(\n            curatorTokenId,\n            tokensToBurn,\n            info.paymentTokensForMaker,\n            info.creatorCut\n        );\n\n        // Return the amount of payment tokens received\n        return info.paymentTokensForMaker;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155Upgradeable.sol\";\nimport \"./IERC1155ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC1155MetadataURIUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\n    using AddressUpgradeable for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\n        __ERC1155_init_unchained(uri_);\n    }\n\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[47] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155ReceiverUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\n    function __ERC1155Holder_init() internal onlyInitializing {\n    }\n\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\n    }\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/Reactions/ReactionVaultStorage.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../Config/IAddressManager.sol\";\nimport \"./IReactionVault.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"./IReactionVault.sol\";\n\n/// @title ReactionVaultStorage\n/// @dev This contract will hold all local variables for the ReactionVault Contract\n/// When upgrading the protocol, inherit from this contract on the V2 version and change the\n/// ReactionVault to inherit from the later version.  This ensures there are no storage layout\n/// corruptions when upgrading.\ncontract ReactionVaultStorageV1 is IReactionVault {\n    /// @dev prefix used in meta ID generation\n    string public constant REACTION_META_PREFIX = \"REACTION\";\n\n    /// @dev local reference to the address manager contract\n    IAddressManager public addressManager;\n\n    /// @dev tracks the accumulated token rewards for acounts that can be withdrawn\n    /// ownerToRewardsMapping[token][recipient] => amountOwed\n    mapping(IERC20Upgradeable => mapping(address => uint256))\n        public ownerToRewardsMapping;\n\n    /// @dev tracks the purchase details for each reaction NFT\n    mapping(uint256 => IReactionVault.ReactionPriceDetails)\n        public reactionPriceDetailsMapping;\n\n    /// @dev tracks the rewards owed to an NFT owner in an 1155 token\n    /// Hash(NftChainId, NftAddress, NftId, RewardTokenAddress, RewardTokenId) -> balance\n    mapping(uint256 => uint256) public nftOwnerRewards;\n}\n\n/// On the next version of the protocol, if new variables are added, put them in the below\n/// contract and use this as the inheritance chain.\n/**\ncontract ReactionVaultStorageV2 is ReactionVaultStorageV1 {\n  address newVariable;\n}\n */\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Upgradeable.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155ReceiverUpgradeable.sol\";\nimport \"../../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\n    function __ERC1155Receiver_init() internal onlyInitializing {\n    }\n\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/Parameters/ParameterManagerStorage.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../Config/IAddressManager.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"./IParameterManager.sol\";\n\n/// @title ParameterManagerStorage\n/// @dev This contract will hold all local variables for the ParameterManager Contract\n/// When upgrading the protocol, inherit from this contract on the V2 version and change the\n/// ParameterManager to inherit from the later version.  This ensures there are no storage layout\n/// corruptions when upgrading.\nabstract contract ParameterManagerStorageV1 is IParameterManager {\n    /// @dev Input error for 0 value param\n    string internal constant ZERO_INPUT = \"Invalid 0 input\";\n\n    /// @dev local reference to the address manager contract\n    IAddressManager public addressManager;\n\n    /// @dev The payment token used to buy reactions\n    IERC20Upgradeable public paymentToken;\n\n    /// @dev The amount each reaction costs in paymentToken\n    uint256 public reactionPrice;\n\n    /// @dev Basis points for the curator liability during a reaction sale\n    /// Basis points are percentage divided by 100 (e.g. 100 Basis Points is 1%)\n    uint256 public saleCuratorLiabilityBasisPoints;\n\n    /// @dev Basis points for the referrer during a reaction sale\n    /// Basis points are percentage divided by 100 (e.g. 100 Basis Points is 1%)\n    uint256 public saleReferrerBasisPoints;\n\n    /// @dev Basis points for the taker NFT owner.\n    /// This is the percentage of the Curator Liability being assigned to the taker\n    /// Basis points are percentage divided by 100 (e.g. 100 Basis Points is 1%)\n    uint256 public spendTakerBasisPoints;\n\n    /// @dev Basis points for the spend referrer.\n    /// This is the percentage of the Curator Liability being assigned to the referrer\n    /// Basis points are percentage divided by 100 (e.g. 100 Basis Points is 1%)\n    uint256 public spendReferrerBasisPoints;\n\n    /// @dev Mapping of the approved curator vaults (other than the default)\n    /// If set to true then it is allowed to be used.\n    mapping(address => bool) public approvedCuratorVaults;\n\n    /// @dev The parameters that define the bonding curve for the curator vault\n    SigmoidCurveParameters public bondingCurveParams;\n}\n\n/// On the next version of the protocol, if new variables are added, put them in the below\n/// contract and use this as the inheritance chain.\n/**\ncontract ParameterManagerStorageV2 is ParameterManagerStorageV1 {\n  address newVariable;\n}\n */\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/Maker/MakerRegistrar.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\";\nimport \"../Permissions/IRoleManager.sol\";\nimport \"./IMakerRegistrar.sol\";\nimport \"./MakerRegistrarStorage.sol\";\nimport \"./NftOwnership.sol\";\n\n/// @title MakerRegistrar\n/// @dev This contract tracks registered NFTs.  Owners of an NFT can register\n/// and deregister any NFTs owned in their wallet.\n/// Also, for the mappings, it is assumed the protocol will always look up the current owner of\n/// an NFT when running logic (which is why the owner address is not stored).  If desired, an\n/// off-chain indexer like The Graph can index registration addresses to NFTs.\ncontract MakerRegistrar is Initializable, MakerRegistrarStorageV1 {\n    /// @dev Event triggered when an NFT is registered in the system\n    event Registered(\n        uint256 nftChainId,\n        address indexed nftContractAddress,\n        uint256 indexed nftId,\n        address indexed nftOwnerAddress,\n        address nftCreatorAddress,\n        uint256 creatorSaleBasisPoints,\n        uint256 optionBits,\n        uint256 sourceId,\n        uint256 transformId\n    );\n\n    /// @dev Event triggered when an NFT is deregistered from the system\n    event Deregistered(\n        uint256 nftChainId,\n        address indexed nftContractAddress,\n        uint256 indexed nftId,\n        address indexed nftOwnerAddress,\n        uint256 sourceId\n    );\n\n    /// @dev initializer to call after deployment, can only be called once\n    function initialize(IAddressManager _addressManager) public initializer {\n        addressManager = _addressManager;\n    }\n\n    function deriveSourceId(\n        uint256 chainId,\n        address nftContractAddress,\n        uint256 nftId\n    ) external pure returns (uint256) {\n        return _deriveSourceId(chainId, nftContractAddress, nftId);\n    }\n\n    function _deriveSourceId(\n        uint256 chainId,\n        address nftContractAddress,\n        uint256 nftId\n    ) internal pure returns (uint256) {\n        return\n            uint256(keccak256(abi.encode(chainId, nftContractAddress, nftId)));\n    }\n\n    /// @dev For the specified NFT, verify it is owned by the potential owner\n    function verifyOwnership(\n        address nftContractAddress,\n        uint256 nftId,\n        address potentialOwner\n    ) public view returns (bool) {\n        return\n            NftOwnership._verifyOwnership(\n                nftContractAddress,\n                nftId,\n                potentialOwner\n            );\n    }\n\n    /// @dev Allows a NFT owner to register the NFT in the protocol so that reactions can be sold.\n    /// Owner registering must own the NFT in the wallet calling function.\n    function registerNft(\n        address nftContractAddress,\n        uint256 nftId,\n        address creatorAddress,\n        uint256 creatorSaleBasisPoints,\n        uint256 optionBits\n    ) external {\n        // Verify ownership\n        require(\n            verifyOwnership(nftContractAddress, nftId, msg.sender),\n            \"NFT not owned\"\n        );\n\n        _registerForOwner(\n            msg.sender,\n            block.chainid, // Use current chain ID\n            nftContractAddress,\n            nftId,\n            creatorAddress,\n            creatorSaleBasisPoints,\n            optionBits\n        );\n    }\n\n    function registerNftFromBridge(\n        address owner,\n        uint256 chainId,\n        address nftContractAddress,\n        uint256 nftId,\n        address creatorAddress,\n        uint256 creatorSaleBasisPoints,\n        uint256 optionBits\n    ) external {\n        // Verify caller is Child Registrar from the bridge\n        require(msg.sender == addressManager.childRegistrar(), \"Not Bridge\");\n\n        _registerForOwner(\n            owner,\n            chainId,\n            nftContractAddress,\n            nftId,\n            creatorAddress,\n            creatorSaleBasisPoints,\n            optionBits\n        );\n    }\n\n    /// @dev Register an NFT from an owner\n    /// @param owner - The current owner of the NFT - should be verified before calling\n    /// @param chainId - Chain where NFT lives\n    /// @param nftContractAddress - Address of NFT to be registered\n    /// @param nftId - ID of NFT to be registered\n    /// @param creatorAddress - (optional) Address of the creator to give creatorSaleBasisPoints cut of Maker rewards\n    /// @param creatorSaleBasisPoints (optional) Basis points for the creator during a reaction sale\n    ///        This is the percentage of the Maker rewards to give to the Creator\n    ///        Basis points are percentage divided by 100 (e.g. 100 Basis Points is 1%)\n    /// @param optionBits - (optional) Params to allow owner to specify options or transformations\n    ///        performed during registration\n    function _registerForOwner(\n        address owner,\n        uint256 chainId,\n        address nftContractAddress,\n        uint256 nftId,\n        address creatorAddress,\n        uint256 creatorSaleBasisPoints,\n        uint256 optionBits\n    ) internal {\n        // TODO: ? Block registration of a RaRa reaction NFT once Reaction Vault is built out\n\n        // Verify that creatorSaleBasisPoints is within bounds (can't allow more than 100%)\n        require(creatorSaleBasisPoints <= 10_000, \"Invalid creator bp\");\n\n        //\n        // \"Source\" - external NFT's\n        // sourceId is derived from [chainId, nftContractAddress, nftId]`\n        // Uses:\n        // - ReactionVault.buyReaction():\n        //    - check that sourceId is registered == true\n        //    - calc creator rewards for makerNFTs\n        // - ReactionVault.withdrawTakerRewards():\n        //    - check that sourceId is registered == true\n        //    - check msg.sender is registered as owner\n        //    - calc creator rewards for takerNFTs\n        //\n        // Generate source ID\n        uint256 sourceId = _deriveSourceId(chainId, nftContractAddress, nftId);\n        // add to mapping\n        sourceToDetailsLookup[sourceId] = NftDetails(\n            true,\n            owner,\n            creatorAddress,\n            creatorSaleBasisPoints\n        );\n\n        //\n        // \"Transform\": source NFTs that have been \"transformed\" into fan art via optionBits param\n        // ID: derived from [MAKER_META_PREFIX, registrationSourceId, optionBits]\n        // Uses:\n        // ReactionVault._buyReaction()\n        //  - look up source to make sure its registered\n        //  - used to derive reactionMetaId\n\n        // Generate reaction ID\n        uint256 transformId = uint256(\n            keccak256(abi.encode(MAKER_META_PREFIX, sourceId, optionBits))\n        );\n        // add to mapping\n        transformToSourceLookup[transformId] = sourceId;\n\n        // Emit event\n        emit Registered(\n            chainId,\n            nftContractAddress,\n            nftId,\n            owner,\n            creatorAddress,\n            creatorSaleBasisPoints,\n            optionBits,\n            sourceId,\n            transformId\n        );\n    }\n\n    /// @dev Allow an NFT owner to deregister and remove capability for reactions to be sold.\n    /// Caller must currently own the NFT being deregistered\n    function deregisterNft(address nftContractAddress, uint256 nftId) external {\n        // Verify ownership\n        require(\n            verifyOwnership(nftContractAddress, nftId, msg.sender),\n            \"NFT not owned\"\n        );\n\n        _deregisterNftForOwner(\n            msg.sender,\n            block.chainid,\n            nftContractAddress,\n            nftId\n        );\n    }\n\n    function deRegisterNftFromBridge(\n        address owner,\n        uint256 chainId,\n        address nftContractAddress,\n        uint256 nftId\n    ) external {\n        // Verify caller is Child Registrar from the bridge\n        require(msg.sender == addressManager.childRegistrar(), \"Not Bridge\");\n\n        _deregisterNftForOwner(owner, chainId, nftContractAddress, nftId);\n    }\n\n    function _deregisterNftForOwner(\n        address owner,\n        uint256 chainId,\n        address nftContractAddress,\n        uint256 nftId\n    ) internal {\n        // generate source ID\n        uint256 sourceId = _deriveSourceId(chainId, nftContractAddress, nftId);\n\n        // Verify it is registered\n        NftDetails storage details = sourceToDetailsLookup[sourceId];\n        require(details.registered, \"NFT not registered\");\n\n        // Update the param\n        details.registered = false;\n\n        emit Deregistered(chainId, nftContractAddress, nftId, owner, sourceId);\n    }\n}\n"
    },
    "contracts/Maker/MakerRegistrarStorage.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../Config/IAddressManager.sol\";\nimport \"./IMakerRegistrar.sol\";\n\n/// @title MakerRegistrarStorage\n/// @dev This contract will hold all local variables for the MakerRegistrar Contract\n/// When upgrading the protocol, inherit from this contract on the V2 version and change the\n/// MakerRegistrar to inherit from the later version.  This ensures there are no storage layout\n/// corruptions when upgrading.\nabstract contract MakerRegistrarStorageV1 is IMakerRegistrar {\n    /// @dev local reference to the address manager contract\n    IAddressManager public addressManager;\n\n    /// @dev prefix used in meta ID generation\n    string public constant MAKER_META_PREFIX = \"MAKER\";\n\n    /// @dev Mapping to look up source ID from meta ID key\n    mapping(uint256 => uint256) public override transformToSourceLookup;\n\n    /// @dev Mapping to look up nft details from source ID\n    mapping(uint256 => IMakerRegistrar.NftDetails)\n        public\n        override sourceToDetailsLookup;\n}\n\n/// On the next version of the protocol, if new variables are added, put them in the below\n/// contract and use this as the inheritance chain.\n/**\ncontract MakerRegistrarStorageV2 is MakerRegistrarStorageV1 {\n  address newVariable;\n}\n */\n"
    },
    "contracts/Maker/NftOwnership.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\";\n\n/// @dev This is a library for other contracts to use that need to verify ownership of an NFT on the current chain.\n/// Since this only has internal functions, it will be inlined into the calling contract at\n/// compile time and does not need to be separately deployed on chain.\nlibrary NftOwnership {\n    /// @dev For the specified NFT, verify it is owned by the potential owner\n    function _verifyOwnership(\n        address nftContractAddress,\n        uint256 nftId,\n        address potentialOwner\n    ) internal view returns (bool) {\n        // Try ERC1155\n        (bool success, bytes memory result) = nftContractAddress.staticcall(\n            abi.encodeWithSignature(\n                \"balanceOf(address,uint256)\",\n                potentialOwner,\n                nftId\n            )\n        );\n\n        // If success, check the balance\n        if (success) {\n            uint256 balance = abi.decode(result, (uint256));\n            return balance > 0;\n        }\n\n        // Try ERC721\n        (success, result) = nftContractAddress.staticcall(\n            abi.encodeWithSignature(\"ownerOf(uint256)\", nftId)\n        );\n\n        // If success, check the owner returned\n        if (success) {\n            address foundOwner = abi.decode(result, (address));\n            return foundOwner == potentialOwner;\n        }\n\n        // Try CryptoPunk\n        (success, result) = nftContractAddress.staticcall(\n            abi.encodeWithSignature(\"punkIndexToAddress(uint256)\", nftId)\n        );\n\n        // If success, check the owner returned\n        if (success) {\n            address foundOwner = abi.decode(result, (address));\n            return foundOwner == potentialOwner;\n        }\n\n        return false;\n    }\n}\n"
    },
    "contracts/Bridge/RootRegistrar.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@maticnetwork/fx-portal/contracts/tunnel/FxBaseRootTunnel.sol\";\nimport \"../Maker/NftOwnership.sol\";\n\n/// @dev This contract lives on the L1 and allows NFT owners to register NFTs that live on the L1.\n/// Once ownership is verified, it will send a message up to the contracts on the L2 specifying that\n/// the NFT has been registered or unregistered.\n/// This is not an upgradeable contract and should not be used with a proxy.\ncontract RootRegistrar is FxBaseRootTunnel {\n    bytes32 public constant REGISTER = keccak256(\"REGISTER\");\n    bytes32 public constant DE_REGISTER = keccak256(\"DE_REGISTER\");\n\n    /// @param _checkpointManager This is a well known contract deployed by matic that is used to verify messages coming from the L2 down to L1.\n    /// @param _fxRoot This is a well known contract deployed by matic that will emit the events going from L1 to L2.\n    /// @dev You must call setFxChildTunnel() with the ChildRegistrar address on the L2 after deployment\n    constructor(address _checkpointManager, address _fxRoot)\n        FxBaseRootTunnel(_checkpointManager, _fxRoot)\n    {}\n\n    /// @dev Allows a NFT owner to register the NFT in the protocol on L1\n    /// Once the ownership is verified a message will be sent to the Child contract\n    /// on the L2 chain that will trigger a registration there.\n    function registerNft(\n        address nftContractAddress,\n        uint256 nftId,\n        address creatorAddress,\n        uint256 creatorSaleBasisPoints,\n        uint256 optionBits\n    ) external {\n        // Verify ownership\n        require(\n            NftOwnership._verifyOwnership(\n                nftContractAddress,\n                nftId,\n                msg.sender\n            ),\n            \"NFT not owned\"\n        );\n\n        // REGISTER, encode(owner, chainId, nftContractAddress, nftId, creatorAddress, optionBits)\n        bytes memory message = abi.encode(\n            REGISTER,\n            abi.encode(\n                msg.sender,\n                block.chainid,\n                nftContractAddress,\n                nftId,\n                creatorAddress,\n                creatorSaleBasisPoints,\n                optionBits\n            )\n        );\n        _sendMessageToChild(message);\n    }\n\n    /// @dev Allows a NFT owner to de-register the NFT in the protocol on L1\n    /// Once the ownership is verified a message will be sent to the Child contract\n    /// on the L2 chain that will trigger a desgregistration there.\n    function deRegisterNft(address nftContractAddress, uint256 nftId) external {\n        // Verify ownership\n        require(\n            NftOwnership._verifyOwnership(\n                nftContractAddress,\n                nftId,\n                msg.sender\n            ),\n            \"NFT not owned\"\n        );\n\n        // DERegister, encode(address owner, uint256 chainId, address nftContractAddress, uint256 nftId)\n        bytes memory message = abi.encode(\n            DE_REGISTER,\n            abi.encode(msg.sender, block.chainid, nftContractAddress, nftId)\n        );\n        _sendMessageToChild(message);\n    }\n\n    /// @dev NOOP - No messages come from L2 down to L1\n    function _processMessageFromChild(bytes memory data) internal override {}\n}\n"
    },
    "@maticnetwork/fx-portal/contracts/tunnel/FxBaseRootTunnel.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n\nimport {RLPReader} from \"../lib/RLPReader.sol\";\nimport {MerklePatriciaProof} from \"../lib/MerklePatriciaProof.sol\";\nimport {Merkle} from \"../lib/Merkle.sol\";\nimport \"../lib/ExitPayloadReader.sol\";\n\n\ninterface IFxStateSender {\n    function sendMessageToChild(address _receiver, bytes calldata _data) external;\n}\n\ncontract ICheckpointManager {\n    struct HeaderBlock {\n        bytes32 root;\n        uint256 start;\n        uint256 end;\n        uint256 createdAt;\n        address proposer;\n    }\n\n    /**\n     * @notice mapping of checkpoint header numbers to block details\n     * @dev These checkpoints are submited by plasma contracts\n     */\n    mapping(uint256 => HeaderBlock) public headerBlocks;\n}\n\nabstract contract FxBaseRootTunnel {\n    using RLPReader for RLPReader.RLPItem;\n    using Merkle for bytes32;\n    using ExitPayloadReader for bytes;\n    using ExitPayloadReader for ExitPayloadReader.ExitPayload;\n    using ExitPayloadReader for ExitPayloadReader.Log;\n    using ExitPayloadReader for ExitPayloadReader.LogTopics;\n    using ExitPayloadReader for ExitPayloadReader.Receipt;\n\n    // keccak256(MessageSent(bytes))\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\n\n    // state sender contract\n    IFxStateSender public fxRoot;\n    // root chain manager\n    ICheckpointManager public checkpointManager;\n    // child tunnel contract which receives and sends messages \n    address public fxChildTunnel;\n\n    // storage to avoid duplicate exits\n    mapping(bytes32 => bool) public processedExits;\n\n    constructor(address _checkpointManager, address _fxRoot) {\n        checkpointManager = ICheckpointManager(_checkpointManager);\n        fxRoot = IFxStateSender(_fxRoot);\n    }\n\n    // set fxChildTunnel if not set already\n    function setFxChildTunnel(address _fxChildTunnel) public {\n        require(fxChildTunnel == address(0x0), \"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\");\n        fxChildTunnel = _fxChildTunnel;\n    }\n\n    /**\n     * @notice Send bytes message to Child Tunnel\n     * @param message bytes message that will be sent to Child Tunnel\n     * some message examples -\n     *   abi.encode(tokenId);\n     *   abi.encode(tokenId, tokenMetadata);\n     *   abi.encode(messageType, messageData);\n     */\n    function _sendMessageToChild(bytes memory message) internal {\n        fxRoot.sendMessageToChild(fxChildTunnel, message);\n    }\n\n    function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\n        ExitPayloadReader.ExitPayload memory payload = inputData.toExitPayload();\n\n        bytes memory branchMaskBytes = payload.getBranchMaskAsBytes();\n        uint256 blockNumber = payload.getBlockNumber();\n        // checking if exit has already been processed\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\n        bytes32 exitHash = keccak256(\n            abi.encodePacked(\n                blockNumber,\n                // first 2 nibbles are dropped while generating nibble array\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\n                // so converting to nibble array and then hashing it\n                MerklePatriciaProof._getNibbleArray(branchMaskBytes),\n                payload.getReceiptLogIndex()\n            )\n        );\n        require(\n            processedExits[exitHash] == false,\n            \"FxRootTunnel: EXIT_ALREADY_PROCESSED\"\n        );\n        processedExits[exitHash] = true;\n\n        ExitPayloadReader.Receipt memory receipt = payload.getReceipt();\n        ExitPayloadReader.Log memory log = receipt.getLog();\n\n        // check child tunnel\n        require(fxChildTunnel == log.getEmitter(), \"FxRootTunnel: INVALID_FX_CHILD_TUNNEL\");\n\n        bytes32 receiptRoot = payload.getReceiptRoot();\n        // verify receipt inclusion\n        require(\n            MerklePatriciaProof.verify(\n                receipt.toBytes(), \n                branchMaskBytes, \n                payload.getReceiptProof(), \n                receiptRoot\n            ),\n            \"FxRootTunnel: INVALID_RECEIPT_PROOF\"\n        );\n\n        // verify checkpoint inclusion\n        _checkBlockMembershipInCheckpoint(\n            blockNumber,\n            payload.getBlockTime(),\n            payload.getTxRoot(),\n            receiptRoot,\n            payload.getHeaderNumber(),\n            payload.getBlockProof()\n        );\n\n        ExitPayloadReader.LogTopics memory topics = log.getTopics();\n\n        require(\n            bytes32(topics.getField(0).toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\n            \"FxRootTunnel: INVALID_SIGNATURE\"\n        );\n\n        // received message data\n        (bytes memory message) = abi.decode(log.getData(), (bytes)); // event decodes params again, so decoding bytes to get message\n        return message;\n    }\n\n    function _checkBlockMembershipInCheckpoint(\n        uint256 blockNumber,\n        uint256 blockTime,\n        bytes32 txRoot,\n        bytes32 receiptRoot,\n        uint256 headerNumber,\n        bytes memory blockProof\n    ) private view returns (uint256) {\n        (\n            bytes32 headerRoot,\n            uint256 startBlock,\n            ,\n            uint256 createdAt,\n\n        ) = checkpointManager.headerBlocks(headerNumber);\n\n        require(\n            keccak256(\n                abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)\n            )\n                .checkMembership(\n                blockNumber-startBlock,\n                headerRoot,\n                blockProof\n            ),\n            \"FxRootTunnel: INVALID_HEADER\"\n        );\n        return createdAt;\n    }\n\n    /**\n     * @notice receive message from  L2 to L1, validated by proof\n     * @dev This function verifies if the transaction actually happened on child chain\n     *\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\n     *  2 - blockNumber - Block number containing the reference tx on child chain\n     *  3 - blockTime - Reference tx block time\n     *  4 - txRoot - Transactions root of block\n     *  5 - receiptRoot - Receipts root of block\n     *  6 - receipt - Receipt of the reference transaction\n     *  7 - receiptProof - Merkle proof of the reference receipt\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\n     *  9 - receiptLogIndex - Log Index to read from the receipt\n     */\n    function receiveMessage(bytes memory inputData) public virtual {\n        bytes memory message = _validateAndExtractMessage(inputData);\n        _processMessageFromChild(message);\n    }\n\n    /**\n     * @notice Process message received from Child Tunnel\n     * @dev function needs to be implemented to handle message as per requirement\n     * This is called by onStateReceive function.\n     * Since it is called via a system call, any event will not be emitted during its execution.\n     * @param message bytes message that was sent from Child Tunnel\n     */\n    function _processMessageFromChild(bytes memory message) virtual internal;\n}\n"
    },
    "@maticnetwork/fx-portal/contracts/lib/RLPReader.sol": {
      "content": "/*\n* @author Hamdi Allam hamdi.allam97@gmail.com\n* Please reach out with any questions or concerns\n*/\npragma solidity ^0.8.0;\n\nlibrary RLPReader {\n    uint8 constant STRING_SHORT_START = 0x80;\n    uint8 constant STRING_LONG_START  = 0xb8;\n    uint8 constant LIST_SHORT_START   = 0xc0;\n    uint8 constant LIST_LONG_START    = 0xf8;\n    uint8 constant WORD_SIZE = 32;\n\n    struct RLPItem {\n        uint len;\n        uint memPtr;\n    }\n\n    struct Iterator {\n        RLPItem item;   // Item that's being iterated over.\n        uint nextPtr;   // Position of the next item in the list.\n    }\n\n    /*\n    * @dev Returns the next element in the iteration. Reverts if it has not next element.\n    * @param self The iterator.\n    * @return The next element in the iteration.\n    */\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\n        require(hasNext(self));\n\n        uint ptr = self.nextPtr;\n        uint itemLength = _itemLength(ptr);\n        self.nextPtr = ptr + itemLength;\n\n        return RLPItem(itemLength, ptr);\n    }\n\n    /*\n    * @dev Returns true if the iteration has more elements.\n    * @param self The iterator.\n    * @return true if the iteration has more elements.\n    */\n    function hasNext(Iterator memory self) internal pure returns (bool) {\n        RLPItem memory item = self.item;\n        return self.nextPtr < item.memPtr + item.len;\n    }\n\n    /*\n    * @param item RLP encoded bytes\n    */\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\n        uint memPtr;\n        assembly {\n            memPtr := add(item, 0x20)\n        }\n\n        return RLPItem(item.length, memPtr);\n    }\n\n    /*\n    * @dev Create an iterator. Reverts if item is not a list.\n    * @param self The RLP item.\n    * @return An 'Iterator' over the item.\n    */\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\n        require(isList(self));\n\n        uint ptr = self.memPtr + _payloadOffset(self.memPtr);\n        return Iterator(self, ptr);\n    }\n\n    /*\n    * @param item RLP encoded bytes\n    */\n    function rlpLen(RLPItem memory item) internal pure returns (uint) {\n        return item.len;\n    }\n\n    /*\n    * @param item RLP encoded bytes\n    */\n    function payloadLen(RLPItem memory item) internal pure returns (uint) {\n        return item.len - _payloadOffset(item.memPtr);\n    }\n\n    /*\n    * @param item RLP encoded list in bytes\n    */\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\n        require(isList(item));\n\n        uint items = numItems(item);\n        RLPItem[] memory result = new RLPItem[](items);\n\n        uint memPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint dataLen;\n        for (uint i = 0; i < items; i++) {\n            dataLen = _itemLength(memPtr);\n            result[i] = RLPItem(dataLen, memPtr); \n            memPtr = memPtr + dataLen;\n        }\n\n        return result;\n    }\n\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\n    function isList(RLPItem memory item) internal pure returns (bool) {\n        if (item.len == 0) return false;\n\n        uint8 byte0;\n        uint memPtr = item.memPtr;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < LIST_SHORT_START)\n            return false;\n        return true;\n    }\n\n    /*\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\n     * @return keccak256 hash of RLP encoded bytes.\n     */\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\n        uint256 ptr = item.memPtr;\n        uint256 len = item.len;\n        bytes32 result;\n        assembly {\n            result := keccak256(ptr, len)\n        }\n        return result;\n    }\n\n    function payloadLocation(RLPItem memory item) internal pure returns (uint, uint) {\n        uint offset = _payloadOffset(item.memPtr);\n        uint memPtr = item.memPtr + offset;\n        uint len = item.len - offset; // data length\n        return (memPtr, len);\n    }\n\n    /*\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\n     * @return keccak256 hash of the item payload.\n     */\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\n        (uint memPtr, uint len) = payloadLocation(item);\n        bytes32 result;\n        assembly {\n            result := keccak256(memPtr, len)\n        }\n        return result;\n    }\n\n    /** RLPItem conversions into data types **/\n\n    // @returns raw rlp encoding in bytes\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        bytes memory result = new bytes(item.len);\n        if (result.length == 0) return result;\n        \n        uint ptr;\n        assembly {\n            ptr := add(0x20, result)\n        }\n\n        copy(item.memPtr, ptr, item.len);\n        return result;\n    }\n\n    // any non-zero byte is considered true\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\n        require(item.len == 1);\n        uint result;\n        uint memPtr = item.memPtr;\n        assembly {\n            result := byte(0, mload(memPtr))\n        }\n\n        return result == 0 ? false : true;\n    }\n\n    function toAddress(RLPItem memory item) internal pure returns (address) {\n        // 1 byte for the length prefix\n        require(item.len == 21);\n\n        return address(uint160(toUint(item)));\n    }\n\n    function toUint(RLPItem memory item) internal pure returns (uint) {\n        require(item.len > 0 && item.len <= 33);\n\n        uint offset = _payloadOffset(item.memPtr);\n        uint len = item.len - offset;\n\n        uint result;\n        uint memPtr = item.memPtr + offset;\n        assembly {\n            result := mload(memPtr)\n\n            // shfit to the correct location if neccesary\n            if lt(len, 32) {\n                result := div(result, exp(256, sub(32, len)))\n            }\n        }\n\n        return result;\n    }\n\n    // enforces 32 byte length\n    function toUintStrict(RLPItem memory item) internal pure returns (uint) {\n        // one byte prefix\n        require(item.len == 33);\n\n        uint result;\n        uint memPtr = item.memPtr + 1;\n        assembly {\n            result := mload(memPtr)\n        }\n\n        return result;\n    }\n\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        require(item.len > 0);\n\n        uint offset = _payloadOffset(item.memPtr);\n        uint len = item.len - offset; // data length\n        bytes memory result = new bytes(len);\n\n        uint destPtr;\n        assembly {\n            destPtr := add(0x20, result)\n        }\n\n        copy(item.memPtr + offset, destPtr, len);\n        return result;\n    }\n\n    /*\n    * Private Helpers\n    */\n\n    // @return number of payload items inside an encoded list.\n    function numItems(RLPItem memory item) private pure returns (uint) {\n        if (item.len == 0) return 0;\n\n        uint count = 0;\n        uint currPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint endPtr = item.memPtr + item.len;\n        while (currPtr < endPtr) {\n           currPtr = currPtr + _itemLength(currPtr); // skip over an item\n           count++;\n        }\n\n        return count;\n    }\n\n    // @return entire rlp item byte length\n    function _itemLength(uint memPtr) private pure returns (uint) {\n        uint itemLen;\n        uint byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START)\n            itemLen = 1;\n        \n        else if (byte0 < STRING_LONG_START)\n            itemLen = byte0 - STRING_SHORT_START + 1;\n\n        else if (byte0 < LIST_SHORT_START) {\n            assembly {\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\n                memPtr := add(memPtr, 1) // skip over the first byte\n                /* 32 byte word size */\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\n                itemLen := add(dataLen, add(byteLen, 1))\n            }\n        }\n\n        else if (byte0 < LIST_LONG_START) {\n            itemLen = byte0 - LIST_SHORT_START + 1;\n        } \n\n        else {\n            assembly {\n                let byteLen := sub(byte0, 0xf7)\n                memPtr := add(memPtr, 1)\n\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\n                itemLen := add(dataLen, add(byteLen, 1))\n            }\n        }\n\n        return itemLen;\n    }\n\n    // @return number of bytes until the data\n    function _payloadOffset(uint memPtr) private pure returns (uint) {\n        uint byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START) \n            return 0;\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START))\n            return 1;\n        else if (byte0 < LIST_SHORT_START)  // being explicit\n            return byte0 - (STRING_LONG_START - 1) + 1;\n        else\n            return byte0 - (LIST_LONG_START - 1) + 1;\n    }\n\n    /*\n    * @param src Pointer to source\n    * @param dest Pointer to destination\n    * @param len Amount of memory to copy from the source\n    */\n    function copy(uint src, uint dest, uint len) private pure {\n        if (len == 0) return;\n\n        // copy as many word sizes as possible\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n\n            src += WORD_SIZE;\n            dest += WORD_SIZE;\n        }\n\n        if (len == 0) return;\n\n        // left over bytes. Mask is used to remove unwanted bytes from the word\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\n\n        assembly {\n            let srcpart := and(mload(src), not(mask)) // zero out src\n            let destpart := and(mload(dest), mask) // retrieve the bytes\n            mstore(dest, or(destpart, srcpart))\n        }\n    }\n}\n"
    },
    "@maticnetwork/fx-portal/contracts/lib/MerklePatriciaProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {RLPReader} from \"./RLPReader.sol\";\n\nlibrary MerklePatriciaProof {\n    /*\n     * @dev Verifies a merkle patricia proof.\n     * @param value The terminating value in the trie.\n     * @param encodedPath The path in the trie leading to value.\n     * @param rlpParentNodes The rlp encoded stack of nodes.\n     * @param root The root hash of the trie.\n     * @return The boolean validity of the proof.\n     */\n    function verify(\n        bytes memory value,\n        bytes memory encodedPath,\n        bytes memory rlpParentNodes,\n        bytes32 root\n    ) internal pure returns (bool) {\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\n\n        bytes memory currentNode;\n        RLPReader.RLPItem[] memory currentNodeList;\n\n        bytes32 nodeKey = root;\n        uint256 pathPtr = 0;\n\n        bytes memory path = _getNibbleArray(encodedPath);\n        if (path.length == 0) {\n            return false;\n        }\n\n        for (uint256 i = 0; i < parentNodes.length; i++) {\n            if (pathPtr > path.length) {\n                return false;\n            }\n\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\n            if (nodeKey != keccak256(currentNode)) {\n                return false;\n            }\n            currentNodeList = RLPReader.toList(parentNodes[i]);\n\n            if (currentNodeList.length == 17) {\n                if (pathPtr == path.length) {\n                    if (\n                        keccak256(RLPReader.toBytes(currentNodeList[16])) ==\n                        keccak256(value)\n                    ) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                }\n\n                uint8 nextPathNibble = uint8(path[pathPtr]);\n                if (nextPathNibble > 16) {\n                    return false;\n                }\n                nodeKey = bytes32(\n                    RLPReader.toUintStrict(currentNodeList[nextPathNibble])\n                );\n                pathPtr += 1;\n            } else if (currentNodeList.length == 2) {\n                uint256 traversed = _nibblesToTraverse(\n                    RLPReader.toBytes(currentNodeList[0]),\n                    path,\n                    pathPtr\n                );\n                if (pathPtr + traversed == path.length) {\n                    //leaf node\n                    if (\n                        keccak256(RLPReader.toBytes(currentNodeList[1])) ==\n                        keccak256(value)\n                    ) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                }\n\n                //extension node\n                if (traversed == 0) {\n                    return false;\n                }\n\n                pathPtr += traversed;\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\n            } else {\n                return false;\n            }\n        }\n    }\n\n    function _nibblesToTraverse(\n        bytes memory encodedPartialPath,\n        bytes memory path,\n        uint256 pathPtr\n    ) private pure returns (uint256) {\n        uint256 len = 0;\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\n        // and slicedPath have elements that are each one hex character (1 nibble)\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\n        bytes memory slicedPath = new bytes(partialPath.length);\n\n        // pathPtr counts nibbles in path\n        // partialPath.length is a number of nibbles\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\n            bytes1 pathNibble = path[i];\n            slicedPath[i - pathPtr] = pathNibble;\n        }\n\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\n            len = partialPath.length;\n        } else {\n            len = 0;\n        }\n        return len;\n    }\n\n    // bytes b must be hp encoded\n    function _getNibbleArray(bytes memory b)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        bytes memory nibbles = \"\";\n        if (b.length > 0) {\n            uint8 offset;\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\n            if (hpNibble == 1 || hpNibble == 3) {\n                nibbles = new bytes(b.length * 2 - 1);\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\n                nibbles[0] = oddNibble;\n                offset = 1;\n            } else {\n                nibbles = new bytes(b.length * 2 - 2);\n                offset = 0;\n            }\n\n            for (uint256 i = offset; i < nibbles.length; i++) {\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\n            }\n        }\n        return nibbles;\n    }\n\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str)\n        private\n        pure\n        returns (bytes1)\n    {\n        return\n            bytes1(\n                n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10\n            );\n    }\n}"
    },
    "@maticnetwork/fx-portal/contracts/lib/Merkle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary Merkle {\n    function checkMembership(\n        bytes32 leaf,\n        uint256 index,\n        bytes32 rootHash,\n        bytes memory proof\n    ) internal pure returns (bool) {\n        require(proof.length % 32 == 0, \"Invalid proof length\");\n        uint256 proofHeight = proof.length / 32;\n        // Proof of size n means, height of the tree is n+1.\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\n        require(index < 2 ** proofHeight, \"Leaf index is too big\");\n\n        bytes32 proofElement;\n        bytes32 computedHash = leaf;\n        for (uint256 i = 32; i <= proof.length; i += 32) {\n            assembly {\n                proofElement := mload(add(proof, i))\n            }\n\n            if (index % 2 == 0) {\n                computedHash = keccak256(\n                    abi.encodePacked(computedHash, proofElement)\n                );\n            } else {\n                computedHash = keccak256(\n                    abi.encodePacked(proofElement, computedHash)\n                );\n            }\n\n            index = index / 2;\n        }\n        return computedHash == rootHash;\n    }\n}\n"
    },
    "@maticnetwork/fx-portal/contracts/lib/ExitPayloadReader.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport { RLPReader } from \"./RLPReader.sol\";\n\nlibrary ExitPayloadReader {\n  using RLPReader for bytes;\n  using RLPReader for RLPReader.RLPItem;\n\n  uint8 constant WORD_SIZE = 32;\n\n  struct ExitPayload {\n    RLPReader.RLPItem[] data;\n  }\n\n  struct Receipt {\n    RLPReader.RLPItem[] data;\n    bytes raw;\n    uint256 logIndex;\n  }\n\n  struct Log {\n    RLPReader.RLPItem data;\n    RLPReader.RLPItem[] list;\n  }\n\n  struct LogTopics {\n    RLPReader.RLPItem[] data;\n  }\n\n  // copy paste of private copy() from RLPReader to avoid changing of existing contracts\n  function copy(uint src, uint dest, uint len) private pure {\n        if (len == 0) return;\n\n        // copy as many word sizes as possible\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n\n            src += WORD_SIZE;\n            dest += WORD_SIZE;\n        }\n\n        // left over bytes. Mask is used to remove unwanted bytes from the word\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask)) // zero out src\n            let destpart := and(mload(dest), mask) // retrieve the bytes\n            mstore(dest, or(destpart, srcpart))\n        }\n    }\n\n  function toExitPayload(bytes memory data)\n        internal\n        pure\n        returns (ExitPayload memory)\n    {\n        RLPReader.RLPItem[] memory payloadData = data\n            .toRlpItem()\n            .toList();\n\n        return ExitPayload(payloadData);\n    }\n\n    function getHeaderNumber(ExitPayload memory payload) internal pure returns(uint256) {\n      return payload.data[0].toUint();\n    }\n\n    function getBlockProof(ExitPayload memory payload) internal pure returns(bytes memory) {\n      return payload.data[1].toBytes();\n    }\n\n    function getBlockNumber(ExitPayload memory payload) internal pure returns(uint256) {\n      return payload.data[2].toUint();\n    }\n\n    function getBlockTime(ExitPayload memory payload) internal pure returns(uint256) {\n      return payload.data[3].toUint();\n    }\n\n    function getTxRoot(ExitPayload memory payload) internal pure returns(bytes32) {\n      return bytes32(payload.data[4].toUint());\n    }\n\n    function getReceiptRoot(ExitPayload memory payload) internal pure returns(bytes32) {\n      return bytes32(payload.data[5].toUint());\n    }\n\n    function getReceipt(ExitPayload memory payload) internal pure returns(Receipt memory receipt) {\n      receipt.raw = payload.data[6].toBytes();\n      RLPReader.RLPItem memory receiptItem = receipt.raw.toRlpItem();\n\n      if (receiptItem.isList()) {\n          // legacy tx\n          receipt.data = receiptItem.toList();\n      } else {\n          // pop first byte before parsting receipt\n          bytes memory typedBytes = receipt.raw;\n          bytes memory result = new bytes(typedBytes.length - 1);\n          uint256 srcPtr;\n          uint256 destPtr;\n          assembly {\n              srcPtr := add(33, typedBytes)\n              destPtr := add(0x20, result)\n          }\n\n          copy(srcPtr, destPtr, result.length);\n          receipt.data = result.toRlpItem().toList();\n      }\n\n      receipt.logIndex = getReceiptLogIndex(payload);\n      return receipt;\n    }\n\n    function getReceiptProof(ExitPayload memory payload) internal pure returns(bytes memory) {\n      return payload.data[7].toBytes();\n    }\n\n    function getBranchMaskAsBytes(ExitPayload memory payload) internal pure returns(bytes memory) {\n      return payload.data[8].toBytes();\n    }\n\n    function getBranchMaskAsUint(ExitPayload memory payload) internal pure returns(uint256) {\n      return payload.data[8].toUint();\n    }\n\n    function getReceiptLogIndex(ExitPayload memory payload) internal pure returns(uint256) {\n      return payload.data[9].toUint();\n    }\n    \n    // Receipt methods\n    function toBytes(Receipt memory receipt) internal pure returns(bytes memory) {\n        return receipt.raw;\n    }\n\n    function getLog(Receipt memory receipt) internal pure returns(Log memory) {\n        RLPReader.RLPItem memory logData = receipt.data[3].toList()[receipt.logIndex];\n        return Log(logData, logData.toList());\n    }\n\n    // Log methods\n    function getEmitter(Log memory log) internal pure returns(address) {\n      return RLPReader.toAddress(log.list[0]);\n    }\n\n    function getTopics(Log memory log) internal pure returns(LogTopics memory) {\n        return LogTopics(log.list[1].toList());\n    }\n\n    function getData(Log memory log) internal pure returns(bytes memory) {\n        return log.list[2].toBytes();\n    }\n\n    function toRlpBytes(Log memory log) internal pure returns(bytes memory) {\n      return log.data.toRlpBytes();\n    }\n\n    // LogTopics methods\n    function getField(LogTopics memory topics, uint256 index) internal pure returns(RLPReader.RLPItem memory) {\n      return topics.data[index];\n    }\n}\n"
    },
    "contracts/Config/AddressManagerStorage.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../Permissions/IRoleManager.sol\";\nimport \"../Parameters/IParameterManager.sol\";\nimport \"../Maker/IMakerRegistrar.sol\";\nimport \"../Token/IStandard1155.sol\";\nimport \"./IAddressManager.sol\";\n\n/// @title AddressManagerStorage\n/// @dev This contract will hold all local variables for the AddressManager Contract\n/// When upgrading the protocol, inherit from this contract on the V2 version and change the\n/// AddressManager to inherit from the later version.  This ensures there are no storage layout\n/// corruptions when upgrading.\nabstract contract AddressManagerStorageV1 is IAddressManager {\n    /// @dev Input error for 0 value param\n    string internal constant ZERO_INPUT = \"Invalid 0 input\";\n\n    /// @dev Local reference to the role manager contract\n    IRoleManager public roleManager;\n\n    /// @dev Local reference to the payment manager contract\n    IParameterManager public parameterManager;\n\n    /// @dev Local reference to the maker registrar contract\n    IMakerRegistrar public makerRegistrar;\n\n    /// @dev Local reference to the reaction NFT contract\n    IStandard1155 public reactionNftContract;\n\n    /// @dev Local reference to the default curator vault\n    ICuratorVault public defaultCuratorVault;\n\n    /// @dev Local reference to the L2 bridge registrar\n    address public childRegistrar;\n}\n\n/// On the next version of the protocol, if new variables are added, put them in the below\n/// contract and use this as the inheritance chain.\n/**\ncontract AddressManagerStorageV2 is AddressManagerStorageV1 {\n  address newVariable;\n}\n */\n"
    },
    "contracts/Permissions/RoleManager.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"./IRoleManager.sol\";\nimport \"./RoleManagerStorage.sol\";\n\n/// @title RoleManager\n/// @dev This contract will track the roles and permissions in the RARA protocol\ncontract RoleManager is\n    IRoleManager,\n    AccessControlUpgradeable,\n    RoleManagerStorageV1\n{\n    /// @dev initializer to call after deployment, can only be called once\n    function initialize(address protocolAdmin) public initializer {\n        __AccessControl_init();\n        _setupRole(DEFAULT_ADMIN_ROLE, protocolAdmin);\n    }\n\n    /// @dev Determines if the specified address is the owner account\n    /// @param potentialAddress Address to check\n    function isAdmin(address potentialAddress) external view returns (bool) {\n        return hasRole(DEFAULT_ADMIN_ROLE, potentialAddress);\n    }\n\n    /// @dev Determines if the specified address has permission to udpate addresses in the protocol\n    /// @param potentialAddress Address to check\n    function isAddressManagerAdmin(address potentialAddress)\n        external\n        view\n        returns (bool)\n    {\n        return hasRole(ADDRESS_MANAGER_ADMIN, potentialAddress);\n    }\n\n    /// @dev Determines if the specified address has permission to update parameters in the protocol\n    /// @param potentialAddress Address to check\n    function isParameterManagerAdmin(address potentialAddress)\n        external\n        view\n        returns (bool)\n    {\n        return hasRole(PARAMETER_MANAGER_ADMIN, potentialAddress);\n    }\n\n    /// @dev Determines if the specified address has permission to to mint and burn reaction NFTs\n    /// @param potentialAddress Address to check\n    function isReactionNftAdmin(address potentialAddress)\n        external\n        view\n        returns (bool)\n    {\n        return hasRole(REACTION_NFT_ADMIN, potentialAddress);\n    }\n\n    /// @dev Determines if the specified address has permission to purchase curator vaults token\n    /// @param potentialAddress Address to check\n    function isCuratorVaultPurchaser(address potentialAddress)\n        external\n        view\n        returns (bool)\n    {\n        return hasRole(CURATOR_VAULT_PURCHASER, potentialAddress);\n    }\n\n    /// @dev Determines if the specified address has permission to mint and burn curator token\n    /// @param potentialAddress Address to check\n    function isCuratorTokenAdmin(address potentialAddress)\n        external\n        view\n        returns (bool)\n    {\n        return hasRole(CURATOR_TOKEN_ADMIN, potentialAddress);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/Permissions/RoleManagerStorage.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\n/// @title RoleManagerStorage\n/// @dev This contract will hold all local variables for the RoleManager Contract\n/// When upgrading the protocol, inherit from this contract on the V2 version and change the\n/// StorageManager to inherit from the later version.  This ensures there are no storage layout\n/// corruptions when upgrading.\ncontract RoleManagerStorageV1 {\n    /// @dev role for granting capability to udpate addresses in the protocol\n    bytes32 public constant ADDRESS_MANAGER_ADMIN =\n        keccak256(\"ADDRESS_MANAGER_ADMIN\");\n\n    /// @dev role for granting capability to update parameters in the protocol\n    bytes32 public constant PARAMETER_MANAGER_ADMIN =\n        keccak256(\"PARAMETER_MANAGER_ADMIN\");\n\n    /// @dev role for granting capability to mint and burn reaction NFTs\n    bytes32 public constant REACTION_NFT_ADMIN =\n        keccak256(\"REACTION_NFT_ADMIN\");\n\n    /// @dev role for granting capability to purchase curator vaults tokens\n    bytes32 public constant CURATOR_VAULT_PURCHASER =\n        keccak256(\"CURATOR_VAULT_PURCHASER\");\n\n    /// @dev role for granting capability to mint and burn curator tokens\n    bytes32 public constant CURATOR_TOKEN_ADMIN =\n        keccak256(\"CURATOR_TOKEN_ADMIN\");\n}\n\n/// On the next version of the protocol, if new variables are added, put them in the below\n/// contract and use this as the inheritance chain.\n/**\ncontract RoleManagerStorageV2 is RoleManagerStorageV1 {\n  address newVariable;\n}\n */\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "contracts/Token/Standard1155.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\";\nimport \"./IStandard1155.sol\";\nimport \"./Standard1155Storage.sol\";\n\n/// @title Standard1155\n/// @dev This contract implements the 1155 standard\nabstract contract Standard1155 is\n    IStandard1155,\n    ERC1155Upgradeable,\n    Standard1155StorageV1\n{\n    /// @dev initializer to call after deployment, can only be called once\n    function initialize(string memory _uri, address _addressManager)\n        public\n        initializer\n    {\n        // TODO: Should the URI be updateable?\n        __ERC1155_init(_uri);\n\n        addressManager = IAddressManager(_addressManager);\n    }\n}\n"
    },
    "contracts/Token/Standard1155Storage.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../Config/IAddressManager.sol\";\n\n/// @title Standard1155StorageV1\n/// @dev This contract will hold all local variables for the Standard1155 Contract\n/// When upgrading the protocol, inherit from this contract on the V2 version and change the\n/// Standard1155 to inherit from the later version.  This ensures there are no storage layout\n/// corruptions when upgrading.\ncontract Standard1155StorageV1 {\n    IAddressManager public addressManager;\n}\n\n/// On the next version of the protocol, if new variables are added, put them in the below\n/// contract and use this as the inheritance chain.\n/**\ncontract Standard1155StorageV2 is Standard1155StorageV1 {\n  address newVariable;\n}\n */\n"
    },
    "contracts/Testing/TestErc1155.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../Token/Standard1155.sol\";\n\n/// @title TestErc1155\n/// @dev This contract implements the ERC115 standard and is used for unit testing purposes only\n/// Anyone can mint or burn tokens\ncontract TestErc1155 is Standard1155 {\n    /// @dev Allows anyone to mint tokens\n    function mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) external {\n        _mint(to, id, amount, data);\n    }\n\n    /// @dev allows anyone to burn tokens\n    function burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) external {\n        _burn(from, id, amount);\n    }\n}\n"
    },
    "contracts/Reactions/NFT/ReactionNft1155.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../../Token/Standard1155.sol\";\n\n/// @title ReactionNft1155\n/// @dev This contract will be used to track Reaction NFTs in the protocol.\n/// Only the NFT Minter role can mint tokens\n/// Only the NFT Burner role can burn tokens\ncontract ReactionNft1155 is Standard1155 {\n    /// @dev verifies that the calling account has a role to enable minting tokens\n    modifier onlyNftAdmin() {\n        IRoleManager roleManager = IRoleManager(addressManager.roleManager());\n        require(roleManager.isReactionNftAdmin(msg.sender), \"Not NFT Admin\");\n        _;\n    }\n\n    /// @dev Allows reaction minter role to mint tokens\n    function mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) external onlyNftAdmin {\n        _mint(to, id, amount, data);\n    }\n\n    /// @dev Allows reaction burner role to burn tokens\n    function burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) external onlyNftAdmin {\n        _burn(from, id, amount);\n    }\n\n    /// @dev Reaction NFTs are non-transferrable to other accounts.\n    /// They are only allowed to be bought or spent.\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override(ERC1155Upgradeable) {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        // Only allow minting or burning.  Mints have \"from address\" of 0x0 and burns have \"to address\" of 0x0.\n        require(\n            from == address(0x0) || to == address(0x0),\n            \"Reaction transfer restricted\"\n        );\n    }\n}\n"
    },
    "contracts/CuratorVault/Token/CuratorToken1155.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../../Token/Standard1155.sol\";\n\n/// @title CuratorToken1155\n/// @dev This contract will be used to track Curator Token ownership\n/// Only the Curator Vault can mint or burn tokens\ncontract CuratorToken1155 is Standard1155 {\n    /// @dev verifies that the calling account is the curator vault\n    modifier onlyCuratorTokenAdmin() {\n        require(\n            addressManager.roleManager().isCuratorTokenAdmin(msg.sender),\n            \"Not Admin\"\n        );\n        _;\n    }\n\n    /// @dev Allows reaction minter role to mint tokens\n    function mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) external onlyCuratorTokenAdmin {\n        _mint(to, id, amount, data);\n    }\n\n    /// @dev Allows reaction burner role to burn tokens\n    function burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) external onlyCuratorTokenAdmin {\n        _burn(from, id, amount);\n    }\n}\n"
    },
    "contracts/Config/AddressManager.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./AddressManagerStorage.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\ncontract AddressManager is Initializable, AddressManagerStorageV1 {\n    /// @dev Verifies with the role manager that the calling address has ADMIN role\n    modifier onlyAdmin() {\n        require(roleManager.isAddressManagerAdmin(msg.sender), \"Not Admin\");\n        _;\n    }\n\n    /// @dev initializer to call after deployment, can only be called once\n    function initialize(IRoleManager _roleManager) public initializer {\n        require(address(_roleManager) != address(0x0), ZERO_INPUT);\n        roleManager = _roleManager;\n    }\n\n    /// @dev Setter for the role manager address\n    function setRoleManager(IRoleManager _roleManager) external onlyAdmin {\n        // Sanity check\n        require(address(_roleManager) != address(0x0), ZERO_INPUT);\n\n        // If the role manager address gets corrupted then this contract is DOA\n        // since no future updates can be performed via permission checks.\n        // Ensure the target address is valid and configured by requiring the current admin\n        // making this call is an admin on the new contract\n        require(_roleManager.isAdmin(msg.sender), \"RM invalid\");\n\n        roleManager = _roleManager;\n    }\n\n    /// @dev Setter for the role manager address\n    function setParameterManager(IParameterManager _parameterManager)\n        external\n        onlyAdmin\n    {\n        require(address(_parameterManager) != address(0x0), ZERO_INPUT);\n        parameterManager = _parameterManager;\n    }\n\n    /// @dev Setter for the maker registrar address\n    function setMakerRegistrar(IMakerRegistrar _makerRegistrar)\n        external\n        onlyAdmin\n    {\n        require(address(_makerRegistrar) != address(0x0), ZERO_INPUT);\n        makerRegistrar = _makerRegistrar;\n    }\n\n    /// @dev Setter for the maker registrar address\n    function setReactionNftContract(IStandard1155 _reactionNftContract)\n        external\n        onlyAdmin\n    {\n        require(address(_reactionNftContract) != address(0x0), ZERO_INPUT);\n        reactionNftContract = _reactionNftContract;\n    }\n\n    /// @dev Setter for the default curator vault address\n    function setDefaultCuratorVault(ICuratorVault _defaultCuratorVault)\n        external\n        onlyAdmin\n    {\n        require(address(_defaultCuratorVault) != address(0x0), ZERO_INPUT);\n        defaultCuratorVault = _defaultCuratorVault;\n    }\n\n    /// @dev Setter for the L2 bridge registrar\n    function setChildRegistrar(address _childRegistrar) external onlyAdmin {\n        require(address(_childRegistrar) != address(0x0), ZERO_INPUT);\n        childRegistrar = _childRegistrar;\n    }\n}\n"
    },
    "contracts/Testing/TestErc721.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\";\n\n/// @title TestErc1155\n/// @dev This contract implements the ERC721 standard and is used for unit testing purposes only\n/// Anyone can mint or burn tokens\ncontract TestErc721 is ERC721Upgradeable {\n    /// @dev initializer to call after deployment, can only be called once\n    function initialize(string memory name_, string memory symbol_)\n        public\n        initializer\n    {\n        __ERC721_init(name_, symbol_);\n    }\n\n    function mint(address to, uint256 tokenId) public {\n        _safeMint(to, tokenId);\n    }\n\n    function burn(uint256 tokenId) public {\n        _burn(tokenId);\n    }\n}\n"
    },
    "contracts/Parameters/ParameterManager.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./ParameterManagerStorage.sol\";\nimport \"../Config/IAddressManager.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\ncontract ParameterManager is Initializable, ParameterManagerStorageV1 {\n    /// @dev Verifies with the role manager that the calling address has ADMIN role\n    modifier onlyAdmin() {\n        require(\n            addressManager.roleManager().isParameterManagerAdmin(msg.sender),\n            \"Not Admin\"\n        );\n        _;\n    }\n\n    /// @dev initializer to call after deployment, can only be called once\n    function initialize(IAddressManager _addressManager) public initializer {\n        addressManager = _addressManager;\n    }\n\n    /// @dev Setter for the payment token\n    function setPaymentToken(IERC20Upgradeable _paymentToken)\n        external\n        onlyAdmin\n    {\n        require(address(_paymentToken) != address(0x0), ZERO_INPUT);\n        paymentToken = _paymentToken;\n    }\n\n    /// @dev Setter for the reaction price\n    function setReactionPrice(uint256 _reactionPrice) external onlyAdmin {\n        require(_reactionPrice != 0, ZERO_INPUT);\n        reactionPrice = _reactionPrice;\n    }\n\n    /// @dev Setter for the reaction price\n    function setSaleCuratorLiabilityBasisPoints(\n        uint256 _saleCuratorLiabilityBasisPoints\n    ) external onlyAdmin {\n        require(_saleCuratorLiabilityBasisPoints != 0, ZERO_INPUT);\n        saleCuratorLiabilityBasisPoints = _saleCuratorLiabilityBasisPoints;\n    }\n\n    /// @dev Setter for the reaction price\n    function setSaleReferrerBasisPoints(uint256 _saleReferrerBasisPoints)\n        external\n        onlyAdmin\n    {\n        require(_saleReferrerBasisPoints != 0, ZERO_INPUT);\n        saleReferrerBasisPoints = _saleReferrerBasisPoints;\n    }\n\n    /// @dev Setter for the spend taker basis points\n    function setSpendTakerBasisPoints(uint256 _spendTakerBasisPoints)\n        external\n        onlyAdmin\n    {\n        require(_spendTakerBasisPoints != 0, ZERO_INPUT);\n        spendTakerBasisPoints = _spendTakerBasisPoints;\n    }\n\n    /// @dev Setter for the spend referrer basis points\n    function setSpendReferrerBasisPoints(uint256 _spendReferrerBasisPoints)\n        external\n        onlyAdmin\n    {\n        require(_spendReferrerBasisPoints != 0, ZERO_INPUT);\n        spendReferrerBasisPoints = _spendReferrerBasisPoints;\n    }\n\n    /// @dev Setter for the list of curator vaults allowed to be used\n    function setApprovedCuratorVaults(address vault, bool approved)\n        external\n        onlyAdmin\n    {\n        require(vault != address(0x0), ZERO_INPUT);\n        approvedCuratorVaults[vault] = approved;\n    }\n\n    // @dev Setter for curator vault bonding curve params\n    function setBondingCurveParams(\n        uint256 a,\n        uint256 b,\n        uint256 c\n    ) external onlyAdmin {\n        require(a > 0 && b > 0 && c > 0, ZERO_INPUT);\n        bondingCurveParams = SigmoidCurveParameters(a, b, c);\n    }\n}\n"
    },
    "contracts/Testing/TestErc20.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\n\n/// @title TestErc20\n/// @dev This contract implements the ERC20 standard and is used for unit testing purposes only\n/// Anyone can mint tokens\ncontract TestErc20 is ERC20Upgradeable {\n    /// @dev initializer to call after deployment, can only be called once\n    function initialize(string memory name_, string memory symbol_)\n        public\n        initializer\n    {\n        __ERC20_init(name_, symbol_);\n    }\n\n    function mint(address to, uint256 amount) public virtual {\n        _mint(to, amount);\n    }\n\n    // 6 decimals to match USDC\n    function decimals() public view virtual override returns (uint8) {\n        return 6;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
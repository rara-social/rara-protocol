{
  "language": "Solidity",
  "sources": {
    "contracts/Bridge/ChildRegistrar.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"./FxBaseChildTunnel.sol\";\nimport \"../Config/IAddressManager.sol\";\n\n/// @dev This contract lives on the L2 and receives messages from the L1 to register and unregister\n/// NFTs on the L1 chain.\n/// This is not an upgradeable contract and should not be used with a proxy.\ncontract ChildRegistrar is FxBaseChildTunnel {\n    bytes32 public constant REGISTER = keccak256(\"REGISTER\");\n    bytes32 public constant DE_REGISTER = keccak256(\"DE_REGISTER\");\n\n    /// @dev local reference to the address manager contract\n    IAddressManager public addressManager;\n\n    /// @dev the address that deployed this contract is the only one that can update the fxRootTunnel\n    address public deployer;\n\n    /// @param _fxChild - This is the contract deployed on the L2 that will be sending messages here.\n    /// This is a well known deployed contract that Matic has set up.\n    /// @param _addressManager - This is the address manager on the protocol\n    /// @dev After deployment you must call setFxRootTunnel() with the RootRegistrar Address on the L1.\n    constructor(address _fxChild, IAddressManager _addressManager)\n        FxBaseChildTunnel(_fxChild)\n    {\n        addressManager = _addressManager;\n        deployer = msg.sender;\n    }\n\n    /// @dev Set fxRootTunnel if not set already\n    /// Only the deploying account can update this\n    /// Overrides the function in the base contract\n    function setFxRootTunnel(address _fxRootTunnel) external override {\n        require(deployer == msg.sender, \"Only deployer\");\n        require(fxRootTunnel == address(0x0), \"Already set\");\n        fxRootTunnel = _fxRootTunnel;\n    }\n\n    /// @dev The base contract ensures that the incoming message is from the contract _fxChild passed in the constructor.\n    /// The validateSender() makes sure that the contract on the root chain is the one relaying the message.\n    /// The root contract should have been set via setFxRootTunnel() after deployment\n    function _processMessageFromRoot(\n        uint256, /* stateId */\n        address sender,\n        bytes memory data\n    ) internal override validateSender(sender) {\n        // decode incoming data\n        (bytes32 syncType, bytes memory syncData) = abi.decode(\n            data,\n            (bytes32, bytes)\n        );\n\n        if (syncType == REGISTER) {\n            _registerNft(syncData);\n        } else if (syncType == DE_REGISTER) {\n            _deRegisterNft(syncData);\n        } else {\n            revert(\"ERR MSG\");\n        }\n    }\n\n    /// @dev Handler for messages coming from the L1 when an owner wants to register\n    function _registerNft(bytes memory syncData) internal {\n        // Decode the params from the data\n        (\n            address owner,\n            uint256 chainId,\n            address nftContractAddress,\n            uint256 nftId,\n            address[] memory creatorAddresses,\n            uint256[] memory creatorSaleBasisPoints,\n            uint256 optionBits,\n            string memory ipfsMetadataHash\n        ) = abi.decode(\n                syncData,\n                (\n                    address,\n                    uint256,\n                    address,\n                    uint256,\n                    address[],\n                    uint256[],\n                    uint256,\n                    string\n                )\n            );\n\n        // Call the registrar and register the NFT\n        addressManager.makerRegistrar().registerNftFromBridge(\n            owner,\n            chainId,\n            nftContractAddress,\n            nftId,\n            creatorAddresses,\n            creatorSaleBasisPoints,\n            optionBits,\n            ipfsMetadataHash\n        );\n    }\n\n    /// @dev Handler for messages coming from the L1 when an owner wants to de-register\n    function _deRegisterNft(bytes memory syncData) internal {\n        // Decode the params from the data\n        (\n            address owner,\n            uint256 chainId,\n            address nftContractAddress,\n            uint256 nftId\n        ) = abi.decode(syncData, (address, uint256, address, uint256));\n\n        addressManager.makerRegistrar().deRegisterNftFromBridge(\n            owner,\n            chainId,\n            nftContractAddress,\n            nftId\n        );\n    }\n}\n"
    },
    "contracts/Bridge/FxBaseChildTunnel.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title FxBaseChildTunnel\n/// @author @maticnetwork\n/// @notice This contract is copied from @maticnetwork/fx-portal\n/// @dev The only change was to make setFxRootTunnel() virtual\n\n// IFxMessageProcessor represents interface to process message\ninterface IFxMessageProcessor {\n    function processMessageFromRoot(\n        uint256 stateId,\n        address rootMessageSender,\n        bytes calldata data\n    ) external;\n}\n\n/**\n * @notice Mock child tunnel contract to receive and send message from L2\n */\nabstract contract FxBaseChildTunnel is IFxMessageProcessor {\n    // MessageTunnel on L1 will get data from this event\n    event MessageSent(bytes message);\n\n    // fx child\n    address public fxChild;\n\n    // fx root tunnel\n    address public fxRootTunnel;\n\n    constructor(address _fxChild) {\n        fxChild = _fxChild;\n    }\n\n    // Sender must be fxRootTunnel in case of ERC20 tunnel\n    modifier validateSender(address sender) {\n        require(\n            sender == fxRootTunnel,\n            \"FxBaseChildTunnel: INVALID_SENDER_FROM_ROOT\"\n        );\n        _;\n    }\n\n    // set fxRootTunnel if not set already\n    function setFxRootTunnel(address _fxRootTunnel) external virtual {\n        require(\n            fxRootTunnel == address(0x0),\n            \"FxBaseChildTunnel: ROOT_TUNNEL_ALREADY_SET\"\n        );\n        fxRootTunnel = _fxRootTunnel;\n    }\n\n    function processMessageFromRoot(\n        uint256 stateId,\n        address rootMessageSender,\n        bytes calldata data\n    ) external override {\n        require(msg.sender == fxChild, \"FxBaseChildTunnel: INVALID_SENDER\");\n        _processMessageFromRoot(stateId, rootMessageSender, data);\n    }\n\n    /**\n     * @notice Emit message that can be received on Root Tunnel\n     * @dev Call the internal function when need to emit message\n     * @param message bytes message that will be sent to Root Tunnel\n     * some message examples -\n     *   abi.encode(tokenId);\n     *   abi.encode(tokenId, tokenMetadata);\n     *   abi.encode(messageType, messageData);\n     */\n    function _sendMessageToRoot(bytes memory message) internal {\n        emit MessageSent(message);\n    }\n\n    /**\n     * @notice Process message received from Root Tunnel\n     * @dev function needs to be implemented to handle message as per requirement\n     * This is called by onStateReceive function.\n     * Since it is called via a system call, any event will not be emitted during its execution.\n     * @param stateId unique state id\n     * @param sender root message sender\n     * @param message bytes message that was sent from Root Tunnel\n     */\n    function _processMessageFromRoot(\n        uint256 stateId,\n        address sender,\n        bytes memory message\n    ) internal virtual;\n}\n"
    },
    "contracts/Config/IAddressManager.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"../Permissions/IRoleManager.sol\";\nimport \"../Parameters/IParameterManager.sol\";\nimport \"../Maker/IMakerRegistrar.sol\";\nimport \"../Token/IStandard1155.sol\";\nimport \"../Reactions/IReactionVault.sol\";\nimport \"../CuratorVault/ICuratorVault.sol\";\n\ninterface IAddressManager {\n    /// @dev Getter for the role manager address\n    function roleManager() external returns (IRoleManager);\n\n    /// @dev Setter for the role manager address\n    function setRoleManager(IRoleManager _roleManager) external;\n\n    /// @dev Getter for the role manager address\n    function parameterManager() external returns (IParameterManager);\n\n    /// @dev Setter for the role manager address\n    function setParameterManager(IParameterManager _parameterManager) external;\n\n    /// @dev Getter for the maker registrar address\n    function makerRegistrar() external returns (IMakerRegistrar);\n\n    /// @dev Setter for the maker registrar address\n    function setMakerRegistrar(IMakerRegistrar _makerRegistrar) external;\n\n    /// @dev Getter for the reaction NFT contract address\n    function reactionNftContract() external returns (IStandard1155);\n\n    /// @dev Setter for the reaction NFT contract address\n    function setReactionNftContract(IStandard1155 _reactionNftContract)\n        external;\n\n    /// @dev Getter for the default Curator Vault contract address\n    function defaultCuratorVault() external returns (ICuratorVault);\n\n    /// @dev Setter for the default Curator Vault contract address\n    function setDefaultCuratorVault(ICuratorVault _defaultCuratorVault)\n        external;\n\n    /// @dev Getter for the L2 bridge registrar\n    function childRegistrar() external returns (address);\n\n    /// @dev Setter for the L2 bridge registrar\n    function setChildRegistrar(address _childRegistrar) external;\n\n    /// @dev Getter for the address of the royalty registry\n    function royaltyRegistry() external returns (address);\n\n    /// @dev Setter for the address of the royalty registry\n    function setRoyaltyRegistry(address _royaltyRegistry) external;\n\n    /// @dev Getter for the address of the Like Token Factory\n    function likeTokenFactory() external returns (address);\n\n    /// @dev Setter for the address of the Like Token Factory\n    function setLikeTokenFactory(address _likeTokenFactory) external;\n}\n"
    },
    "contracts/Permissions/IRoleManager.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\ninterface IRoleManager {\n    /// @dev Determines if the specified address has capability to mint and burn reaction NFTs\n    /// @param potentialAddress Address to check\n    function isAdmin(address potentialAddress) external view returns (bool);\n\n    /// @dev Determines if the specified address has permission to udpate addresses in the protocol\n    /// @param potentialAddress Address to check\n    function isAddressManagerAdmin(address potentialAddress)\n        external\n        view\n        returns (bool);\n\n    /// @dev Determines if the specified address has permission to update parameters in the protocol\n    /// @param potentialAddress Address to check\n    function isParameterManagerAdmin(address potentialAddress)\n        external\n        view\n        returns (bool);\n\n    /// @dev Determines if the specified address has permission to to mint and burn reaction NFTs\n    /// @param potentialAddress Address to check\n    function isReactionNftAdmin(address potentialAddress)\n        external\n        view\n        returns (bool);\n\n    /// @dev Determines if the specified address has permission to purchase curator vault tokens\n    /// @param potentialAddress Address to check\n    function isCuratorVaultPurchaser(address potentialAddress)\n        external\n        view\n        returns (bool);\n\n    /// @dev Determines if the specified address has permission to mint and burn curator tokens\n    /// @param potentialAddress Address to check\n    function isCuratorTokenAdmin(address potentialAddress)\n        external\n        view\n        returns (bool);\n}\n"
    },
    "contracts/Parameters/IParameterManager.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"../Permissions/IRoleManager.sol\";\nimport \"../Token/IWMATIC.sol\";\n\ninterface IParameterManager {\n    /// @dev Getter for the payment token\n    function paymentToken() external returns (IWMATIC);\n\n    /// @dev Setter for the payment token\n    function setPaymentToken(IWMATIC _paymentToken) external;\n\n    /// @dev Getter for the reaction price\n    function reactionPrice() external returns (uint256);\n\n    /// @dev Setter for the reaction price\n    function setReactionPrice(uint256 _reactionPrice) external;\n\n    /// @dev Getter for the cut of purchase price going to the curator liability\n    function saleCuratorLiabilityBasisPoints() external returns (uint256);\n\n    /// @dev Setter for the cut of purchase price going to the curator liability\n    function setSaleCuratorLiabilityBasisPoints(\n        uint256 _saleCuratorLiabilityBasisPoints\n    ) external;\n\n    /// @dev Getter for the cut of purchase price going to the referrer\n    function saleReferrerBasisPoints() external returns (uint256);\n\n    /// @dev Setter for the cut of purchase price going to the referrer\n    function setSaleReferrerBasisPoints(uint256 _saleReferrerBasisPoints)\n        external;\n\n    /// @dev Getter for the cut of spend curator liability going to the taker\n    function spendTakerBasisPoints() external returns (uint256);\n\n    /// @dev Setter for the cut of spend curator liability going to the taker\n    function setSpendTakerBasisPoints(uint256 _spendTakerBasisPoints) external;\n\n    /// @dev Getter for the cut of spend curator liability going to the taker\n    function spendReferrerBasisPoints() external returns (uint256);\n\n    /// @dev Setter for the cut of spend curator liability going to the referrer\n    function setSpendReferrerBasisPoints(uint256 _spendReferrerBasisPoints)\n        external;\n\n    /// @dev Getter for the check to see if a curator vault is allowed to be used\n    function approvedCuratorVaults(address potentialVault)\n        external\n        returns (bool);\n\n    /// @dev Setter for the list of curator vaults allowed to be used\n    function setApprovedCuratorVaults(address vault, bool approved) external;\n\n    /// @dev Getter for the native wrapped ERC20 token (e.g. WMATIC)\n    function nativeWrappedToken() external returns (IERC20Upgradeable);\n\n    /// @dev Setter for the native wrapped ERC20 token (e.g. WMATIC)\n    function setNativeWrappedToken(IERC20Upgradeable _nativeWrappedToken)\n        external;\n\n    /// @dev Setter for free reaction limit\n    function freeReactionLimit() external returns (uint256);\n\n    /// @dev Setter for free reaction limit\n    function setFreeReactionLimit(uint256 limit) external;\n}\n"
    },
    "contracts/Maker/IMakerRegistrar.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\n/// @dev Interface for the maker registrar that supports registering and de-registering NFTs\ninterface IMakerRegistrar {\n    /// @dev struct for storing details about a registered NFT\n    struct NftDetails {\n        bool registered;\n        address owner;\n        address[] creators;\n        uint256[] creatorSaleBasisPoints;\n    }\n\n    function transformToSourceLookup(uint256 metaId) external returns (uint256);\n\n    function deriveSourceId(\n        uint256 nftChainId,\n        address nftAddress,\n        uint256 nftId\n    ) external returns (uint256);\n\n    /// @dev lookup for NftDetails from source ID\n    function sourceToDetailsLookup(uint256)\n        external\n        returns (NftDetails memory);\n\n    function verifyOwnership(\n        address nftContractAddress,\n        uint256 nftId,\n        address potentialOwner\n    ) external returns (bool);\n\n    function registerNftFromBridge(\n        address owner,\n        uint256 chainId,\n        address nftContractAddress,\n        uint256 nftId,\n        address[] memory nftCreatorAddresses,\n        uint256[] memory creatorSaleBasisPoints,\n        uint256 optionBits,\n        string memory ipfsMetadataHash\n    ) external;\n\n    function deRegisterNftFromBridge(\n        address owner,\n        uint256 chainId,\n        address nftContractAddress,\n        uint256 nftId\n    ) external;\n}\n"
    },
    "contracts/Token/IStandard1155.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\n/// @dev Interface for the Standard1155 toke contract.\ninterface IStandard1155 {\n    /// @dev Allows a priviledged account to mint tokens to the specified address\n    function mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) external;\n\n    function burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) external;\n}\n"
    },
    "contracts/Reactions/IReactionVault.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\nimport \"../Token/IWMATIC.sol\";\n\n/// @dev Interface for the ReactionVault that supports buying and spending reactions\ninterface IReactionVault {\n    struct ReactionPriceDetails {\n        IWMATIC paymentToken;\n        uint256 reactionPrice;\n        uint256 saleCuratorLiabilityBasisPoints;\n    }\n}\n"
    },
    "contracts/CuratorVault/ICuratorVault.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"../Token/IStandard1155.sol\";\nimport \"../Token/IWMATIC.sol\";\n\n/// @dev Interface for the curator vault\ninterface ICuratorVault {\n    function getTokenId(\n        uint256 nftChainId,\n        address nftAddress,\n        uint256 nftId,\n        IWMATIC paymentToken\n    ) external returns (uint256);\n\n    function buyCuratorTokens(\n        uint256 nftChainId,\n        address nftAddress,\n        uint256 nftId,\n        IWMATIC paymentToken,\n        uint256 paymentAmount,\n        address mintToAddress,\n        bool isTakerPosition\n    ) external returns (uint256);\n\n    function sellCuratorTokens(\n        uint256 nftChainId,\n        address nftAddress,\n        uint256 nftId,\n        IWMATIC paymentToken,\n        uint256 tokensToBurn,\n        address refundToAddress\n    ) external returns (uint256);\n\n    function curatorTokens() external returns (IStandard1155);\n}\n"
    },
    "contracts/Token/IWMATIC.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\n/// @dev Interface for interacting with the wrapped matic token contract\ninterface IWMATIC is IERC20Upgradeable {\n    // Send MATIC directly to contract\n    receive() external payable;\n\n    // Call deposit directly\n    function deposit() external payable;\n\n    // Withdraw wrapped tokens into MATIC\n    function withdraw(uint256 wad) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/draft-IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/SigmoidCuratorVault/SigmoidCuratorVaultStorage.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"../Config/IAddressManager.sol\";\nimport \"../CuratorVault/ICuratorVault.sol\";\n\n/// @title SigmoidCuratorVaultStorage\n/// @dev This contract will hold all local variables for the SigmoidCuratorVault Contract\n/// When upgrading the protocol, inherit from this contract on the V2 version and change the\n/// CuratorVault to inherit from the later version.  This ensures there are no storage layout\n/// corruptions when upgrading.\nabstract contract SigmoidCuratorVaultStorageV1 is ICuratorVault {\n    /// @dev Input error for 0 value param\n    string internal constant ZERO_INPUT = \"Invalid 0 input\";\n\n    /// @dev local reference to the address manager contract\n    IAddressManager public addressManager;\n\n    /// @dev tracks the total supply for each curator Token token ID\n    mapping(uint256 => uint256) public curatorTokenSupply;\n\n    /// @dev tracks the total payment amount held for each curator Token token ID\n    mapping(uint256 => uint256) public reserves;\n\n    /// @dev the 1155 contract to track curator Tokens\n    IStandard1155 public curatorTokens;\n\n    /// @dev Curve parameters\n    uint256 public a;\n    uint256 public b;\n    uint256 public c;\n}\n\n/// On the next version of the protocol, if new variables are added, put them in the below\n/// contract and use this as the inheritance chain.\n/**\ncontract SigmoidCuratorVaultStorageV2 is SigmoidCuratorVaultStorageV1 {\n  address newVariable;\n}\n */\n"
    },
    "contracts/SigmoidCuratorVault/SigmoidCuratorVault.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"../Token/IStandard1155.sol\";\nimport \"../Config/IAddressManager.sol\";\nimport \"./SigmoidCuratorVaultStorage.sol\";\nimport \"./Curve/Sigmoid.sol\";\nimport \"../Token/IWMATIC.sol\";\n\n/// @title SigmoidCuratorVault\n/// @dev This contract tracks tokens in a sigmoid bonding curve per Taker NFT.\n/// When users spend reactions against a Taker NFT, it will use the Curator Liability\n/// to buy curator tokens against that Taker NFT and allocate to various parties.\n/// The curator tokens will be priced via the sigmoid curve.  The params that control\n/// the shape of the sigmoid are set in the parameter manager.\n/// At any point in time the owners of the curator tokens can sell them back to the\n/// bonding curve.\n/// Note: This contract is protected via a permissioned account set in the role manager.  Caution should\n/// be used as the role owner could renounce the role leaving all future actions disabled.  Additionally,\n/// if a malicious account was able to obtain the role, they could use it to set values to malicious values.\n/// See the public documentation website for more details.\ncontract SigmoidCuratorVault is\n    ReentrancyGuardUpgradeable,\n    Sigmoid,\n    SigmoidCuratorVaultStorageV1\n{\n    /// @dev Use the safe methods when interacting with transfers with outside ERC20s\n    using SafeERC20Upgradeable for IWMATIC;\n\n    /// @dev verifies that the calling address is the reaction vault\n    modifier onlyCuratorVaultPurchaser() {\n        require(\n            addressManager.roleManager().isCuratorVaultPurchaser(msg.sender),\n            \"Not Admin\"\n        );\n        _;\n    }\n\n    /// @dev Event triggered when curator tokens are purchased\n    event CuratorTokensBought(\n        uint256 indexed curatorTokenId,\n        uint256 nftChainId,\n        address nftAddress,\n        uint256 nftId,\n        IERC20Upgradeable paymentToken,\n        uint256 paymentTokenPaid,\n        uint256 curatorTokensBought,\n        bool isTakerPosition\n    );\n\n    /// @dev Event triggered when curator tokens are sold\n    event CuratorTokensSold(\n        uint256 indexed curatorTokenId,\n        uint256 paymentTokenRefunded,\n        uint256 curatorTokensSold\n    );\n\n    /// @notice initializer to call after deployment,\n    /// @dev can only be called once\n    /// @param _addressManager - address manager in the protocol\n    /// @param _curatorTokens - curator token contract address\n    /// @param _a - bonding curve param a\n    /// @param _b - bonding curve param b\n    /// @param _c - bonding curve param c\n    function initialize(\n        address _addressManager,\n        IStandard1155 _curatorTokens,\n        uint256 _a,\n        uint256 _b,\n        uint256 _c\n    ) public initializer {\n        require(address(_addressManager) != address(0x0), ZERO_INPUT);\n        require(address(_curatorTokens) != address(0x0), ZERO_INPUT);\n\n        // Save the address manager\n        addressManager = IAddressManager(_addressManager);\n\n        // Save the curator token contract\n        curatorTokens = _curatorTokens;\n\n        // Save the curve parameters\n        a = _a;\n        b = _b;\n        c = _c;\n    }\n\n    /// @dev get a unique token ID for a given nft address and nft ID\n    function getTokenId(\n        uint256 nftChainId,\n        address nftAddress,\n        uint256 nftId,\n        IWMATIC paymentToken\n    ) external pure returns (uint256) {\n        return _getTokenId(nftChainId, nftAddress, nftId, paymentToken);\n    }\n\n    function _getTokenId(\n        uint256 nftChainId,\n        address nftAddress,\n        uint256 nftId,\n        IERC20Upgradeable paymentToken\n    ) internal pure returns (uint256) {\n        return\n            uint256(\n                keccak256(\n                    abi.encode(nftChainId, nftAddress, nftId, paymentToken)\n                )\n            );\n    }\n\n    /// @dev Buy curator Tokens when reactions are spent.\n    /// The reaction vault is the only account allowed to call this.\n    /// @return Returns the amount of curator tokens purchased.\n    function buyCuratorTokens(\n        uint256 nftChainId,\n        address nftAddress,\n        uint256 nftId,\n        IWMATIC paymentToken,\n        uint256 paymentAmount,\n        address mintToAddress,\n        bool isTakerPosition\n    ) external onlyCuratorVaultPurchaser returns (uint256) {\n        // Get the curator token token ID\n        uint256 curatorTokenId = _getTokenId(\n            nftChainId,\n            nftAddress,\n            nftId,\n            paymentToken\n        );\n\n        // Calculate the amount of tokens that will be minted based on the price\n        uint256 curatorTokenAmount = calculateTokensBoughtFromPayment(\n            SafeCast.toInt256(a),\n            SafeCast.toInt256(b),\n            SafeCast.toInt256(c),\n            SafeCast.toInt256(curatorTokenSupply[curatorTokenId]),\n            SafeCast.toInt256(reserves[curatorTokenId]),\n            SafeCast.toInt256(paymentAmount)\n        );\n\n        // Update the amounts\n        reserves[curatorTokenId] += paymentAmount;\n        curatorTokenSupply[curatorTokenId] += curatorTokenAmount;\n\n        //\n        // Pull value from ReactionVault as payment - will always be wrapped as ERC20 in the reaction vault\n        //\n        paymentToken.safeTransferFrom(msg.sender, address(this), paymentAmount);\n\n        // Mint the tokens\n        curatorTokens.mint(\n            mintToAddress,\n            curatorTokenId,\n            curatorTokenAmount,\n            new bytes(0)\n        );\n\n        // Emit the event\n        emit CuratorTokensBought(\n            curatorTokenId,\n            nftChainId,\n            nftAddress,\n            nftId,\n            paymentToken,\n            paymentAmount,\n            curatorTokenAmount,\n            isTakerPosition\n        );\n\n        return curatorTokenAmount;\n    }\n\n    /// @dev Sell curator tokens back into the bonding curve.\n    /// Any holder who owns tokens can sell them back\n    /// @return Returns the amount of payment tokens received for the curator tokens.\n    function sellCuratorTokens(\n        uint256 nftChainId,\n        address nftAddress,\n        uint256 nftId,\n        IWMATIC paymentToken,\n        uint256 tokensToBurn,\n        address refundToAddress\n    ) external nonReentrant returns (uint256) {\n        require(tokensToBurn > 0, \"Invalid 0 input\");\n\n        // Get the curator token token ID\n        uint256 curatorTokenId = _getTokenId(\n            nftChainId,\n            nftAddress,\n            nftId,\n            paymentToken\n        );\n\n        // Burn the curator tokens\n        curatorTokens.burn(msg.sender, curatorTokenId, tokensToBurn);\n\n        // Calculate the amount of tokens that will be minted based on the price\n        uint256 refundAmount = calculatePaymentReturnedFromTokens(\n            SafeCast.toInt256(a),\n            SafeCast.toInt256(b),\n            SafeCast.toInt256(c),\n            SafeCast.toInt256(curatorTokenSupply[curatorTokenId]),\n            SafeCast.toInt256(reserves[curatorTokenId]),\n            SafeCast.toInt256(tokensToBurn)\n        );\n\n        // Update the amounts\n        reserves[curatorTokenId] -= refundAmount;\n        curatorTokenSupply[curatorTokenId] -= tokensToBurn;\n\n        // Determine whether to send back ERC20 or native asset\n        if (\n            address(paymentToken) ==\n            address(addressManager.parameterManager().nativeWrappedToken())\n        ) {\n            // First, unwrap the sale amount into this address\n            paymentToken.withdraw(refundAmount);\n\n            // Send the unwrapped payment token back (native MATIC)\n            payable(refundToAddress).transfer(refundAmount);\n        } else {\n            // Send payment token back\n            paymentToken.safeTransfer(refundToAddress, refundAmount);\n        }\n\n        // Emit the event\n        emit CuratorTokensSold(curatorTokenId, refundAmount, tokensToBurn);\n\n        return refundAmount;\n    }\n\n    /// @dev Allows WMATIC to be unwrapped to this address\n    receive() external payable {}\n\n    /// @dev Allows the admin account to sweep any MATIC that was accidentally sent\n    function sweep() external {\n        require(addressManager.roleManager().isAdmin(msg.sender), \"Not Admin\");\n        payable(msg.sender).transfer(address(this).balance);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "contracts/SigmoidCuratorVault/Curve/Sigmoid.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"./ExtendedMath.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\n\n/// @dev This is a sigmoid bonding curve implementation to calculate buying and selling amounts\n/// Formulas are inspired from https://medium.com/molecule-blog/designing-different-fundraising-scenarios-with-sigmoidal-token-bonding-curves-ceafc734ed97\ncontract Sigmoid {\n    using ExtendedMath for int256;\n\n    function n1(\n        int256 a,\n        int256 b,\n        int256 c,\n        int256 newReserves\n    ) internal pure returns (int256) {\n        return 2 * a.pow2() * b * newReserves * (b.pow2() + c).sqrt();\n    }\n\n    function n2(\n        int256 a,\n        int256 b,\n        int256,\n        int256 newReserves\n    ) internal pure returns (int256) {\n        return 2 * a.pow2() * b.pow2() * newReserves;\n    }\n\n    function n3(\n        int256 a,\n        int256,\n        int256 c,\n        int256 newReserves\n    ) internal pure returns (int256) {\n        return 2 * a.pow2() * c * newReserves;\n    }\n\n    function n4(\n        int256 a,\n        int256 b,\n        int256 c,\n        int256 newReserves\n    ) internal pure returns (int256) {\n        return a * newReserves.pow2() * (b.pow2() + c).sqrt();\n    }\n\n    function n5(\n        int256 a,\n        int256 b,\n        int256,\n        int256 newReserves\n    ) internal pure returns (int256) {\n        return 1 * a * b * newReserves.pow2();\n    }\n\n    function n6(\n        int256,\n        int256,\n        int256,\n        int256 newReserves\n    ) internal pure returns (int256) {\n        return newReserves.pow3();\n    }\n\n    function d1(\n        int256 a,\n        int256 b,\n        int256 c,\n        int256 newReserves\n    ) internal pure returns (int256) {\n        return\n            a *\n            (-2 *\n                a.pow2() *\n                c -\n                4 *\n                a *\n                b *\n                newReserves +\n                2 *\n                newReserves.pow2());\n    }\n\n    /// @dev Buying into the curve with payment tokens will return Tokens amount to be bought\n    /// @param a maxPrice of the curve / 2\n    /// @param b inflectionPoint of the curve\n    /// @param c slope steepness of the curve\n    /// @param currentTokensSupply current amount of Tokens in the curve\n    /// @param paymentReserves current mount of payment reserves in the curve\n    /// @param paymentToSpend amount the of payment tokens to buy Tokens with\n    function calculateTokensBoughtFromPayment(\n        int256 a,\n        int256 b,\n        int256 c,\n        int256 currentTokensSupply,\n        int256 paymentReserves,\n        int256 paymentToSpend\n    ) public pure returns (uint256) {\n        // The amount of reserves after payment is made\n        int256 newReserves = paymentReserves + paymentToSpend;\n\n        // Calculations cause \"stack too deep\" so are broken into individual numerator and denominator functions\n        int256 newSupply = (n6(a, b, c, newReserves) +\n            n4(a, b, c, newReserves) -\n            n1(a, b, c, newReserves) -\n            n2(a, b, c, newReserves) -\n            n3(a, b, c, newReserves) -\n            n5(a, b, c, newReserves)) / (d1(a, b, c, newReserves));\n\n        // Return the difference\n        return SafeCast.toUint256(newSupply - currentTokensSupply);\n    }\n\n    /// @dev Selling Tokens into the curve will return payment tokens to be refunded\n    /// @param a maxPrice of the curve / 2\n    /// @param b inflectionPoint of the curve\n    /// @param c slope steepness of the curve\n    /// @param currentTokenSupply current amount of Tokens in the curve\n    /// @param paymentReserves current mount of payment reserves in the curve\n    /// @param tokensToSell amount the of Tokens the user wants to sell\n    function calculatePaymentReturnedFromTokens(\n        int256 a,\n        int256 b,\n        int256 c,\n        int256 currentTokenSupply,\n        int256 paymentReserves,\n        int256 tokensToSell\n    ) public pure returns (uint256) {\n        // Supply after Tokens are sold\n        int256 newSupply = currentTokenSupply - tokensToSell;\n\n        // Calc the constant at supply = 0\n        int256 constantVal = a * ((b.pow2() + c).sqrt());\n\n        // Calculate the new reserve amount\n        int256 newReserves = (a *\n            (((b - newSupply).pow2() + c).sqrt() + newSupply)) - constantVal;\n\n        // Return the difference\n        return SafeCast.toUint256(paymentReserves - newReserves);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "contracts/SigmoidCuratorVault/Curve/ExtendedMath.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\n/// @dev ^2, ^3, and sqrt functions\n/// Solidity 0.8+ should catch any overflows on multiplications\nlibrary ExtendedMath {\n    /**\n     * @return The given number raised to the power of 2\n     */\n    function pow2(int256 a) internal pure returns (int256) {\n        return a * a;\n    }\n\n    function pow3(int256 a) internal pure returns (int256) {\n        return a * a * a;\n    }\n\n    /**\n     * @return z The square root of the given positive number\n     */\n    function sqrt(int256 y) internal pure returns (int256 z) {\n        require(y >= 0, \"Negative sqrt\");\n        if (y > 3) {\n            z = y;\n            int256 x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n"
    },
    "contracts/Reactions/ReactionVault.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\";\nimport \"../Permissions/IRoleManager.sol\";\nimport \"./IReactionVault.sol\";\nimport \"./ReactionVaultStorage.sol\";\nimport \"../Maker/IMakerRegistrar.sol\";\nimport \"../Parameters/IParameterManager.sol\";\nimport \"../Token/IStandard1155.sol\";\nimport \"../Likes/ILikeTokenFactory.sol\";\nimport \"../Token/IWMATIC.sol\";\n\n/// @title ReactionVault\n/// @dev This contract buying and spending reactions\ncontract ReactionVault is\n    IReactionVault,\n    Initializable,\n    ReentrancyGuardUpgradeable,\n    ERC1155HolderUpgradeable,\n    ReactionVaultStorageV1\n{\n    /// @dev Use the safe methods when interacting with transfers with outside ERC20s\n    using SafeERC20Upgradeable for IWMATIC;\n\n    /// @dev Event emitted when a reaction is purchased\n    event ReactionsPurchased(\n        uint256 transformId,\n        uint256 quantity,\n        address destinationWallet,\n        address referrer,\n        uint256 reactionId,\n        uint256 parameterVersion\n    );\n\n    /// @dev Event emitted when reaction is spent\n    event ReactionsSpent(\n        uint256 takerNftChainId,\n        address takerNftAddress,\n        uint256 takerNftId,\n        uint256 reactionId,\n        address paymentToken,\n        uint256 quantity,\n        string ipfsMetadataHash,\n        address referrer,\n        address curatorVaultAddress,\n        uint256 curatorTokenId,\n        uint256 curatorTokenAmount,\n        uint256 takerTokenAmount\n    );\n\n    /// @dev Event emitted when rewards are granted to a creator\n    event CreatorRewardsGranted(\n        address creator,\n        IWMATIC paymentToken,\n        uint256 amount,\n        uint256 reactionId\n    );\n\n    /// @dev Event emitted when rewards are granted to a referrer\n    event ReferrerRewardsGranted(\n        address referrer,\n        IWMATIC paymentToken,\n        uint256 amount,\n        uint256 reactionId\n    );\n\n    /// @dev Event emitted when rewards are granted to a maker\n    event MakerRewardsGranted(\n        address maker,\n        IWMATIC paymentToken,\n        uint256 amount,\n        uint256 reactionId\n    );\n\n    /// @dev Event emitted when an account withdraws ERC20 rewards\n    event ERC20RewardsClaimed(address token, uint256 amount, address recipient);\n\n    /// @dev Event emitted when taker claims curator tokens\n    event TakerWithdraw(\n        uint256 indexed curatorTokenId,\n        uint256 curatorTokensSold,\n        uint256 paymentTokenTaker,\n        uint256 paymentTokenCreator\n    );\n\n    /// @dev initializer to call after deployment, can only be called once\n    function initialize(IAddressManager _addressManager) public initializer {\n        require(address(_addressManager) != address(0x0), \"Invalid 0 input\");\n        __ReentrancyGuard_init();\n        __ERC1155Holder_init();\n        addressManager = _addressManager;\n    }\n\n    /// @dev Struct to hold local vars in buyReaction()\n    struct ReactionInfo {\n        IMakerRegistrar makerRegistrar;\n        IParameterManager parameterManager;\n        uint256 sourceId;\n        IMakerRegistrar.NftDetails nftDetails;\n        uint256 reactionPrice;\n        uint256 totalPurchasePrice;\n        uint256 creatorCut;\n        uint256 referrerCut;\n        uint256 makerCut;\n        uint256 fullMakerCut;\n        uint256 curatorLiabilityCut;\n        uint256 reactionId;\n        uint256 parameterVersion;\n    }\n\n    /// @dev External func to allow a user to buy reaction NFTs based on a registered Maker NFT\n    /// @param transformId transform to be purchased\n    /// @param quantity Number of reactions to buy\n    /// @param destinationWallet reactions will be minted into this wallet\n    /// (allows bulk buying from other contracts since reactions are non-transferrable)\n    /// @param referrer Optional param to specify an address where referrer rewards are allocated\n    /// @param optionBits Optional param to specify options how the user wants transform reaction\n    function buyReaction(\n        uint256 transformId,\n        uint256 quantity,\n        address destinationWallet,\n        address referrer,\n        uint256 optionBits\n    ) external payable nonReentrant {\n        // Call internal function\n        return\n            _buyReaction(\n                transformId,\n                quantity,\n                destinationWallet,\n                referrer,\n                optionBits\n            );\n    }\n\n    /// @dev Derive the pricing parameters version\n    /// E.g. if the price of a reaction changes, the paramaterVersion should be different\n    function deriveParameterVersion(IParameterManager parameterManager)\n        public\n        returns (uint256)\n    {\n        // Build the parameter version from the price details\n        return\n            uint256(\n                keccak256(\n                    abi.encode(\n                        parameterManager.paymentToken(),\n                        parameterManager.reactionPrice(),\n                        parameterManager.saleCuratorLiabilityBasisPoints()\n                    )\n                )\n            );\n    }\n\n    /// @dev Derive the reaction ID from the parameters\n    /// This unique ID will be used to track instances of reactions built from the same params\n    /// E.g. if the price of a reaction changes, the reaction ID should be different\n    function deriveReactionId(\n        uint256 transformId,\n        uint256 optionBits,\n        uint256 parameterVersion\n    ) public pure returns (uint256) {\n        // Build and return the reaction ID\n        return\n            uint256(\n                keccak256(\n                    abi.encode(\n                        REACTION_META_PREFIX,\n                        parameterVersion,\n                        transformId,\n                        optionBits\n                    )\n                )\n            );\n    }\n\n    /// @dev Internal buy function\n    function _buyReaction(\n        uint256 transformId,\n        uint256 quantity,\n        address destinationWallet,\n        address referrer,\n        uint256 optionBits\n    ) internal {\n        // Ensure valid quantity\n        require(quantity > 0, \"Invalid 0 input\");\n\n        // Create a struct to hold local vars (and prevent \"stack too deep\")\n        ReactionInfo memory info;\n\n        // Get the NFT Source ID from the maker registrar\n        info.makerRegistrar = addressManager.makerRegistrar();\n        info.sourceId = info.makerRegistrar.transformToSourceLookup(\n            transformId\n        );\n        require(info.sourceId != 0, \"Unknown NFT\");\n\n        // Verify it is registered\n        info.nftDetails = info.makerRegistrar.sourceToDetailsLookup(\n            info.sourceId\n        );\n        require(info.nftDetails.registered, \"NFT not registered\");\n\n        // Calculate the funds to move into the this contract from the buyer\n        info.parameterManager = addressManager.parameterManager();\n        IWMATIC paymentToken = info.parameterManager.paymentToken();\n        info.reactionPrice = info.parameterManager.reactionPrice();\n        info.totalPurchasePrice = info.reactionPrice * quantity;\n\n        // calc payment parameter version\n        info.parameterVersion = deriveParameterVersion(info.parameterManager);\n\n        // Build reaction ID\n        info.reactionId = deriveReactionId(\n            transformId,\n            optionBits,\n            info.parameterVersion\n        );\n\n        // Assign funds to different stakeholders\n        // First, allocate to referrer, if set\n        info.referrerCut = 0;\n        if (referrer != address(0x0)) {\n            // Calc the amount\n            info.referrerCut =\n                (info.parameterManager.saleReferrerBasisPoints() *\n                    info.totalPurchasePrice) /\n                10_000;\n\n            // Assign awards to referrer\n            ownerToRewardsMapping[paymentToken][referrer] += info.referrerCut;\n            emit ReferrerRewardsGranted(\n                referrer,\n                paymentToken,\n                info.referrerCut,\n                info.reactionId\n            );\n        }\n\n        // Next, allocate the amount to the curator liability\n        uint256 saleCuratorLiabilityBasisPoints = info\n            .parameterManager\n            .saleCuratorLiabilityBasisPoints();\n        info.curatorLiabilityCut =\n            (saleCuratorLiabilityBasisPoints * info.totalPurchasePrice) /\n            10_000;\n\n        // Next, to the maker by subtracting the other amounts from the total\n        info.makerCut =\n            info.totalPurchasePrice -\n            info.referrerCut -\n            info.curatorLiabilityCut;\n\n        // Next, subtract the Creator cut from the Maker cut if it is set\n        info.creatorCut = 0;\n        info.fullMakerCut = info.makerCut;\n        for (uint16 i = 0; i < info.nftDetails.creators.length; i++) {\n            if (\n                info.nftDetails.creators[i] != address(0x0) &&\n                info.nftDetails.creatorSaleBasisPoints[i] > 0\n            ) {\n                // Calc the amount from the full maker cut\n                info.creatorCut =\n                    (info.nftDetails.creatorSaleBasisPoints[i] *\n                        info.fullMakerCut) /\n                    10_000;\n\n                // Assign awards to creator\n                ownerToRewardsMapping[paymentToken][\n                    info.nftDetails.creators[i]\n                ] += info.creatorCut;\n\n                // emit event\n                emit CreatorRewardsGranted(\n                    info.nftDetails.creators[i],\n                    paymentToken,\n                    info.creatorCut,\n                    info.reactionId\n                );\n\n                // Subtract the creator cut from the maker cut\n                info.makerCut -= info.creatorCut;\n            }\n        }\n\n        // Assign awards to maker\n        ownerToRewardsMapping[paymentToken][info.nftDetails.owner] += info\n            .makerCut;\n        emit MakerRewardsGranted(\n            info.nftDetails.owner,\n            paymentToken,\n            info.makerCut,\n            info.reactionId\n        );\n\n        // Save off the details of this reaction purchase info for usage later when they are spent\n        reactionPriceDetailsMapping[info.reactionId] = ReactionPriceDetails(\n            paymentToken,\n            info.reactionPrice,\n            saleCuratorLiabilityBasisPoints\n        );\n\n        // Determine whether to purchase with ERC20 or native asset\n        if (\n            address(paymentToken) ==\n            address(addressManager.parameterManager().nativeWrappedToken())\n        ) {\n            // Wrap the native currency into the wrapped ERC20\n            require(msg.value == info.totalPurchasePrice, \"Invalid payment\");\n            paymentToken.deposit{value: msg.value}();\n        } else {\n            // Move the ERC20 funds in as payment\n            paymentToken.safeTransferFrom(\n                msg.sender,\n                address(this),\n                info.totalPurchasePrice\n            );\n        }\n\n        // Mint NFTs to destination wallet\n        IStandard1155 reactionNftContract = addressManager\n            .reactionNftContract();\n        reactionNftContract.mint(\n            destinationWallet,\n            info.reactionId,\n            quantity,\n            new bytes(0)\n        );\n\n        // Emit event\n        emit ReactionsPurchased(\n            transformId,\n            quantity,\n            destinationWallet,\n            referrer,\n            info.reactionId,\n            info.parameterVersion\n        );\n    }\n\n    /// @dev Struct to hold local vars in spendReaction()\n    struct SpendInfo {\n        IStandard1155 reactionNftContract;\n        ReactionPriceDetails reactionDetails;\n        uint256 totalCuratorLiability;\n        uint256 referrerCut;\n        uint256 takerAmount;\n        uint256 spenderAmount;\n        ICuratorVault curatorVault;\n        uint256 takerCuratorTokens;\n        uint256 spenderCuratorTokens;\n        address likeTokenFactory;\n    }\n\n    /// @dev Allows a reaction NFT owner to spend (burn) their tokens at a specific target Taker NFT.\n    /// @param takerNftChainId Chain ID where the NFT lives\n    /// @param takerNftAddress Target contract where the reaction is targeting\n    /// @param takerNftId Target NFT ID in the contract\n    /// @param reactionId Reaction to spend\n    /// @param reactionQuantity How many reactions to spend\n    /// @param referrer Optional address where referrer rewards are allocated\n    /// @param curatorVaultOverride Optional address of non-default curator vault\n    /// @param ipfsMetadataHash Optional hash of any metadata being associated with spend action\n    function spendReaction(\n        uint256 takerNftChainId,\n        address takerNftAddress,\n        uint256 takerNftId,\n        uint256 reactionId,\n        uint256 reactionQuantity,\n        address referrer,\n        address curatorVaultOverride,\n        string memory ipfsMetadataHash\n    ) external nonReentrant {\n        // Call internal function\n        return\n            _spendReaction(\n                takerNftChainId,\n                takerNftAddress,\n                takerNftId,\n                reactionId,\n                reactionQuantity,\n                referrer,\n                curatorVaultOverride,\n                ipfsMetadataHash\n            );\n    }\n\n    /// @dev Internal spend function\n    function _spendReaction(\n        uint256 takerNftChainId,\n        address takerNftAddress,\n        uint256 takerNftId,\n        uint256 reactionId,\n        uint256 reactionQuantity,\n        address referrer,\n        address curatorVaultOverride,\n        string memory ipfsMetadataHash\n    ) internal {\n        // Verify quantity\n        require(reactionQuantity > 0, \"Invalid 0 input\");\n\n        // Create a struct to hold local vars (and prevent \"stack too deep\")\n        SpendInfo memory info;\n\n        //\n        // Burn Reactions\n        //\n\n        // Burn reactions from sender\n        info.reactionNftContract = addressManager.reactionNftContract();\n        info.reactionNftContract.burn(msg.sender, reactionId, reactionQuantity);\n\n        //\n        // Calc Splits\n        //\n\n        // Look up curator vault liability details from when the reaction was purchased\n        info.reactionDetails = reactionPriceDetailsMapping[reactionId];\n\n        // Calculate the total amount of curator liability will be used to spend\n        // the reactions when buying curator Tokens\n        info.totalCuratorLiability =\n            (info.reactionDetails.reactionPrice *\n                info.reactionDetails.saleCuratorLiabilityBasisPoints *\n                reactionQuantity) /\n            10_000;\n\n        // If there is a referrer on the spend, subtract the amount and assign it\n        if (referrer != address(0)) {\n            // Calc the amount\n            info.referrerCut =\n                (addressManager.parameterManager().spendReferrerBasisPoints() *\n                    info.totalCuratorLiability) /\n                10_000;\n\n            // Assign awards to referrer\n            ownerToRewardsMapping[info.reactionDetails.paymentToken][\n                referrer\n            ] += info.referrerCut;\n\n            emit ReferrerRewardsGranted(\n                referrer,\n                info.reactionDetails.paymentToken,\n                info.referrerCut,\n                reactionId\n            );\n\n            // Subtract the referrer cut from the total being used going forward\n            info.totalCuratorLiability -= info.referrerCut;\n        }\n\n        // Calc the amount of curator liability being used for the taker\n        info.takerAmount =\n            (info.totalCuratorLiability *\n                addressManager.parameterManager().spendTakerBasisPoints()) /\n            10_000;\n\n        // The remaining amount goes to the spender\n        info.spenderAmount = info.totalCuratorLiability - info.takerAmount;\n\n        //\n        // Setup Curator Vault\n        //\n\n        // Get the default curator vault\n        info.curatorVault = addressManager.defaultCuratorVault();\n\n        // If a custom Curator Vault was passed in, verify it and use it instead\n        if (curatorVaultOverride != address(0)) {\n            require(\n                addressManager.parameterManager().approvedCuratorVaults(\n                    curatorVaultOverride\n                ),\n                \"Err CuratorVault\"\n            );\n            info.curatorVault = ICuratorVault(curatorVaultOverride);\n        }\n\n        // Get the token ID for this taker\n        uint256 curatorTokenId = info.curatorVault.getTokenId(\n            takerNftChainId,\n            takerNftAddress,\n            takerNftId,\n            info.reactionDetails.paymentToken\n        );\n\n        //\n        // Buy Curator Tokens for target NFT's owner\n        //\n\n        // Approve the full amount\n        info.reactionDetails.paymentToken.approve(\n            address(info.curatorVault),\n            info.totalCuratorLiability\n        );\n\n        // Buy Tokens for the taker and store them in this contract\n        info.takerCuratorTokens = info.curatorVault.buyCuratorTokens(\n            takerNftChainId,\n            takerNftAddress,\n            takerNftId,\n            info.reactionDetails.paymentToken,\n            info.takerAmount,\n            address(this),\n            true\n        );\n\n        // Build a hash of the rewards params\n        uint256 rewardsIndex = uint256(\n            keccak256(\n                abi.encode(\n                    takerNftChainId,\n                    takerNftAddress,\n                    takerNftId,\n                    address(info.curatorVault),\n                    curatorTokenId\n                )\n            )\n        );\n\n        // Allocate rewards to be claimed by NFT Owner\n        nftOwnerRewards[rewardsIndex] += info.takerCuratorTokens;\n\n        //\n        // Buy Curator Tokens for Reaction Spender\n        //\n\n        // Buy Tokens for the spender.  Tokens get sent directly to their address.\n        info.spenderCuratorTokens = info.curatorVault.buyCuratorTokens(\n            takerNftChainId,\n            takerNftAddress,\n            takerNftId,\n            info.reactionDetails.paymentToken,\n            info.spenderAmount,\n            msg.sender,\n            false\n        );\n\n        // Issue a like token for this spend if the factory is configured\n        info.likeTokenFactory = addressManager.likeTokenFactory();\n        if (info.likeTokenFactory != address(0x0)) {\n            ILikeTokenFactory(info.likeTokenFactory).issueLikeToken(\n                msg.sender,\n                takerNftChainId,\n                takerNftAddress,\n                takerNftId\n            );\n        }\n\n        // Emit the event for the overall reaction spend\n        emit ReactionsSpent(\n            takerNftChainId,\n            takerNftAddress,\n            takerNftId,\n            reactionId,\n            address(info.reactionDetails.paymentToken),\n            reactionQuantity,\n            ipfsMetadataHash,\n            referrer,\n            address(info.curatorVault),\n            curatorTokenId,\n            info.spenderCuratorTokens,\n            info.takerCuratorTokens\n        );\n    }\n\n    /// @dev Allows a user to react to content & receive a like token.\n    /// If value is sent into this function then the user will purchase curation tokens.\n    function react(\n        uint256 transformId,\n        uint256 quantity,\n        address referrer,\n        uint256 optionBits,\n        uint256 takerNftChainId,\n        address takerNftAddress,\n        uint256 takerNftId,\n        address curatorVaultOverride,\n        string memory ipfsMetadataHash\n    ) external payable nonReentrant {\n        // calc payment parameter version\n        uint256 parameterVersion = deriveParameterVersion(\n            addressManager.parameterManager()\n        );\n        // Build reaction ID\n        uint256 reactionId = deriveReactionId(\n            transformId,\n            optionBits,\n            parameterVersion\n        );\n\n        // check for free reaction\n        if (msg.value == 0) {\n            _freeReaction(\n                transformId,\n                takerNftChainId,\n                takerNftAddress,\n                takerNftId,\n                reactionId,\n                quantity,\n                ipfsMetadataHash\n            );\n\n            return;\n        }\n\n        // Buy the reactions\n        _buyReaction(transformId, quantity, msg.sender, referrer, optionBits);\n\n        // Spend it from the msg senders wallet\n        _spendReaction(\n            takerNftChainId,\n            takerNftAddress,\n            takerNftId,\n            reactionId,\n            quantity,\n            referrer,\n            curatorVaultOverride,\n            ipfsMetadataHash\n        );\n    }\n\n    /// @dev Allows an account that has been allocated rewards to withdraw (Maker, creator, referrer)\n    /// @param token ERC20 token that rewards are valued in\n    function withdrawErc20Rewards(IWMATIC token)\n        external\n        nonReentrant\n        returns (uint256)\n    {\n        // Get the amount owed\n        uint256 rewardAmount = ownerToRewardsMapping[token][msg.sender];\n        require(rewardAmount > 0, \"Invalid 0 input\");\n\n        // Reset amount back to 0\n        ownerToRewardsMapping[token][msg.sender] = 0;\n\n        // Determine whether to send ERC20 or send native asset\n        if (\n            address(token) ==\n            address(addressManager.parameterManager().nativeWrappedToken())\n        ) {\n            // Unwrap rewards into this address\n            token.withdraw(rewardAmount);\n\n            // Send MATIC to destination\n            payable(msg.sender).transfer(rewardAmount);\n        } else {\n            // Send ERC20\n            token.safeTransfer(msg.sender, rewardAmount);\n        }\n\n        // Emit event\n        emit ERC20RewardsClaimed(address(token), rewardAmount, msg.sender);\n\n        // Return amount sent\n        return rewardAmount;\n    }\n\n    /// @dev Struct to hold local vars in withdrawTakerRewards()\n    struct TakerWithdrawInfo {\n        uint256 rewardsIndex;\n        uint256 takerCuratorTokensBalance;\n        uint256 sourceId;\n        uint256 paymentTokensForMaker;\n        uint256 fullPaymentTokensForMaker;\n        uint256 creatorCut;\n    }\n\n    /// @dev Allows an NFT taker to withdraw rewards for reactions that were spent against\n    /// an NFT that they own.\n    /// The owner of the NFT must register the NFT into the system before they can claim the rewards.\n    function withdrawTakerRewards(\n        uint256 takerNftChainId,\n        address takerNftAddress,\n        uint256 takerNftId,\n        IWMATIC paymentToken,\n        address curatorVault,\n        uint256 curatorTokenId,\n        uint256 tokensToBurn,\n        address refundToAddress\n    ) external nonReentrant returns (uint256) {\n        // Create a struct to hold local vars (and prevent \"stack too deep\")\n        TakerWithdrawInfo memory info;\n\n        // Build a hash of the rewards params\n        info.rewardsIndex = uint256(\n            keccak256(\n                abi.encode(\n                    takerNftChainId,\n                    takerNftAddress,\n                    takerNftId,\n                    curatorVault,\n                    curatorTokenId\n                )\n            )\n        );\n\n        // Verify the balance\n        info.takerCuratorTokensBalance = nftOwnerRewards[info.rewardsIndex];\n        require(info.takerCuratorTokensBalance > 0, \"No rewards\");\n        require(\n            info.takerCuratorTokensBalance >= tokensToBurn,\n            \"Rewards balance < tokensToBurn\"\n        );\n\n        // Look up the targeted NFT source ID\n        info.sourceId = addressManager.makerRegistrar().deriveSourceId(\n            takerNftChainId,\n            takerNftAddress,\n            takerNftId\n        );\n\n        // Get the details about the NFT\n        IMakerRegistrar.NftDetails memory nftDetails = (\n            addressManager.makerRegistrar()\n        ).sourceToDetailsLookup(info.sourceId);\n\n        // Verify it is registered and the caller is the one who registered it\n        // Since NFTs may be on a different chain (L1 vs L2) we cannot directly check this\n        require(nftDetails.registered, \"NFT not registered\");\n\n        // This NFT could have been registered on another chain, but this assumes the\n        // Taker is withdrawing rewards on the L2 with the same account/address\n        require(nftDetails.owner == msg.sender, \"NFT not owned\");\n\n        // Sell the curator Tokens - payment amount in native MATIC will be sent this address\n        info.paymentTokensForMaker = ICuratorVault(curatorVault)\n            .sellCuratorTokens(\n                takerNftChainId,\n                takerNftAddress,\n                takerNftId,\n                paymentToken,\n                tokensToBurn,\n                address(this)\n            );\n\n        // decrement owner rewards balance\n        nftOwnerRewards[info.rewardsIndex] -= tokensToBurn;\n\n        // If the registration included a creator cut calculate and set aside amount\n        info.fullPaymentTokensForMaker = info.paymentTokensForMaker;\n        for (uint16 i = 0; i < nftDetails.creators.length; i++) {\n            if (\n                nftDetails.creators[i] != address(0x0) &&\n                nftDetails.creatorSaleBasisPoints[i] > 0\n            ) {\n                info.creatorCut =\n                    (info.fullPaymentTokensForMaker *\n                        nftDetails.creatorSaleBasisPoints[i]) /\n                    10_000;\n\n                // Allocate for the creator\n                ownerToRewardsMapping[paymentToken][\n                    nftDetails.creators[i]\n                ] += info.creatorCut;\n                emit CreatorRewardsGranted(\n                    nftDetails.creators[i],\n                    paymentToken,\n                    info.creatorCut,\n                    info.sourceId\n                );\n\n                info.paymentTokensForMaker -= info.creatorCut;\n\n                // Wrap the MATIC to ERC20 for later withdrawal if it is native asset\n                if (\n                    address(paymentToken) ==\n                    address(\n                        addressManager.parameterManager().nativeWrappedToken()\n                    )\n                ) {\n                    paymentToken.deposit{value: info.creatorCut}();\n                }\n            }\n        }\n\n        // Determine whether to send ERC20 or send native asset\n        if (\n            address(paymentToken) ==\n            address(addressManager.parameterManager().nativeWrappedToken())\n        ) {\n            // Send remaining MATIC to destination - native MATIC was sent here during sellCuratorTokens() call\n            payable(refundToAddress).transfer(info.paymentTokensForMaker);\n        } else {\n            // Send ERC20\n            paymentToken.safeTransfer(\n                refundToAddress,\n                info.paymentTokensForMaker\n            );\n        }\n\n        emit TakerWithdraw(\n            curatorTokenId,\n            tokensToBurn,\n            info.paymentTokensForMaker,\n            info.creatorCut\n        );\n\n        // Return the amount of payment tokens received\n        return info.paymentTokensForMaker;\n    }\n\n    /// @dev Allows WMATIC to be unwrapped to this address\n    receive() external payable {}\n\n    /// @dev Allows the admin account to sweep any MATIC that was accidentally sent\n    function sweep() external {\n        require(addressManager.roleManager().isAdmin(msg.sender), \"Not Admin\");\n        payable(msg.sender).transfer(address(this).balance);\n    }\n\n    /// @dev React to content without sending any value.\n    // This function will allow the user to record their reaction on-chain and collect a \"like\" token but not purchase any curator tokens\n    function _freeReaction(\n        uint256 transformId,\n        uint256 takerNftChainId,\n        address takerNftAddress,\n        uint256 takerNftId,\n        uint256 reactionId,\n        uint256 reactionQuantity,\n        string memory ipfsMetadataHash\n    ) internal {\n        // Verify quantity\n        uint256 freeReactionLimit = addressManager\n            .parameterManager()\n            .freeReactionLimit();\n        require(\n            reactionQuantity <= freeReactionLimit,\n            \"Reaction quantity above limit\"\n        );\n\n        // Get the NFT Source ID from the maker registrar\n        IMakerRegistrar makerRegistrar = addressManager.makerRegistrar();\n        uint256 sourceId = makerRegistrar.transformToSourceLookup(transformId);\n        require(sourceId != 0, \"Unknown NFT\");\n\n        // Verify it is registered\n        IMakerRegistrar.NftDetails memory nftDetails = makerRegistrar\n            .sourceToDetailsLookup(sourceId);\n        require(nftDetails.registered, \"NFT not registered\");\n\n        // Issue a like token for this spend if the factory is configured\n        address likeTokenFactory = addressManager.likeTokenFactory();\n        if (likeTokenFactory != address(0x0)) {\n            ILikeTokenFactory(likeTokenFactory).issueLikeToken(\n                msg.sender,\n                takerNftChainId,\n                takerNftAddress,\n                takerNftId\n            );\n        }\n\n        // Emit the event for the overall reaction spend\n        emit ReactionsSpent(\n            takerNftChainId,\n            takerNftAddress,\n            takerNftId,\n            reactionId,\n            address(0), // payment token\n            reactionQuantity,\n            ipfsMetadataHash,\n            address(0), //referrer\n            address(0), // curator vault\n            0, // curatorTokenId\n            0, // spenderCuratorTokens\n            0 // takerCuratorTokens\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155Upgradeable.sol\";\nimport \"./IERC1155ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC1155MetadataURIUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\n    using AddressUpgradeable for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\n        __ERC1155_init_unchained(uri_);\n    }\n\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[47] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155ReceiverUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\n    function __ERC1155Holder_init() internal onlyInitializing {\n    }\n\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\n    }\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/Reactions/ReactionVaultStorage.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"../Config/IAddressManager.sol\";\nimport \"./IReactionVault.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"./IReactionVault.sol\";\n\n/// @title ReactionVaultStorage\n/// @dev This contract will hold all local variables for the ReactionVault Contract\n/// When upgrading the protocol, inherit from this contract on the V2 version and change the\n/// ReactionVault to inherit from the later version.  This ensures there are no storage layout\n/// corruptions when upgrading.\ncontract ReactionVaultStorageV1 is IReactionVault {\n    /// @dev prefix used in meta ID generation\n    string public constant REACTION_META_PREFIX = \"REACTION\";\n\n    /// @dev local reference to the address manager contract\n    IAddressManager public addressManager;\n\n    /// @dev tracks the accumulated token rewards for acounts that can be withdrawn\n    /// ownerToRewardsMapping[token][recipient] => amountOwed\n    mapping(IERC20Upgradeable => mapping(address => uint256))\n        public ownerToRewardsMapping;\n\n    /// @dev tracks the purchase details for each reaction NFT\n    mapping(uint256 => IReactionVault.ReactionPriceDetails)\n        public reactionPriceDetailsMapping;\n\n    /// @dev tracks the rewards owed to an NFT owner in an 1155 token\n    /// Hash(NftChainId, NftAddress, NftId, RewardTokenAddress, RewardTokenId) -> balance\n    mapping(uint256 => uint256) public nftOwnerRewards;\n}\n\n/// On the next version of the protocol, if new variables are added, put them in the below\n/// contract and use this as the inheritance chain.\n/**\ncontract ReactionVaultStorageV2 is ReactionVaultStorageV1 {\n  address newVariable;\n}\n */\n"
    },
    "contracts/Likes/ILikeTokenFactory.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\n/// @dev Interface for the LikeTokenFactory\ninterface ILikeTokenFactory {\n    /// @dev Issue a like token for a specific NFT\n    function issueLikeToken(\n        address targetAddress,\n        uint256 takerNftChainId,\n        address takerNftAddress,\n        uint256 takerNftId\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Upgradeable.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155ReceiverUpgradeable.sol\";\nimport \"../../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\n    function __ERC1155Receiver_init() internal onlyInitializing {\n    }\n\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/Likes/LikeTokenFactory.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"./ILikeTokenFactory.sol\";\nimport \"./LikeTokenFactoryStorage.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\";\n\n/// @title LikeTokenFactory\n/// @dev This contract is responsible for issuing like tokens for a target NFT.\n/// It will keep track of like token contracts for each NFT.  When a new Like Token\n/// is issued, it will check to see if it already has deployed a like token contract\n/// and if not, deploy a new proxy contract for that token.\ncontract LikeTokenFactory is\n    Initializable,\n    ILikeTokenFactory,\n    LikeTokenFactoryStorageV1\n{\n    /// @dev emitted when new like token contract is created\n    event TokenDeployed(\n        uint256 takerNftChainId,\n        address takerNftAddress,\n        uint256 takerNftId,\n        address deployedContract\n    );\n\n    /// @dev verifies that the calling account has a role to enable minting tokens\n    modifier onlyReactionNftAdmin() {\n        IRoleManager roleManager = IRoleManager(addressManager.roleManager());\n        require(roleManager.isReactionNftAdmin(msg.sender), \"Not NFT Admin\");\n        _;\n    }\n\n    /// @dev initializer to call after deployment, can only be called once\n    function initialize(\n        IAddressManager _addressManager,\n        address _tokenImplementation,\n        string calldata _baseTokenUri\n    ) public initializer {\n        require(address(_addressManager) != address(0x0), \"Invalid 0 input\");\n        addressManager = _addressManager;\n\n        require(\n            address(_tokenImplementation) != address(0x0),\n            \"Invalid 0 input\"\n        );\n        tokenImplementation = _tokenImplementation;\n\n        baseTokenUri = _baseTokenUri;\n    }\n\n    /// @dev issue like token to target address\n    function issueLikeToken(\n        address targetAddress,\n        uint256 takerNftChainId,\n        address takerNftAddress,\n        uint256 takerNftId\n    ) public onlyReactionNftAdmin {\n        // Get the key from the taker nft details\n        uint256 tokenIndex = uint256(\n            keccak256(abi.encode(takerNftChainId, takerNftAddress, takerNftId))\n        );\n\n        // Check if it exists\n        ILikeToken1155 targetContract = likeTokens[tokenIndex];\n\n        // If it doesn't exist, then create it\n        if (address(targetContract) == address(0x0)) {\n            // Deploy it\n            address newlyDeployed = ClonesUpgradeable.clone(\n                tokenImplementation\n            );\n\n            // Initialize it\n            ILikeToken1155(newlyDeployed).initialize(\n                // The URI is a concat of the base URI + addr + \"/{id}\n                string(\n                    abi.encodePacked(\n                        baseTokenUri,\n                        StringsUpgradeable.toHexString(\n                            uint256(uint160(newlyDeployed)),\n                            20\n                        ),\n                        \"/{id}\"\n                    )\n                ),\n                address(addressManager),\n                string(\n                    abi.encodePacked(\n                        string.concat(bytes(baseTokenUri), \"/contract/\"),\n                        StringsUpgradeable.toHexString(\n                            uint256(uint160(newlyDeployed)),\n                            20\n                        )\n                    )\n                )\n            );\n\n            // Save it to the mapping\n            likeTokens[tokenIndex] = ILikeToken1155(newlyDeployed);\n\n            // Set the address\n            targetContract = ILikeToken1155(newlyDeployed);\n\n            // Emit event\n            emit TokenDeployed(\n                takerNftChainId,\n                takerNftAddress,\n                takerNftId,\n                newlyDeployed\n            );\n        }\n\n        // Mint the token\n        targetContract.mint(targetAddress);\n    }\n}\n"
    },
    "contracts/Likes/LikeTokenFactoryStorage.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"../Config/IAddressManager.sol\";\nimport \"./Token/ILikeToken1155.sol\";\n\n/// @title LikeTokenFactoryStorageV1\n/// @dev This contract will hold all local variables for the LikeTokenFactory Contract\n/// When upgrading the protocol, inherit from this contract on the V2 version and change the\n/// LikeTokenFactory to inherit from the later version.  This ensures there are no storage layout\n/// corruptions when upgrading.\ncontract LikeTokenFactoryStorageV1 {\n    /// @dev local storage of the address manager\n    IAddressManager public addressManager;\n\n    /// @dev mapping for deployed like token contracts - key is hash of NFT details\n    mapping(uint256 => ILikeToken1155) public likeTokens;\n\n    /// @dev the implementation address of the token contract\n    address public tokenImplementation;\n\n    /// @dev the base string for the token URIs that will be set on the like tokens\n    /// The base token uri should be set to a format similar to \"https://www.rara.social/tokens\"\n    /// When a like token is created, it will append the token contract \"address\" and \"{id}\" so the final\n    /// uri on an individual token will look like:\n    ///   \"https://www.rara.social/tokens/E5BA5c73378BC8Da94738CB04490680ae3eab88C/{id}\"\n    string public baseTokenUri;\n}\n\n/// On the next version of the protocol, if new variables are added, put them in the below\n/// contract and use this as the inheritance chain.\n/**\ncontract LikeTokenFactoryStorageV2 is LikeTokenFactoryStorageV1 {\n  address newVariable;\n}\n */\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary ClonesUpgradeable {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/Likes/Token/ILikeToken1155.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\n/// @dev Interface for the LikeToken1155 toke contract.\ninterface ILikeToken1155 {\n    /// @dev initialize the state\n    function initialize(\n        string memory _uri,\n        address _addressManager,\n        string memory _contractUri\n    ) external;\n\n    /// @dev Allows a priviledged account to mint a token to the specified address\n    function mint(address to) external;\n\n    /// @dev Allows the owner to burn a token to from their address\n    function burn(uint256 id) external;\n}\n"
    },
    "contracts/Maker/MakerRegistrar.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\";\nimport \"../Permissions/IRoleManager.sol\";\nimport \"./IMakerRegistrar.sol\";\nimport \"./MakerRegistrarStorage.sol\";\nimport \"./NftOwnership.sol\";\nimport \"../Royalties/Royalties.sol\";\n\n/// @title MakerRegistrar\n/// @dev This contract tracks registered NFTs.  Owners of an NFT can register\n/// and deregister any NFTs owned in their wallet.\n/// Also, for the mappings, it is assumed the protocol will always look up the current owner of\n/// an NFT when running logic (which is why the owner address is not stored).  If desired, an\n/// off-chain indexer like The Graph can index registration addresses to NFTs.\ncontract MakerRegistrar is Initializable, MakerRegistrarStorageV1 {\n    /// @dev Event triggered when an NFT is registered in the system\n    event Registered(\n        uint256 nftChainId,\n        address indexed nftContractAddress,\n        uint256 indexed nftId,\n        address indexed nftOwnerAddress,\n        address[] nftCreatorAddresses,\n        uint256[] creatorSaleBasisPoints,\n        uint256 optionBits,\n        uint256 sourceId,\n        uint256 transformId,\n        string ipfsMetadataHash\n    );\n\n    /// @dev Event triggered when an NFT is deregistered from the system\n    event Deregistered(\n        uint256 nftChainId,\n        address indexed nftContractAddress,\n        uint256 indexed nftId,\n        address indexed nftOwnerAddress,\n        uint256 sourceId\n    );\n\n    /// @dev initializer to call after deployment, can only be called once\n    function initialize(IAddressManager _addressManager) public initializer {\n        addressManager = _addressManager;\n    }\n\n    function deriveSourceId(\n        uint256 chainId,\n        address nftContractAddress,\n        uint256 nftId\n    ) external pure returns (uint256) {\n        return _deriveSourceId(chainId, nftContractAddress, nftId);\n    }\n\n    function _deriveSourceId(\n        uint256 chainId,\n        address nftContractAddress,\n        uint256 nftId\n    ) internal pure returns (uint256) {\n        return\n            uint256(keccak256(abi.encode(chainId, nftContractAddress, nftId)));\n    }\n\n    /// @dev For the specified NFT, verify it is owned by the potential owner\n    function verifyOwnership(\n        address nftContractAddress,\n        uint256 nftId,\n        address potentialOwner\n    ) public view returns (bool) {\n        return\n            NftOwnership._verifyOwnership(\n                nftContractAddress,\n                nftId,\n                potentialOwner\n            );\n    }\n\n    /// @dev Allows a NFT owner to register the NFT in the protocol so that reactions can be sold.\n    /// Owner registering must own the NFT in the wallet calling function.\n    function registerNft(\n        address nftContractAddress,\n        uint256 nftId,\n        address creatorAddress,\n        uint256 creatorSaleBasisPoints,\n        uint256 optionBits,\n        string calldata ipfsMetadataHash\n    ) external {\n        // Verify ownership\n        require(\n            verifyOwnership(nftContractAddress, nftId, msg.sender),\n            \"NFT not owned\"\n        );\n\n        // Get the royalties for the creator addresses - use fallback if none set on chain\n        (\n            address[] memory addressesArray,\n            uint256[] memory creatorBasisPointsArray\n        ) = Royalties._getRoyaltyOverride(\n                addressManager.royaltyRegistry(),\n                nftContractAddress,\n                nftId,\n                creatorAddress,\n                creatorSaleBasisPoints\n            );\n\n        _registerForOwner(\n            msg.sender,\n            block.chainid, // Use current chain ID\n            nftContractAddress,\n            nftId,\n            addressesArray,\n            creatorBasisPointsArray,\n            optionBits,\n            ipfsMetadataHash\n        );\n    }\n\n    function registerNftFromBridge(\n        address owner,\n        uint256 chainId,\n        address nftContractAddress,\n        uint256 nftId,\n        address[] memory creatorAddresses,\n        uint256[] memory creatorSaleBasisPoints,\n        uint256 optionBits,\n        string calldata ipfsMetadataHash\n    ) external {\n        // Verify caller is Child Registrar from the bridge\n        require(msg.sender == addressManager.childRegistrar(), \"Not Bridge\");\n\n        _registerForOwner(\n            owner,\n            chainId,\n            nftContractAddress,\n            nftId,\n            creatorAddresses,\n            creatorSaleBasisPoints,\n            optionBits,\n            ipfsMetadataHash\n        );\n    }\n\n    /// @dev Register an NFT from an owner\n    /// @param owner - The current owner of the NFT - should be verified before calling\n    /// @param chainId - Chain where NFT lives\n    /// @param nftContractAddress - Address of NFT to be registered\n    /// @param nftId - ID of NFT to be registered\n    /// @param creatorAddresses - (optional) Address of the creator to give creatorSaleBasisPoints cut of Maker rewards\n    /// @param creatorSaleBasisPoints (optional) Basis points for the creator during a reaction sale\n    ///        This is the percentage of the Maker rewards to give to the Creator\n    ///        Basis points are percentage divided by 100 (e.g. 100 Basis Points is 1%)\n    /// @param optionBits - (optional) Params to allow owner to specify options or transformations\n    ///        performed during registration\n    function _registerForOwner(\n        address owner,\n        uint256 chainId,\n        address nftContractAddress,\n        uint256 nftId,\n        address[] memory creatorAddresses,\n        uint256[] memory creatorSaleBasisPoints,\n        uint256 optionBits,\n        string calldata ipfsMetadataHash\n    ) internal {\n        //\n        // \"Source\" - external NFT's\n        // sourceId is derived from [chainId, nftContractAddress, nftId]`\n        // Uses:\n        // - ReactionVault.buyReaction():\n        //    - check that sourceId is registered == true\n        //    - calc creator rewards for makerNFTs\n        // - ReactionVault.withdrawTakerRewards():\n        //    - check that sourceId is registered == true\n        //    - check msg.sender is registered as owner\n        //    - calc creator rewards for takerNFTs\n        //\n        // Generate source ID\n        uint256 sourceId = _deriveSourceId(chainId, nftContractAddress, nftId);\n\n        // add to mapping\n        sourceToDetails[sourceId] = NftDetails(\n            true,\n            owner,\n            creatorAddresses,\n            creatorSaleBasisPoints\n        );\n\n        //\n        // \"Transform\": source NFTs that have been \"transformed\" into fan art via optionBits param\n        // ID: derived from [MAKER_META_PREFIX, registrationSourceId, optionBits]\n        // Uses:\n        // ReactionVault._buyReaction()\n        //  - look up source to make sure its registered\n        //  - used to derive reactionMetaId\n\n        // Generate transform ID\n        uint256 transformId = uint256(\n            keccak256(abi.encode(MAKER_META_PREFIX, sourceId, optionBits))\n        );\n        // add to mapping\n        transformToSourceLookup[transformId] = sourceId;\n\n        // Emit event\n        emit Registered(\n            chainId,\n            nftContractAddress,\n            nftId,\n            owner,\n            creatorAddresses,\n            creatorSaleBasisPoints,\n            optionBits,\n            sourceId,\n            transformId,\n            ipfsMetadataHash\n        );\n    }\n\n    /// @dev Allow an NFT owner to deregister and remove capability for reactions to be sold.\n    /// Caller must currently own the NFT being deregistered\n    function deregisterNft(address nftContractAddress, uint256 nftId) external {\n        // Verify ownership\n        require(\n            verifyOwnership(nftContractAddress, nftId, msg.sender),\n            \"NFT not owned\"\n        );\n\n        _deregisterNftForOwner(\n            msg.sender,\n            block.chainid,\n            nftContractAddress,\n            nftId\n        );\n    }\n\n    function deRegisterNftFromBridge(\n        address owner,\n        uint256 chainId,\n        address nftContractAddress,\n        uint256 nftId\n    ) external {\n        // Verify caller is Child Registrar from the bridge\n        require(msg.sender == addressManager.childRegistrar(), \"Not Bridge\");\n\n        _deregisterNftForOwner(owner, chainId, nftContractAddress, nftId);\n    }\n\n    function _deregisterNftForOwner(\n        address owner,\n        uint256 chainId,\n        address nftContractAddress,\n        uint256 nftId\n    ) internal {\n        // generate source ID\n        uint256 sourceId = _deriveSourceId(chainId, nftContractAddress, nftId);\n\n        // Verify it is registered\n        NftDetails storage details = sourceToDetails[sourceId];\n        require(details.registered, \"NFT not registered\");\n\n        // Update the param\n        details.registered = false;\n\n        emit Deregistered(chainId, nftContractAddress, nftId, owner, sourceId);\n    }\n\n    function sourceToDetailsLookup(uint256 index)\n        external\n        view\n        returns (NftDetails memory)\n    {\n        return sourceToDetails[index];\n    }\n}\n"
    },
    "contracts/Maker/MakerRegistrarStorage.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"../Config/IAddressManager.sol\";\nimport \"./IMakerRegistrar.sol\";\n\n/// @title MakerRegistrarStorage\n/// @dev This contract will hold all local variables for the MakerRegistrar Contract\n/// When upgrading the protocol, inherit from this contract on the V2 version and change the\n/// MakerRegistrar to inherit from the later version.  This ensures there are no storage layout\n/// corruptions when upgrading.\nabstract contract MakerRegistrarStorageV1 is IMakerRegistrar {\n    /// @dev local reference to the address manager contract\n    IAddressManager public addressManager;\n\n    /// @dev prefix used in meta ID generation\n    string public constant MAKER_META_PREFIX = \"MAKER\";\n\n    /// @dev Mapping to look up source ID from meta ID key\n    mapping(uint256 => uint256) public override transformToSourceLookup;\n\n    /// @dev Mapping to look up nft details from source ID\n    mapping(uint256 => IMakerRegistrar.NftDetails) public sourceToDetails;\n}\n\n/// On the next version of the protocol, if new variables are added, put them in the below\n/// contract and use this as the inheritance chain.\n/**\ncontract MakerRegistrarStorageV2 is MakerRegistrarStorageV1 {\n  address newVariable;\n}\n */\n"
    },
    "contracts/Maker/NftOwnership.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\n\ninterface IPunk {\n    function punkIndexToAddress(uint256 index) external view returns (address);\n}\n\n/// @dev This is a library for other contracts to use that need to verify ownership of an NFT on the current chain.\n/// Since this only has internal functions, it will be inlined into the calling contract at\n/// compile time and does not need to be separately deployed on chain.\nlibrary NftOwnership {\n    /// @dev For the specified NFT, verify it is owned by the potential owner\n    function _verifyOwnership(\n        address nftContractAddress,\n        uint256 nftId,\n        address potentialOwner\n    ) internal view returns (bool) {\n        // Try ERC1155\n        try\n            IERC1155Upgradeable(nftContractAddress).balanceOf(\n                potentialOwner,\n                nftId\n            )\n        returns (uint256 balance) {\n            return balance > 0;\n        } catch {\n            // Ignore error\n        }\n\n        // Try ERC721\n        try IERC721Upgradeable(nftContractAddress).ownerOf(nftId) returns (\n            address foundOwner\n        ) {\n            return foundOwner == potentialOwner;\n        } catch {\n            // Ignore error\n        }\n\n        // Try CryptoPunk\n        try IPunk(nftContractAddress).punkIndexToAddress(nftId) returns (\n            address foundOwner\n        ) {\n            return foundOwner == potentialOwner;\n        } catch {\n            // Ignore error\n        }\n\n        return false;\n    }\n}\n"
    },
    "contracts/Royalties/Royalties.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"@manifoldxyz/royalty-registry-solidity/contracts/IRoyaltyEngineV1.sol\";\n\n/// @dev This library uses the Royalty Registry to see if royalties are configured for a specified NFT.\n/// The Royalty Registry looks at a number of sources to see if the original creator set a royalty\n/// configurationon the contract, such as EIP-2981, Manifold, Rarible, etc.\n/// See https://royaltyregistry.xyz/ for more details and deployed addresses.\n/// The output will be a list of addresses and a value that each should receive.\nlibrary Royalties {\n    /// @dev Validate royalties addresses and amounts arrays\n    function _validateRoyalties(\n        address payable[] memory recipients,\n        uint256[] memory amounts\n    ) internal pure returns (bool) {\n        // Verify royalties were found\n        if (recipients.length == 0) {\n            return false;\n        }\n\n        // Verify array lengths match\n        if (recipients.length != amounts.length) {\n            return false;\n        }\n\n        // Calculate the total rewards BP\n        uint256 totalRewardsBp = 0;\n\n        // Verify valid addresses and amounts\n        for (uint8 i = 0; i < recipients.length; i++) {\n            if (recipients[i] == address(0x0)) {\n                return false;\n            }\n\n            if (amounts[i] == 0 || amounts[i] > 10_000) {\n                return false;\n            }\n\n            totalRewardsBp += amounts[i];\n        }\n\n        // Total rewards across all addresses should not be above 100%\n        if (totalRewardsBp > 10_000) {\n            return false;\n        }\n\n        // No issues found, use them\n        return true;\n    }\n\n    /// @dev Gets the royalties for a specified NFT and uses the fallback values if none are found\n    /// A sale price of 10,000 will be used as the value to query since the protocol uses basis points\n    /// to track a percentage of value to send to the creators.  (10k basis points = 100%)\n    function _getRoyaltyOverride(\n        address royaltyRegistry,\n        address nftContractAddress,\n        uint256 nftId,\n        address fallbackCreator,\n        uint256 fallbackCreatorBasisPoints\n    )\n        internal\n        view\n        returns (\n            address[] memory creators,\n            uint256[] memory creatorSaleBasisPoints\n        )\n    {\n        // Query the royalty registry\n        if (royaltyRegistry != address(0x0)) {\n            // Use 10k to get back basis points\n            try\n                IRoyaltyEngineV1(royaltyRegistry).getRoyaltyView(\n                    nftContractAddress,\n                    nftId,\n                    10_000\n                )\n            returns (\n                address payable[] memory recipients,\n                uint256[] memory amounts\n            ) {\n                // Check to see if valid results were found\n                if (_validateRoyalties(recipients, amounts)) {\n                    // Convert to non-payable\n                    // https://github.com/ethereum/solidity/issues/5462\n                    address[] memory convertedAddresses = new address[](\n                        recipients.length\n                    );\n                    for (uint8 i = 0; i < recipients.length; i++) {\n                        convertedAddresses[i] = recipients[i];\n                    }\n\n                    // Use the valid royalties\n                    return (convertedAddresses, amounts);\n                }\n            } catch {\n                // Ignore an errors\n            }\n        }\n        // None found, use fallback address... address 0x0 means no creator rewards\n        address[] memory addressesArray = new address[](1);\n        addressesArray[0] = fallbackCreator;\n\n        // Use fallback value, and ensure it is not above 100%\n        require(fallbackCreatorBasisPoints <= 10_000, \"Invalid bp\");\n        uint256[] memory creatorBasisPointsArray = new uint256[](1);\n        creatorBasisPointsArray[0] = fallbackCreatorBasisPoints;\n\n        return (addressesArray, creatorBasisPointsArray);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@manifoldxyz/royalty-registry-solidity/contracts/IRoyaltyEngineV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Lookup engine interface\n */\ninterface IRoyaltyEngineV1 is IERC165 {\n\n    /**\n     * Get the royalty for a given token (address, id) and value amount.  Does not cache the bps/amounts.  Caches the spec for a given token address\n     * \n     * @param tokenAddress - The address of the token\n     * @param tokenId      - The id of the token\n     * @param value        - The value you wish to get the royalty of\n     *\n     * returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get\n     */\n    function getRoyalty(address tokenAddress, uint256 tokenId, uint256 value) external returns(address payable[] memory recipients, uint256[] memory amounts);\n\n    /**\n     * View only version of getRoyalty\n     * \n     * @param tokenAddress - The address of the token\n     * @param tokenId      - The id of the token\n     * @param value        - The value you wish to get the royalty of\n     *\n     * returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get\n     */\n    function getRoyaltyView(address tokenAddress, uint256 tokenId, uint256 value) external view returns(address payable[] memory recipients, uint256[] memory amounts);\n}"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/Config/AddressManagerStorage.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"../Permissions/IRoleManager.sol\";\nimport \"../Parameters/IParameterManager.sol\";\nimport \"../Maker/IMakerRegistrar.sol\";\nimport \"../Token/IStandard1155.sol\";\nimport \"./IAddressManager.sol\";\n\n/// @title AddressManagerStorage\n/// @dev This contract will hold all local variables for the AddressManager Contract\n/// When upgrading the protocol, inherit from this contract on the V2 version and change the\n/// AddressManager to inherit from the later version.  This ensures there are no storage layout\n/// corruptions when upgrading.\nabstract contract AddressManagerStorageV1 is IAddressManager {\n    /// @dev Input error for 0 value param\n    string internal constant ZERO_INPUT = \"Invalid 0 input\";\n\n    /// @dev Local reference to the role manager contract\n    IRoleManager public roleManager;\n\n    /// @dev Local reference to the payment manager contract\n    IParameterManager public parameterManager;\n\n    /// @dev Local reference to the maker registrar contract\n    IMakerRegistrar public makerRegistrar;\n\n    /// @dev Local reference to the reaction NFT contract\n    IStandard1155 public reactionNftContract;\n\n    /// @dev Local reference to the default curator vault\n    ICuratorVault public defaultCuratorVault;\n\n    /// @dev Local reference to the L2 bridge registrar\n    address public childRegistrar;\n\n    /// @dev Address of the Royalty Registry contract\n    address public royaltyRegistry;\n}\n\n/// On the next version of the protocol, if new variables are added, put them in the below\n/// contract and use this as the inheritance chain.\nabstract contract AddressManagerStorageV2 is AddressManagerStorageV1 {\n    /// @dev Address of the Like Token Factory\n    address public likeTokenFactory;\n}\n\n/// On the next version of the protocol, if new variables are added, put them in the below\n/// contract and use this as the inheritance chain.\n/**\ncontract AddressManagerStorageV3 is AddressManagerStorageV2 {\n  address newVariable;\n}\n */\n"
    },
    "contracts/Parameters/ParameterManagerStorage.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"../Config/IAddressManager.sol\";\nimport \"./IParameterManager.sol\";\nimport \"../Token/IWMATIC.sol\";\n\n/// @title ParameterManagerStorage\n/// @dev This contract will hold all local variables for the ParameterManager Contract\n/// When upgrading the protocol, inherit from this contract on the V2 version and change the\n/// ParameterManager to inherit from the later version.  This ensures there are no storage layout\n/// corruptions when upgrading.\nabstract contract ParameterManagerStorageV1 is IParameterManager {\n    /// @dev Input error for 0 value param\n    string internal constant ZERO_INPUT = \"Invalid 0 input\";\n\n    /// @dev local reference to the address manager contract\n    IAddressManager public addressManager;\n\n    /// @dev The payment token used to buy reactions\n    IWMATIC public paymentToken;\n\n    /// @dev The amount each reaction costs in paymentToken\n    uint256 public reactionPrice;\n\n    /// @dev Basis points for the curator liability during a reaction sale\n    /// Basis points are percentage divided by 100 (e.g. 100 Basis Points is 1%)\n    uint256 public saleCuratorLiabilityBasisPoints;\n\n    /// @dev Basis points for the referrer during a reaction sale\n    /// Basis points are percentage divided by 100 (e.g. 100 Basis Points is 1%)\n    uint256 public saleReferrerBasisPoints;\n\n    /// @dev Basis points for the taker NFT owner.\n    /// This is the percentage of the Curator Liability being assigned to the taker\n    /// Basis points are percentage divided by 100 (e.g. 100 Basis Points is 1%)\n    uint256 public spendTakerBasisPoints;\n\n    /// @dev Basis points for the spend referrer.\n    /// This is the percentage of the Curator Liability being assigned to the referrer\n    /// Basis points are percentage divided by 100 (e.g. 100 Basis Points is 1%)\n    uint256 public spendReferrerBasisPoints;\n\n    /// @dev Mapping of the approved curator vaults (other than the default)\n    /// If set to true then it is allowed to be used.\n    mapping(address => bool) public approvedCuratorVaults;\n}\n\nabstract contract ParameterManagerStorageV2 is ParameterManagerStorageV1 {\n    /// @dev address of the blockchain's wrapped token, eg, WMATIC\n    /// This allows the contracts to distinguish between payments in WMATIC vs, eg, USDC\n    IERC20Upgradeable public nativeWrappedToken;\n\n    /// @dev Amount of reactions (quantity) allowed when reacting for free\n    /// If set to true then it is allowed to be used.\n    uint256 public freeReactionLimit;\n}\n\n/// On the next version of the protocol, if new variables are added, put them in the below\n/// contract and use this as the inheritance chain.\n/**\ncontract ParameterManagerStorageV3 is ParameterManagerStorageV2 {\n  address newVariable;\n}\n */\n"
    },
    "contracts/Parameters/ParameterManager.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"./ParameterManagerStorage.sol\";\nimport \"../Config/IAddressManager.sol\";\nimport \"../Token/IWMATIC.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/// @dev Note: This contract is protected via a permissioned account set in the role manager.  Caution should\n/// be used as the role owner could renounce the role leaving all future actions disabled.  Additionally,\n/// if a malicious account was able to obtain the role, they could use it to set values to malicious values.\n/// See the public documentation website for more details.\ncontract ParameterManager is Initializable, ParameterManagerStorageV2 {\n    /// @dev Verifies with the role manager that the calling address has ADMIN role\n    modifier onlyAdmin() {\n        require(\n            addressManager.roleManager().isParameterManagerAdmin(msg.sender),\n            \"Not Admin\"\n        );\n        _;\n    }\n\n    /// @dev Events emitted on updates\n    event PaymentTokenUpdated(IWMATIC newValue);\n    event ReactionPriceUpdated(uint256 newValue);\n    event SaleCuratorLiabilityBasisPointsUpdated(uint256 newValue);\n    event SaleReferrerBasisPointsUpdated(uint256 newValue);\n    event SpendTakerBasisPointsUpdated(uint256 newValue);\n    event SpendReferrerBasisPointsUpdated(uint256 newValue);\n    event ApprovedCuratorVaultsUpdated(address vault, bool approved);\n    event NativeWrappedTokenUpdated(IERC20Upgradeable newValue);\n    event FreeReactionLimitUpdated(uint256 reactionLimit);\n\n    /// @dev initializer to call after deployment, can only be called once\n    function initialize(IAddressManager _addressManager) public initializer {\n        require(address(_addressManager) != address(0x0), ZERO_INPUT);\n        addressManager = _addressManager;\n    }\n\n    /// @dev Setter for the payment token\n    function setPaymentToken(IWMATIC _paymentToken) external onlyAdmin {\n        require(address(_paymentToken) != address(0x0), ZERO_INPUT);\n        paymentToken = _paymentToken;\n        emit PaymentTokenUpdated(_paymentToken);\n    }\n\n    /// @dev Setter for the reaction price\n    function setReactionPrice(uint256 _reactionPrice) external onlyAdmin {\n        require(_reactionPrice != 0, ZERO_INPUT);\n        reactionPrice = _reactionPrice;\n        emit ReactionPriceUpdated(_reactionPrice);\n    }\n\n    /// @dev Setter for the reaction price\n    function setSaleCuratorLiabilityBasisPoints(\n        uint256 _saleCuratorLiabilityBasisPoints\n    ) external onlyAdmin {\n        require(_saleCuratorLiabilityBasisPoints != 0, ZERO_INPUT);\n        require(_saleCuratorLiabilityBasisPoints <= 10_000, \"Invalid bp\");\n        saleCuratorLiabilityBasisPoints = _saleCuratorLiabilityBasisPoints;\n        emit SaleCuratorLiabilityBasisPointsUpdated(\n            _saleCuratorLiabilityBasisPoints\n        );\n    }\n\n    /// @dev Setter for the reaction price\n    function setSaleReferrerBasisPoints(uint256 _saleReferrerBasisPoints)\n        external\n        onlyAdmin\n    {\n        require(_saleReferrerBasisPoints != 0, ZERO_INPUT);\n        require(_saleReferrerBasisPoints <= 10_000, \"Invalid bp\");\n        saleReferrerBasisPoints = _saleReferrerBasisPoints;\n        emit SaleReferrerBasisPointsUpdated(_saleReferrerBasisPoints);\n    }\n\n    /// @dev Setter for the spend taker basis points\n    function setSpendTakerBasisPoints(uint256 _spendTakerBasisPoints)\n        external\n        onlyAdmin\n    {\n        require(_spendTakerBasisPoints != 0, ZERO_INPUT);\n        require(_spendTakerBasisPoints <= 10_000, \"Invalid bp\");\n        spendTakerBasisPoints = _spendTakerBasisPoints;\n        emit SpendTakerBasisPointsUpdated(_spendTakerBasisPoints);\n    }\n\n    /// @dev Setter for the spend referrer basis points\n    function setSpendReferrerBasisPoints(uint256 _spendReferrerBasisPoints)\n        external\n        onlyAdmin\n    {\n        require(_spendReferrerBasisPoints != 0, ZERO_INPUT);\n        require(_spendReferrerBasisPoints <= 10_000, \"Invalid bp\");\n        spendReferrerBasisPoints = _spendReferrerBasisPoints;\n        emit SpendReferrerBasisPointsUpdated(_spendReferrerBasisPoints);\n    }\n\n    /// @dev Setter for the list of curator vaults allowed to be used\n    function setApprovedCuratorVaults(address vault, bool approved)\n        external\n        onlyAdmin\n    {\n        require(vault != address(0x0), ZERO_INPUT);\n        approvedCuratorVaults[vault] = approved;\n        emit ApprovedCuratorVaultsUpdated(vault, approved);\n    }\n\n    /// @dev Setter for the native wrapped ERC20 token (e.g. WMATIC)\n    function setNativeWrappedToken(IERC20Upgradeable _nativeWrappedToken)\n        external\n        onlyAdmin\n    {\n        require(address(_nativeWrappedToken) != address(0x0), ZERO_INPUT);\n        nativeWrappedToken = _nativeWrappedToken;\n        emit NativeWrappedTokenUpdated(_nativeWrappedToken);\n    }\n\n    /// @dev Setter for the amount of reactions allowed per free reaction\n    function setFreeReactionLimit(uint256 _reactionLimit) external onlyAdmin {\n        require(_reactionLimit > 0, ZERO_INPUT);\n        freeReactionLimit = _reactionLimit;\n        emit FreeReactionLimitUpdated(_reactionLimit);\n    }\n}\n"
    },
    "contracts/Config/AddressManager.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"./AddressManagerStorage.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/// @dev Note: This contract is protected via a permissioned account set in the role manager.  Caution should\n/// be used as the role owner could renounce the role leaving all future actions disabled.  Additionally,\n/// if a malicious account was able to obtain the role, they could use it to set values to malicious addresses.\n/// See the public documentation website for more details.\ncontract AddressManager is Initializable, AddressManagerStorageV2 {\n    /// @dev Verifies with the role manager that the calling address has ADMIN role\n    modifier onlyAdmin() {\n        require(roleManager.isAddressManagerAdmin(msg.sender), \"Not Admin\");\n        _;\n    }\n\n    /// @dev Events emitted on updates\n    event RoleManagerAddressUpdated(address newAddress);\n    event ParameterManagerAddressUpdated(address newAddress);\n    event MakerRegistrarAddressUpdated(address newAddress);\n    event ReactionNftContractAddressUpdated(address newAddress);\n    event DefaultCuratorVaultAddressUpdated(address newAddress);\n    event ChildRegistrarAddressUpdated(address newAddress);\n    event RoyaltyRegistryAddressUpdated(address newAddress);\n    event LikeTokenFactoryAddressUpdated(address newAddress);\n\n    /// @dev initializer to call after deployment, can only be called once\n    function initialize(IRoleManager _roleManager) public initializer {\n        require(address(_roleManager) != address(0x0), ZERO_INPUT);\n        roleManager = _roleManager;\n    }\n\n    /// @dev Setter for the role manager address\n    function setRoleManager(IRoleManager _roleManager) external onlyAdmin {\n        // Sanity check\n        require(address(_roleManager) != address(0x0), ZERO_INPUT);\n\n        // If the role manager address gets corrupted then this contract is DOA\n        // since no future updates can be performed via permission checks.\n        // Ensure the target address is valid and configured by requiring the current admin\n        // making this call is an admin on the new contract\n        require(_roleManager.isAdmin(msg.sender), \"RM invalid\");\n\n        roleManager = _roleManager;\n        emit RoleManagerAddressUpdated(address(_roleManager));\n    }\n\n    /// @dev Setter for the role manager address\n    function setParameterManager(IParameterManager _parameterManager)\n        external\n        onlyAdmin\n    {\n        require(address(_parameterManager) != address(0x0), ZERO_INPUT);\n        parameterManager = _parameterManager;\n        emit ParameterManagerAddressUpdated(address(_parameterManager));\n    }\n\n    /// @dev Setter for the maker registrar address\n    function setMakerRegistrar(IMakerRegistrar _makerRegistrar)\n        external\n        onlyAdmin\n    {\n        require(address(_makerRegistrar) != address(0x0), ZERO_INPUT);\n        makerRegistrar = _makerRegistrar;\n        emit MakerRegistrarAddressUpdated(address(_makerRegistrar));\n    }\n\n    /// @dev Setter for the maker registrar address\n    function setReactionNftContract(IStandard1155 _reactionNftContract)\n        external\n        onlyAdmin\n    {\n        require(address(_reactionNftContract) != address(0x0), ZERO_INPUT);\n        reactionNftContract = _reactionNftContract;\n        emit ReactionNftContractAddressUpdated(address(_reactionNftContract));\n    }\n\n    /// @dev Setter for the default curator vault address\n    function setDefaultCuratorVault(ICuratorVault _defaultCuratorVault)\n        external\n        onlyAdmin\n    {\n        require(address(_defaultCuratorVault) != address(0x0), ZERO_INPUT);\n        defaultCuratorVault = _defaultCuratorVault;\n        emit DefaultCuratorVaultAddressUpdated(address(_defaultCuratorVault));\n    }\n\n    /// @dev Setter for the L2 bridge registrar\n    function setChildRegistrar(address _childRegistrar) external onlyAdmin {\n        require(address(_childRegistrar) != address(0x0), ZERO_INPUT);\n        childRegistrar = _childRegistrar;\n        emit ChildRegistrarAddressUpdated(address(_childRegistrar));\n    }\n\n    /// @dev Setter for the address of the royalty registry\n    function setRoyaltyRegistry(address _royaltyRegistry) external onlyAdmin {\n        // We DO allow the royalty registry to be set to 0x0 as this disables the lookup\n        royaltyRegistry = _royaltyRegistry;\n        emit RoyaltyRegistryAddressUpdated(royaltyRegistry);\n    }\n\n    /// @dev Setter for the address of the Like Token Factory\n    function setLikeTokenFactory(address _likeTokenFactory) external onlyAdmin {\n        // We DO allow the Like Token Factory to be set to 0x0 as this disables the functionality\n        likeTokenFactory = _likeTokenFactory;\n        emit LikeTokenFactoryAddressUpdated(likeTokenFactory);\n    }\n}\n"
    },
    "contracts/Likes/Token/LikeToken1155.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\";\nimport \"./ILikeToken1155.sol\";\nimport \"./LikeToken1155Storage.sol\";\n\n/// @title LikeToken1155\n/// @dev This contract implements the 1155 standard and tracks \"Likes\" in the RaRa platform.\n/// When a user reacts to a target NFT, they will be issued a like token.\n/// Only a single token per unique ID will ever be issued, and IDs will be incremented in an ascending counter,\n///   on each mint.  Only the Like Token Factory can trigger mints.\n\n/// These tokens are non-transferrable.\n/// An owner may burn a token from their own wallet.\ncontract LikeToken1155 is\n    ILikeToken1155,\n    ERC1155Upgradeable,\n    LikeToken1155StorageV1\n{\n    // Always minting and burning 1 token at a time\n    uint8 public constant TOKEN_AMOUNT = 1;\n\n    /// @dev initializer to call after deployment, can only be called once\n    function initialize(\n        string memory _uri,\n        address _addressManager,\n        string memory _contractUri\n    ) public initializer {\n        __ERC1155_init(_uri);\n\n        addressManager = IAddressManager(_addressManager);\n\n        contractURI = _contractUri;\n    }\n\n    /// @dev verifies that the calling account is the like token factory\n    modifier onlyLikeTokenFactory() {\n        require(msg.sender == addressManager.likeTokenFactory(), \"Not Factory\");\n        _;\n    }\n\n    /// @dev restrict updates\n    modifier onlyNftAdmin() {\n        IRoleManager roleManager = IRoleManager(addressManager.roleManager());\n        require(roleManager.isReactionNftAdmin(msg.sender), \"Not NFT Admin\");\n        _;\n    }\n\n    /// @dev Allows reaction minter role to mint a like token\n    function mint(address to) external onlyLikeTokenFactory {\n        // Increment the id counter\n        idCount = idCount + 1;\n\n        // Mint the token\n        _mint(to, idCount, TOKEN_AMOUNT, new bytes(0));\n    }\n\n    /// @dev Allows a like token holder to burn their own token\n    function burn(uint256 id) external {\n        // Burn the token (balance check will be done inside this call)\n        _burn(msg.sender, id, TOKEN_AMOUNT);\n    }\n\n    /// @dev Like Tokens are non-transferrable to other accounts.\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override(ERC1155Upgradeable) {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        // Only allow minting or burning.  Mints have \"from address\" of 0x0 and burns have \"to address\" of 0x0.\n        require(\n            from == address(0x0) || to == address(0x0),\n            \"Like transfer restricted\"\n        );\n    }\n\n    /// @dev update contract URI\n    function setContractUri(string memory _contractUri)\n        external\n        onlyNftAdmin\n        returns (bool success)\n    {\n        contractURI = _contractUri;\n\n        return true;\n    }\n}\n"
    },
    "contracts/Likes/Token/LikeToken1155Storage.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"../../Config/IAddressManager.sol\";\n\n/// @title LikeToken1155StorageV1\n/// @dev This contract will hold all local variables for the LikeToken1155 Contract\n/// When upgrading the protocol, inherit from this contract on the V2 version and change the\n/// LikeToken1155 to inherit from the later version.  This ensures there are no storage layout\n/// corruptions when upgrading.\ncontract LikeToken1155StorageV1 {\n    IAddressManager public addressManager;\n    uint256 public idCount;\n    string public contractURI;\n}\n\n/// On the next version of the protocol, if new variables are added, put them in the below\n/// contract and use this as the inheritance chain.\n/**\ncontract LikeToken1155StorageV2 is LikeToken1155StorageV1 {\n  address newVariable;\n}\n */\n"
    },
    "contracts/Token/Standard1155.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\";\nimport \"./IStandard1155.sol\";\nimport \"./Standard1155Storage.sol\";\n\n/// @title Standard1155\n/// @dev This contract implements the 1155 standard\nabstract contract Standard1155 is\n    IStandard1155,\n    ERC1155Upgradeable,\n    Standard1155StorageV2\n{\n    /// @dev initializer to call after deployment, can only be called once\n    function initialize(\n        string memory _uri,\n        address _addressManager,\n        string memory _contractUri\n    ) public initializer {\n        __ERC1155_init(_uri);\n\n        addressManager = IAddressManager(_addressManager);\n\n        contractURI = _contractUri;\n    }\n}\n"
    },
    "contracts/Token/Standard1155Storage.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"../Config/IAddressManager.sol\";\n\n/// @title Standard1155StorageV1\n/// @dev This contract will hold all local variables for the Standard1155 Contract\n/// When upgrading the protocol, inherit from this contract on the V2 version and change the\n/// Standard1155 to inherit from the later version.  This ensures there are no storage layout\n/// corruptions when upgrading.\ncontract Standard1155StorageV1 {\n    IAddressManager public addressManager;\n}\n\n/// On the next version of the protocol, if new variables are added, put them in the below\n/// contract and use this as the inheritance chain.\ncontract Standard1155StorageV2 is Standard1155StorageV1 {\n    string public contractURI;\n}\n"
    },
    "contracts/Testing/TestErc1155.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"../Token/Standard1155.sol\";\n\n/// @title TestErc1155\n/// @dev This contract implements the ERC115 standard and is used for unit testing purposes only\n/// Anyone can mint or burn tokens\ncontract TestErc1155 is Standard1155 {\n    /// @dev Allows anyone to mint tokens\n    function mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) external {\n        _mint(to, id, amount, data);\n    }\n\n    /// @dev allows anyone to burn tokens\n    function burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) external {\n        _burn(from, id, amount);\n    }\n}\n"
    },
    "contracts/Reactions/NFT/ReactionNft1155.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"../../Token/Standard1155.sol\";\n\n/// @title ReactionNft1155\n/// @dev This contract will be used to track Reaction NFTs in the protocol.\n/// Only the NFT Minter role can mint tokens\n/// Only the NFT Burner role can burn tokens\n/// Note: This contract is protected via a permissioned account set in the role manager.  Caution should\n/// be used as the role owner could renounce the role leaving all future actions disabled.  Additionally,\n/// if a malicious account was able to obtain the role, they could use it to mint or burn reactions.\n/// See the public documentation website for more details.\ncontract ReactionNft1155 is Standard1155 {\n    /// @dev verifies that the calling account has a role to enable minting tokens\n    modifier onlyNftAdmin() {\n        IRoleManager roleManager = IRoleManager(addressManager.roleManager());\n        require(roleManager.isReactionNftAdmin(msg.sender), \"Not NFT Admin\");\n        _;\n    }\n\n    /// @dev Allows reaction minter role to mint tokens\n    function mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) external onlyNftAdmin {\n        _mint(to, id, amount, data);\n    }\n\n    /// @dev Allows reaction burner role to burn tokens\n    function burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) external onlyNftAdmin {\n        _burn(from, id, amount);\n    }\n\n    /// @dev Reaction NFTs are non-transferrable to other accounts.\n    /// They are only allowed to be bought or spent.\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override(ERC1155Upgradeable) {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        // Only allow minting or burning.  Mints have \"from address\" of 0x0 and burns have \"to address\" of 0x0.\n        require(\n            from == address(0x0) || to == address(0x0),\n            \"Reaction transfer restricted\"\n        );\n    }\n\n    function setContractUri(string memory _contractUri)\n        external\n        onlyNftAdmin\n        returns (bool success)\n    {\n        contractURI = _contractUri;\n\n        return true;\n    }\n}\n"
    },
    "contracts/CuratorVault/Token/CuratorToken1155.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"../../Token/Standard1155.sol\";\n\n/// @title CuratorToken1155\n/// @dev This contract will be used to track Curator Token ownership\n/// Only the Curator Vault can mint or burn tokens\n/// Note: This contract is protected via a permissioned account set in the role manager.  Caution should\n/// be used as the role owner could renounce the role leaving all future actions disabled.  Additionally,\n/// if a malicious account was able to obtain the role, they could use it to mint or burn tokens.\n/// See the public documentation website for more details.\ncontract CuratorToken1155 is Standard1155 {\n    /// @dev verifies that the calling account is the curator vault\n    modifier onlyCuratorTokenAdmin() {\n        require(\n            addressManager.roleManager().isCuratorTokenAdmin(msg.sender),\n            \"Not Admin\"\n        );\n        _;\n    }\n\n    /// @dev Allows reaction minter role to mint tokens\n    function mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) external onlyCuratorTokenAdmin {\n        _mint(to, id, amount, data);\n    }\n\n    /// @dev Allows reaction burner role to burn tokens\n    function burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) external onlyCuratorTokenAdmin {\n        _burn(from, id, amount);\n    }\n\n    function setContractUri(string memory _contractUri)\n        external\n        onlyCuratorTokenAdmin\n        returns (bool success)\n    {\n        contractURI = _contractUri;\n\n        return true;\n    }\n}\n"
    },
    "contracts/Testing/WMATIC.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\n// This contract is sourced from https://polygonscan.com/address/0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270#code\n// for testing purposes ONLY.  Slight modifications were made to support the newer compiler version.\n\n/**\n *Submitted for verification at polygonscan.com on 2021-06-09\n */\n\n// https://firebird.finance DeFi multi-chain yield farms deployer & DEXs aggregator.\n\n// Copyright (C) 2015, 2016, 2017 Dapphub\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\ncontract WMATIC {\n    string public name = \"Wrapped Matic\";\n    string public symbol = \"WMATIC\";\n    uint8 public decimals = 18;\n\n    event Approval(address indexed src, address indexed guy, uint256 wad);\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\n    event Deposit(address indexed dst, uint256 wad);\n    event Withdrawal(address indexed src, uint256 wad);\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    receive() external payable {\n        deposit();\n    }\n\n    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    function withdraw(uint256 wad) public {\n        require(balanceOf[msg.sender] >= wad, \"No balance\");\n        balanceOf[msg.sender] -= wad;\n        payable(msg.sender).transfer(wad);\n        emit Withdrawal(msg.sender, wad);\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function approve(address guy, uint256 wad) public returns (bool) {\n        allowance[msg.sender][guy] = wad;\n        emit Approval(msg.sender, guy, wad);\n        return true;\n    }\n\n    function transfer(address dst, uint256 wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 wad\n    ) public returns (bool) {\n        require(\n            balanceOf[src] >= wad,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n\n        if (\n            src != msg.sender &&\n            allowance[src][msg.sender] != uint256(2**256 - 1)\n        ) {\n            require(\n                allowance[src][msg.sender] >= wad,\n                \"ERC20: insufficient allowance\"\n            );\n            allowance[src][msg.sender] -= wad;\n        }\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        emit Transfer(src, dst, wad);\n\n        return true;\n    }\n}\n\n/*\n                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n\n*/\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
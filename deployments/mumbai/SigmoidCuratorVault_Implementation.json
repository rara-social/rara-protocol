{
  "address": "0xc6C1c0E05699A6230c00a509eB1bF13c93Ba8c53",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "curatorTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20Upgradeable",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paymentTokenPaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "curatorTokensBought",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isTakerPosition",
          "type": "bool"
        }
      ],
      "name": "CuratorTokensBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "curatorTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paymentTokenRefunded",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "curatorTokensSold",
          "type": "uint256"
        }
      ],
      "name": "CuratorTokensSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "a",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressManager",
      "outputs": [
        {
          "internalType": "contract IAddressManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "b",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "paymentAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "mintToAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isTakerPosition",
          "type": "bool"
        }
      ],
      "name": "buyCuratorTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "c",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "a",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "b",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "c",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "currentTokenSupply",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "paymentReserves",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "tokensToSell",
          "type": "int256"
        }
      ],
      "name": "calculatePaymentReturnedFromTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "a",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "b",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "c",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "currentTokensSupply",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "paymentReserves",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "paymentToSpend",
          "type": "int256"
        }
      ],
      "name": "calculateTokensBoughtFromPayment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "curatorTokenSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curatorTokens",
      "outputs": [
        {
          "internalType": "contract IStandard1155",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "paymentToken",
          "type": "address"
        }
      ],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressManager",
          "type": "address"
        },
        {
          "internalType": "contract IStandard1155",
          "name": "_curatorTokens",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_b",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_c",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokensToBurn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "refundToAddress",
          "type": "address"
        }
      ],
      "name": "sellCuratorTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb9182986fbbce57cfc99c0cb944eb4359cff80faa3bae6eaaef040057f9f45cc",
  "receipt": {
    "to": null,
    "from": "0x8f1809FA5DDcf8275cf9C92fCeF40B2154a01022",
    "contractAddress": "0xc6C1c0E05699A6230c00a509eB1bF13c93Ba8c53",
    "transactionIndex": 2,
    "gasUsed": "2260522",
    "logsBloom": "0x
    "blockHash": "0x38211d2a8b03eab3beda217d4c735673c1c64cf3ddd840dd74ed324c8cf7f914",
    "transactionHash": "0xb9182986fbbce57cfc99c0cb944eb4359cff80faa3bae6eaaef040057f9f45cc",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 29173541,
        "transactionHash": "0xb9182986fbbce57cfc99c0cb944eb4359cff80faa3bae6eaaef040057f9f45cc",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008f1809fa5ddcf8275cf9c92fcef40b2154a01022",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001413d4fae85bd600000000000000000000000000000000000000000000000000a2198b1dbb2e09000000000000000000000000000000000000000000000add874d52087d930833000000000000000000000000000000000000000000000000008e05b622d2d233000000000000000000000000000000000000000000000add876165dd787b6409",
        "logIndex": 5,
        "blockHash": "0x38211d2a8b03eab3beda217d4c735673c1c64cf3ddd840dd74ed324c8cf7f914"
      }
    ],
    "blockNumber": 29173541,
    "cumulativeGasUsed": "2570794",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e5086af1310b7ca1d6194e2a0e3afebd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"curatorTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentTokenPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curatorTokensBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isTakerPosition\",\"type\":\"bool\"}],\"name\":\"CuratorTokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"curatorTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentTokenRefunded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curatorTokensSold\",\"type\":\"uint256\"}],\"name\":\"CuratorTokensSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"a\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressManager\",\"outputs\":[{\"internalType\":\"contract IAddressManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"b\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"mintToAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isTakerPosition\",\"type\":\"bool\"}],\"name\":\"buyCuratorTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"c\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"a\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"b\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"c\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"currentTokenSupply\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"paymentReserves\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"tokensToSell\",\"type\":\"int256\"}],\"name\":\"calculatePaymentReturnedFromTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"a\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"b\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"c\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"currentTokensSupply\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"paymentReserves\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"paymentToSpend\",\"type\":\"int256\"}],\"name\":\"calculateTokensBoughtFromPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"curatorTokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curatorTokens\",\"outputs\":[{\"internalType\":\"contract IStandard1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressManager\",\"type\":\"address\"},{\"internalType\":\"contract IStandard1155\",\"name\":\"_curatorTokens\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_c\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokensToBurn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refundToAddress\",\"type\":\"address\"}],\"name\":\"sellCuratorTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract tracks tokens in a sigmoid bonding curve per Taker NFT. When users spend reactions against a Taker NFT, it will use the Curator Liability to buy curator tokens against that Taker NFT and allocate to various parties. The curator tokens will be priced via the sigmoid curve.  The params that control the shape of the sigmoid are set in the parameter manager. At any point in time the owners of the curator tokens can sell them back to the bonding curve. Note: This contract is protected via a permissioned account set in the role manager.  Caution should be used as the role owner could renounce the role leaving all future actions disabled.  Additionally, if a malicious account was able to obtain the role, they could use it to set values to malicious values. See the public documentation website for more details.\",\"events\":{\"CuratorTokensBought(uint256,uint256,address,uint256,address,uint256,uint256,bool)\":{\"details\":\"Event triggered when curator tokens are purchased\"},\"CuratorTokensSold(uint256,uint256,uint256)\":{\"details\":\"Event triggered when curator tokens are sold\"}},\"kind\":\"dev\",\"methods\":{\"buyCuratorTokens(uint256,address,uint256,address,uint256,address,bool)\":{\"details\":\"Buy curator Tokens when reactions are spent. The reaction vault is the only account allowed to call this.\",\"returns\":{\"_0\":\"Returns the amount of curator tokens purchased.\"}},\"calculatePaymentReturnedFromTokens(int256,int256,int256,int256,int256,int256)\":{\"details\":\"Selling Tokens into the curve will return payment tokens to be refunded\",\"params\":{\"a\":\"maxPrice of the curve / 2\",\"b\":\"inflectionPoint of the curve\",\"c\":\"slope steepness of the curve\",\"currentTokenSupply\":\"current amount of Tokens in the curve\",\"paymentReserves\":\"current mount of payment reserves in the curve\",\"tokensToSell\":\"amount the of Tokens the user wants to sell\"}},\"calculateTokensBoughtFromPayment(int256,int256,int256,int256,int256,int256)\":{\"details\":\"Buying into the curve with payment tokens will return Tokens amount to be bought\",\"params\":{\"a\":\"maxPrice of the curve / 2\",\"b\":\"inflectionPoint of the curve\",\"c\":\"slope steepness of the curve\",\"currentTokensSupply\":\"current amount of Tokens in the curve\",\"paymentReserves\":\"current mount of payment reserves in the curve\",\"paymentToSpend\":\"amount the of payment tokens to buy Tokens with\"}},\"getTokenId(uint256,address,uint256,address)\":{\"details\":\"get a unique token ID for a given nft address and nft ID\"},\"initialize(address,address,uint256,uint256,uint256)\":{\"details\":\"can only be called once\",\"params\":{\"_a\":\"- bonding curve param a\",\"_addressManager\":\"- address manager in the protocol\",\"_b\":\"- bonding curve param b\",\"_c\":\"- bonding curve param c\",\"_curatorTokens\":\"- curator token contract address\"}},\"sellCuratorTokens(uint256,address,uint256,address,uint256,address)\":{\"details\":\"Sell curator tokens back into the bonding curve. Any holder who owns tokens can sell them back\",\"returns\":{\"_0\":\"Returns the amount of payment tokens received for the curator tokens.\"}}},\"title\":\"SigmoidCuratorVault\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address,address,uint256,uint256,uint256)\":{\"notice\":\"initializer to call after deployment,\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SigmoidCuratorVault/SigmoidCuratorVault.sol\":\"SigmoidCuratorVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"contracts/Config/IAddressManager.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"../Permissions/IRoleManager.sol\\\";\\nimport \\\"../Parameters/IParameterManager.sol\\\";\\nimport \\\"../Maker/IMakerRegistrar.sol\\\";\\nimport \\\"../Token/IStandard1155.sol\\\";\\nimport \\\"../Reactions/IReactionVault.sol\\\";\\nimport \\\"../CuratorVault/ICuratorVault.sol\\\";\\n\\ninterface IAddressManager {\\n    /// @dev Getter for the role manager address\\n    function roleManager() external returns (IRoleManager);\\n\\n    /// @dev Setter for the role manager address\\n    function setRoleManager(IRoleManager _roleManager) external;\\n\\n    /// @dev Getter for the role manager address\\n    function parameterManager() external returns (IParameterManager);\\n\\n    /// @dev Setter for the role manager address\\n    function setParameterManager(IParameterManager _parameterManager) external;\\n\\n    /// @dev Getter for the maker registrar address\\n    function makerRegistrar() external returns (IMakerRegistrar);\\n\\n    /// @dev Setter for the maker registrar address\\n    function setMakerRegistrar(IMakerRegistrar _makerRegistrar) external;\\n\\n    /// @dev Getter for the reaction NFT contract address\\n    function reactionNftContract() external returns (IStandard1155);\\n\\n    /// @dev Setter for the reaction NFT contract address\\n    function setReactionNftContract(IStandard1155 _reactionNftContract)\\n        external;\\n\\n    /// @dev Getter for the default Curator Vault contract address\\n    function defaultCuratorVault() external returns (ICuratorVault);\\n\\n    /// @dev Setter for the default Curator Vault contract address\\n    function setDefaultCuratorVault(ICuratorVault _defaultCuratorVault)\\n        external;\\n\\n    /// @dev Getter for the L2 bridge registrar\\n    function childRegistrar() external returns (address);\\n\\n    /// @dev Setter for the L2 bridge registrar\\n    function setChildRegistrar(address _childRegistrar) external;\\n\\n    /// @dev Getter for the address of the royalty registry\\n    function royaltyRegistry() external returns (address);\\n\\n    /// @dev Setter for the address of the royalty registry\\n    function setRoyaltyRegistry(address _royaltyRegistry) external;\\n}\\n\",\"keccak256\":\"0x81fcb53edee0855c6654f161d0f34980ea5d06e8950039b444c507ca7629afd8\",\"license\":\"GPL-3.0\"},\"contracts/CuratorVault/ICuratorVault.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"../Token/IStandard1155.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n/// @dev Interface for the curator vault\\ninterface ICuratorVault {\\n    function getTokenId(\\n        uint256 nftChainId,\\n        address nftAddress,\\n        uint256 nftId,\\n        IERC20Upgradeable paymentToken\\n    ) external returns (uint256);\\n\\n    function buyCuratorTokens(\\n        uint256 nftChainId,\\n        address nftAddress,\\n        uint256 nftId,\\n        IERC20Upgradeable paymentToken,\\n        uint256 paymentAmount,\\n        address mintToAddress,\\n        bool isTakerPosition\\n    ) external returns (uint256);\\n\\n    function sellCuratorTokens(\\n        uint256 nftChainId,\\n        address nftAddress,\\n        uint256 nftId,\\n        IERC20Upgradeable paymentToken,\\n        uint256 tokensToBurn,\\n        address refundToAddress\\n    ) external returns (uint256);\\n\\n    function curatorTokens() external returns (IStandard1155);\\n}\\n\",\"keccak256\":\"0xa0fff1bcbd5b23d0bae8387f87b0be81223239bdab5a1d30c423f01cd5d3cba4\",\"license\":\"GPL-3.0\"},\"contracts/Maker/IMakerRegistrar.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\n/// @dev Interface for the maker registrar that supports registering and de-registering NFTs\\ninterface IMakerRegistrar {\\n    /// @dev struct for storing details about a registered NFT\\n    struct NftDetails {\\n        bool registered;\\n        address owner;\\n        address[] creators;\\n        uint256[] creatorSaleBasisPoints;\\n    }\\n\\n    function transformToSourceLookup(uint256 metaId) external returns (uint256);\\n\\n    function deriveSourceId(\\n        uint256 nftChainId,\\n        address nftAddress,\\n        uint256 nftId\\n    ) external returns (uint256);\\n\\n    /// @dev lookup for NftDetails from source ID\\n    function sourceToDetailsLookup(uint256)\\n        external\\n        returns (NftDetails memory);\\n\\n    function verifyOwnership(\\n        address nftContractAddress,\\n        uint256 nftId,\\n        address potentialOwner\\n    ) external returns (bool);\\n\\n    function registerNftFromBridge(\\n        address owner,\\n        uint256 chainId,\\n        address nftContractAddress,\\n        uint256 nftId,\\n        address[] memory nftCreatorAddresses,\\n        uint256[] memory creatorSaleBasisPoints,\\n        uint256 optionBits,\\n        string memory ipfsMetadataHash\\n    ) external;\\n\\n    function deRegisterNftFromBridge(\\n        address owner,\\n        uint256 chainId,\\n        address nftContractAddress,\\n        uint256 nftId\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcba279f4966ad3a5d506b0661c847b6593805c2e25fbebb3792d33e71769656f\",\"license\":\"GPL-3.0\"},\"contracts/Parameters/IParameterManager.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"../Permissions/IRoleManager.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IParameterManager {\\n    /// @dev Getter for the payment token\\n    function paymentToken() external returns (IERC20Upgradeable);\\n\\n    /// @dev Setter for the payment token\\n    function setPaymentToken(IERC20Upgradeable _paymentToken) external;\\n\\n    /// @dev Getter for the reaction price\\n    function reactionPrice() external returns (uint256);\\n\\n    /// @dev Setter for the reaction price\\n    function setReactionPrice(uint256 _reactionPrice) external;\\n\\n    /// @dev Getter for the cut of purchase price going to the curator liability\\n    function saleCuratorLiabilityBasisPoints() external returns (uint256);\\n\\n    /// @dev Setter for the cut of purchase price going to the curator liability\\n    function setSaleCuratorLiabilityBasisPoints(\\n        uint256 _saleCuratorLiabilityBasisPoints\\n    ) external;\\n\\n    /// @dev Getter for the cut of purchase price going to the referrer\\n    function saleReferrerBasisPoints() external returns (uint256);\\n\\n    /// @dev Setter for the cut of purchase price going to the referrer\\n    function setSaleReferrerBasisPoints(uint256 _saleReferrerBasisPoints)\\n        external;\\n\\n    /// @dev Getter for the cut of spend curator liability going to the taker\\n    function spendTakerBasisPoints() external returns (uint256);\\n\\n    /// @dev Setter for the cut of spend curator liability going to the taker\\n    function setSpendTakerBasisPoints(uint256 _spendTakerBasisPoints) external;\\n\\n    /// @dev Getter for the cut of spend curator liability going to the taker\\n    function spendReferrerBasisPoints() external returns (uint256);\\n\\n    /// @dev Setter for the cut of spend curator liability going to the referrer\\n    function setSpendReferrerBasisPoints(uint256 _spendReferrerBasisPoints)\\n        external;\\n\\n    /// @dev Getter for the check to see if a curator vault is allowed to be used\\n    function approvedCuratorVaults(address potentialVault)\\n        external\\n        returns (bool);\\n\\n    /// @dev Setter for the list of curator vaults allowed to be used\\n    function setApprovedCuratorVaults(address vault, bool approved) external;\\n}\\n\",\"keccak256\":\"0xf8e7447050272d458904948cf66f7cb48c1b830828a696ddc6e56aab901be637\",\"license\":\"GPL-3.0\"},\"contracts/Permissions/IRoleManager.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\ninterface IRoleManager {\\n    /// @dev Determines if the specified address has capability to mint and burn reaction NFTs\\n    /// @param potentialAddress Address to check\\n    function isAdmin(address potentialAddress) external view returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to udpate addresses in the protocol\\n    /// @param potentialAddress Address to check\\n    function isAddressManagerAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to update parameters in the protocol\\n    /// @param potentialAddress Address to check\\n    function isParameterManagerAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to to mint and burn reaction NFTs\\n    /// @param potentialAddress Address to check\\n    function isReactionNftAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to purchase curator vault tokens\\n    /// @param potentialAddress Address to check\\n    function isCuratorVaultPurchaser(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to mint and burn curator tokens\\n    /// @param potentialAddress Address to check\\n    function isCuratorTokenAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x335b249b073e02dd1ca255772734a1f21909694cf774e8c00f04c8095bf9eb30\",\"license\":\"GPL-3.0\"},\"contracts/Reactions/IReactionVault.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @dev Interface for the ReactionVault that supports buying and spending reactions\\ninterface IReactionVault {\\n    struct ReactionPriceDetails {\\n        IERC20Upgradeable paymentToken;\\n        uint256 reactionPrice;\\n        uint256 saleCuratorLiabilityBasisPoints;\\n    }\\n}\\n\",\"keccak256\":\"0x478129551c7120cb59b70605a75d8fda4e27d9a9e3af8a6254757e20de107b61\",\"license\":\"GPL-3.0\"},\"contracts/SigmoidCuratorVault/Curve/ExtendedMath.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\n/// @dev ^2, ^3, and sqrt functions\\n/// Solidity 0.8+ should catch any overflows on multiplications\\nlibrary ExtendedMath {\\n    /**\\n     * @return The given number raised to the power of 2\\n     */\\n    function pow2(int256 a) internal pure returns (int256) {\\n        return a * a;\\n    }\\n\\n    function pow3(int256 a) internal pure returns (int256) {\\n        return a * a * a;\\n    }\\n\\n    /**\\n     * @return z The square root of the given positive number\\n     */\\n    function sqrt(int256 y) internal pure returns (int256 z) {\\n        require(y >= 0, \\\"Negative sqrt\\\");\\n        if (y > 3) {\\n            z = y;\\n            int256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9006775d9cea1255d86d239306c5122453c3081216e9bd01b4d0f6371f7052ff\",\"license\":\"GPL-3.0\"},\"contracts/SigmoidCuratorVault/Curve/Sigmoid.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"./ExtendedMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n/// @dev This is a sigmoid bonding curve implementation to calculate buying and selling amounts\\n/// Formulas are inspired from https://medium.com/molecule-blog/designing-different-fundraising-scenarios-with-sigmoidal-token-bonding-curves-ceafc734ed97\\ncontract Sigmoid {\\n    using ExtendedMath for int256;\\n\\n    function n1(\\n        int256 a,\\n        int256 b,\\n        int256 c,\\n        int256 newReserves\\n    ) internal pure returns (int256) {\\n        return 2 * a.pow2() * b * newReserves * (b.pow2() + c).sqrt();\\n    }\\n\\n    function n2(\\n        int256 a,\\n        int256 b,\\n        int256,\\n        int256 newReserves\\n    ) internal pure returns (int256) {\\n        return 2 * a.pow2() * b.pow2() * newReserves;\\n    }\\n\\n    function n3(\\n        int256 a,\\n        int256,\\n        int256 c,\\n        int256 newReserves\\n    ) internal pure returns (int256) {\\n        return 2 * a.pow2() * c * newReserves;\\n    }\\n\\n    function n4(\\n        int256 a,\\n        int256 b,\\n        int256 c,\\n        int256 newReserves\\n    ) internal pure returns (int256) {\\n        return a * newReserves.pow2() * (b.pow2() + c).sqrt();\\n    }\\n\\n    function n5(\\n        int256 a,\\n        int256 b,\\n        int256,\\n        int256 newReserves\\n    ) internal pure returns (int256) {\\n        return 1 * a * b * newReserves.pow2();\\n    }\\n\\n    function n6(\\n        int256,\\n        int256,\\n        int256,\\n        int256 newReserves\\n    ) internal pure returns (int256) {\\n        return newReserves.pow3();\\n    }\\n\\n    function d1(\\n        int256 a,\\n        int256 b,\\n        int256 c,\\n        int256 newReserves\\n    ) internal pure returns (int256) {\\n        return\\n            a *\\n            (-2 *\\n                a.pow2() *\\n                c -\\n                4 *\\n                a *\\n                b *\\n                newReserves +\\n                2 *\\n                newReserves.pow2());\\n    }\\n\\n    /// @dev Buying into the curve with payment tokens will return Tokens amount to be bought\\n    /// @param a maxPrice of the curve / 2\\n    /// @param b inflectionPoint of the curve\\n    /// @param c slope steepness of the curve\\n    /// @param currentTokensSupply current amount of Tokens in the curve\\n    /// @param paymentReserves current mount of payment reserves in the curve\\n    /// @param paymentToSpend amount the of payment tokens to buy Tokens with\\n    function calculateTokensBoughtFromPayment(\\n        int256 a,\\n        int256 b,\\n        int256 c,\\n        int256 currentTokensSupply,\\n        int256 paymentReserves,\\n        int256 paymentToSpend\\n    ) public pure returns (uint256) {\\n        // The amount of reserves after payment is made\\n        int256 newReserves = paymentReserves + paymentToSpend;\\n\\n        // Calculations cause \\\"stack too deep\\\" so are broken into individual numerator and denominator functions\\n        int256 newSupply = (n6(a, b, c, newReserves) +\\n            n4(a, b, c, newReserves) -\\n            n1(a, b, c, newReserves) -\\n            n2(a, b, c, newReserves) -\\n            n3(a, b, c, newReserves) -\\n            n5(a, b, c, newReserves)) / (d1(a, b, c, newReserves));\\n\\n        // Return the difference\\n        return SafeCast.toUint256(newSupply - currentTokensSupply);\\n    }\\n\\n    /// @dev Selling Tokens into the curve will return payment tokens to be refunded\\n    /// @param a maxPrice of the curve / 2\\n    /// @param b inflectionPoint of the curve\\n    /// @param c slope steepness of the curve\\n    /// @param currentTokenSupply current amount of Tokens in the curve\\n    /// @param paymentReserves current mount of payment reserves in the curve\\n    /// @param tokensToSell amount the of Tokens the user wants to sell\\n    function calculatePaymentReturnedFromTokens(\\n        int256 a,\\n        int256 b,\\n        int256 c,\\n        int256 currentTokenSupply,\\n        int256 paymentReserves,\\n        int256 tokensToSell\\n    ) public pure returns (uint256) {\\n        // Supply after Tokens are sold\\n        int256 newSupply = currentTokenSupply - tokensToSell;\\n\\n        // Calc the constant at supply = 0\\n        int256 constantVal = a * ((b.pow2() + c).sqrt());\\n\\n        // Calculate the new reserve amount\\n        int256 newReserves = (a *\\n            (((b - newSupply).pow2() + c).sqrt() + newSupply)) - constantVal;\\n\\n        // Return the difference\\n        return SafeCast.toUint256(paymentReserves - newReserves);\\n    }\\n}\\n\",\"keccak256\":\"0x2c00c730f771b470d32c343a7889a0ce270a2e4336a97ad80f1887f726ceb428\",\"license\":\"GPL-3.0\"},\"contracts/SigmoidCuratorVault/SigmoidCuratorVault.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"../Token/IStandard1155.sol\\\";\\nimport \\\"../Config/IAddressManager.sol\\\";\\nimport \\\"./SigmoidCuratorVaultStorage.sol\\\";\\nimport \\\"./Curve/Sigmoid.sol\\\";\\n\\n/// @title SigmoidCuratorVault\\n/// @dev This contract tracks tokens in a sigmoid bonding curve per Taker NFT.\\n/// When users spend reactions against a Taker NFT, it will use the Curator Liability\\n/// to buy curator tokens against that Taker NFT and allocate to various parties.\\n/// The curator tokens will be priced via the sigmoid curve.  The params that control\\n/// the shape of the sigmoid are set in the parameter manager.\\n/// At any point in time the owners of the curator tokens can sell them back to the\\n/// bonding curve.\\n/// Note: This contract is protected via a permissioned account set in the role manager.  Caution should\\n/// be used as the role owner could renounce the role leaving all future actions disabled.  Additionally,\\n/// if a malicious account was able to obtain the role, they could use it to set values to malicious values.\\n/// See the public documentation website for more details.\\ncontract SigmoidCuratorVault is\\n    ReentrancyGuardUpgradeable,\\n    Sigmoid,\\n    SigmoidCuratorVaultStorageV1\\n{\\n    /// @dev Use the safe methods when interacting with transfers with outside ERC20s\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /// @dev verifies that the calling address is the reaction vault\\n    modifier onlyCuratorVaultPurchaser() {\\n        require(\\n            addressManager.roleManager().isCuratorVaultPurchaser(msg.sender),\\n            \\\"Not Admin\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Event triggered when curator tokens are purchased\\n    event CuratorTokensBought(\\n        uint256 indexed curatorTokenId,\\n        uint256 nftChainId,\\n        address nftAddress,\\n        uint256 nftId,\\n        IERC20Upgradeable paymentToken,\\n        uint256 paymentTokenPaid,\\n        uint256 curatorTokensBought,\\n        bool isTakerPosition\\n    );\\n\\n    /// @dev Event triggered when curator tokens are sold\\n    event CuratorTokensSold(\\n        uint256 indexed curatorTokenId,\\n        uint256 paymentTokenRefunded,\\n        uint256 curatorTokensSold\\n    );\\n\\n    /// @notice initializer to call after deployment,\\n    /// @dev can only be called once\\n    /// @param _addressManager - address manager in the protocol\\n    /// @param _curatorTokens - curator token contract address\\n    /// @param _a - bonding curve param a\\n    /// @param _b - bonding curve param b\\n    /// @param _c - bonding curve param c\\n    function initialize(\\n        address _addressManager,\\n        IStandard1155 _curatorTokens,\\n        uint256 _a,\\n        uint256 _b,\\n        uint256 _c\\n    ) public initializer {\\n        require(address(_addressManager) != address(0x0), ZERO_INPUT);\\n        require(address(_curatorTokens) != address(0x0), ZERO_INPUT);\\n\\n        // Save the address manager\\n        addressManager = IAddressManager(_addressManager);\\n\\n        // Save the curator token contract\\n        curatorTokens = _curatorTokens;\\n\\n        // Save the curve parameters\\n        a = _a;\\n        b = _b;\\n        c = _c;\\n    }\\n\\n    /// @dev get a unique token ID for a given nft address and nft ID\\n    function getTokenId(\\n        uint256 nftChainId,\\n        address nftAddress,\\n        uint256 nftId,\\n        IERC20Upgradeable paymentToken\\n    ) external pure returns (uint256) {\\n        return _getTokenId(nftChainId, nftAddress, nftId, paymentToken);\\n    }\\n\\n    function _getTokenId(\\n        uint256 nftChainId,\\n        address nftAddress,\\n        uint256 nftId,\\n        IERC20Upgradeable paymentToken\\n    ) internal pure returns (uint256) {\\n        return\\n            uint256(\\n                keccak256(\\n                    abi.encode(nftChainId, nftAddress, nftId, paymentToken)\\n                )\\n            );\\n    }\\n\\n    /// @dev Buy curator Tokens when reactions are spent.\\n    /// The reaction vault is the only account allowed to call this.\\n    /// @return Returns the amount of curator tokens purchased.\\n    function buyCuratorTokens(\\n        uint256 nftChainId,\\n        address nftAddress,\\n        uint256 nftId,\\n        IERC20Upgradeable paymentToken,\\n        uint256 paymentAmount,\\n        address mintToAddress,\\n        bool isTakerPosition\\n    ) external onlyCuratorVaultPurchaser returns (uint256) {\\n        // Get the curator token token ID\\n        uint256 curatorTokenId = _getTokenId(\\n            nftChainId,\\n            nftAddress,\\n            nftId,\\n            paymentToken\\n        );\\n\\n        // Calculate the amount of tokens that will be minted based on the price\\n        uint256 curatorTokenAmount = calculateTokensBoughtFromPayment(\\n            SafeCast.toInt256(a),\\n            SafeCast.toInt256(b),\\n            SafeCast.toInt256(c),\\n            SafeCast.toInt256(curatorTokenSupply[curatorTokenId]),\\n            SafeCast.toInt256(reserves[curatorTokenId]),\\n            SafeCast.toInt256(paymentAmount)\\n        );\\n\\n        // Update the amounts\\n        reserves[curatorTokenId] += paymentAmount;\\n        curatorTokenSupply[curatorTokenId] += curatorTokenAmount;\\n\\n        //\\n        // Pull value from ReactionVault as payment\\n        //\\n        paymentToken.safeTransferFrom(msg.sender, address(this), paymentAmount);\\n\\n        // Mint the tokens\\n        curatorTokens.mint(\\n            mintToAddress,\\n            curatorTokenId,\\n            curatorTokenAmount,\\n            new bytes(0)\\n        );\\n\\n        // Emit the event\\n        emit CuratorTokensBought(\\n            curatorTokenId,\\n            nftChainId,\\n            nftAddress,\\n            nftId,\\n            paymentToken,\\n            paymentAmount,\\n            curatorTokenAmount,\\n            isTakerPosition\\n        );\\n\\n        return curatorTokenAmount;\\n    }\\n\\n    /// @dev Sell curator tokens back into the bonding curve.\\n    /// Any holder who owns tokens can sell them back\\n    /// @return Returns the amount of payment tokens received for the curator tokens.\\n    function sellCuratorTokens(\\n        uint256 nftChainId,\\n        address nftAddress,\\n        uint256 nftId,\\n        IERC20Upgradeable paymentToken,\\n        uint256 tokensToBurn,\\n        address refundToAddress\\n    ) external nonReentrant returns (uint256) {\\n        require(tokensToBurn > 0, \\\"Invalid 0 input\\\");\\n\\n        // Get the curator token token ID\\n        uint256 curatorTokenId = _getTokenId(\\n            nftChainId,\\n            nftAddress,\\n            nftId,\\n            paymentToken\\n        );\\n\\n        // Burn the curator tokens\\n        curatorTokens.burn(msg.sender, curatorTokenId, tokensToBurn);\\n\\n        // Calculate the amount of tokens that will be minted based on the price\\n        uint256 refundAmount = calculatePaymentReturnedFromTokens(\\n            SafeCast.toInt256(a),\\n            SafeCast.toInt256(b),\\n            SafeCast.toInt256(c),\\n            SafeCast.toInt256(curatorTokenSupply[curatorTokenId]),\\n            SafeCast.toInt256(reserves[curatorTokenId]),\\n            SafeCast.toInt256(tokensToBurn)\\n        );\\n\\n        // Update the amounts\\n        reserves[curatorTokenId] -= refundAmount;\\n        curatorTokenSupply[curatorTokenId] -= tokensToBurn;\\n\\n        // Send payment token back\\n        paymentToken.safeTransfer(refundToAddress, refundAmount);\\n\\n        // Emit the event\\n        emit CuratorTokensSold(curatorTokenId, refundAmount, tokensToBurn);\\n\\n        return refundAmount;\\n    }\\n}\\n\",\"keccak256\":\"0xa178315b9cbb6bdde7dd5b7b865e0dfb0e31f9257617b7c82b1517a5acf8265f\",\"license\":\"GPL-3.0\"},\"contracts/SigmoidCuratorVault/SigmoidCuratorVaultStorage.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"../Config/IAddressManager.sol\\\";\\nimport \\\"../CuratorVault/ICuratorVault.sol\\\";\\n\\n/// @title SigmoidCuratorVaultStorage\\n/// @dev This contract will hold all local variables for the SigmoidCuratorVault Contract\\n/// When upgrading the protocol, inherit from this contract on the V2 version and change the\\n/// CuratorVault to inherit from the later version.  This ensures there are no storage layout\\n/// corruptions when upgrading.\\nabstract contract SigmoidCuratorVaultStorageV1 is ICuratorVault {\\n    /// @dev Input error for 0 value param\\n    string internal constant ZERO_INPUT = \\\"Invalid 0 input\\\";\\n\\n    /// @dev local reference to the address manager contract\\n    IAddressManager public addressManager;\\n\\n    /// @dev tracks the total supply for each curator Token token ID\\n    mapping(uint256 => uint256) public curatorTokenSupply;\\n\\n    /// @dev tracks the total payment amount held for each curator Token token ID\\n    mapping(uint256 => uint256) public reserves;\\n\\n    /// @dev the 1155 contract to track curator Tokens\\n    IStandard1155 public curatorTokens;\\n\\n    /// @dev Curve parameters\\n    uint256 public a;\\n    uint256 public b;\\n    uint256 public c;\\n}\\n\\n/// On the next version of the protocol, if new variables are added, put them in the below\\n/// contract and use this as the inheritance chain.\\n/**\\ncontract SigmoidCuratorVaultStorageV2 is SigmoidCuratorVaultStorageV1 {\\n  address newVariable;\\n}\\n */\\n\",\"keccak256\":\"0x737005f50aba256282a6f020ef545b435880a7f87a8f6b69b7be719b02fa64e4\",\"license\":\"GPL-3.0\"},\"contracts/Token/IStandard1155.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\n/// @dev Interface for the Standard1155 toke contract.\\ninterface IStandard1155 {\\n    /// @dev Allows a priviledged account to mint tokens to the specified address\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    function burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4d68249e8c10bd9aab5ae4dce0c72c88ac899a451b8624c409780cd60e88abc4\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061281c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806367e9dbcb1161008c578063c3da42b811610066578063c3da42b81461023c578063c9ff430c1461025a578063d13f90b41461028a578063d6cec5b7146102a6576100cf565b806367e9dbcb146101ac5780636893baf8146101dc5780638334278d1461020c576100cf565b80630dbe671f146100d457806317e1816c146100f25780631f2a8b061461012257806323115b99146101525780633ab76e9f146101705780634df7e3d01461018e575b600080fd5b6100dc6102d6565b6040516100e991906115b4565b60405180910390f35b61010c6004803603810190610107919061169c565b6102dc565b60405161011991906115b4565b60405180910390f35b61013c60048036038101906101379190611703565b6102f4565b60405161014991906115b4565b60405180910390f35b61015a610565565b60405161016791906117ef565b60405180910390f35b61017861058b565b604051610185919061182b565b60405180910390f35b6101966105b1565b6040516101a391906115b4565b60405180910390f35b6101c660048036038101906101c1919061187e565b6105b7565b6040516101d391906115b4565b60405180910390f35b6101f660048036038101906101f19190611956565b610954565b60405161020391906115b4565b60405180910390f35b610226600480360381019061022191906119e3565b610a1b565b60405161023391906115b4565b60405180910390f35b610244610a33565b60405161025191906115b4565b60405180910390f35b610274600480360381019061026f91906119e3565b610a39565b60405161028191906115b4565b60405180910390f35b6102a4600480360381019061029f9190611a4e565b610a51565b005b6102c060048036038101906102bb9190611956565b610d75565b6040516102cd91906115b4565b60405180910390f35b60375481565b60006102ea85858585610e20565b9050949350505050565b60006002600154141561033c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033390611b26565b60405180910390fd5b600260018190555060008311610387576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037e90611b92565b60405180910390fd5b600061039588888888610e20565b9050603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5298aca3383876040518463ffffffff1660e01b81526004016103f693929190611bc1565b600060405180830381600087803b15801561041057600080fd5b505af1158015610424573d6000803e3d6000fd5b505050506000610494610438603754610e5c565b610443603854610e5c565b61044e603954610e5c565b61046a6034600088815260200190815260200160002054610e5c565b6104866035600089815260200190815260200160002054610e5c565b61048f8b610e5c565b610d75565b9050806035600084815260200190815260200160002060008282546104b99190611c27565b92505081905550846034600084815260200190815260200160002060008282546104e39190611c27565b9250508190555061051584828873ffffffffffffffffffffffffffffffffffffffff16610ec99092919063ffffffff16565b817fdfafe7ef66b19c68e35d3237d07d7c4bf90008019e12ea9e2adb12fdfdeb79178287604051610547929190611c5b565b60405180910390a28092505050600180819055509695505050505050565b603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60385481565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662435da56040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561062257600080fd5b505af1158015610636573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065a9190611cc2565b73ffffffffffffffffffffffffffffffffffffffff16638e975b35336040518263ffffffff1660e01b81526004016106929190611cef565b60206040518083038186803b1580156106aa57600080fd5b505afa1580156106be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e29190611d1f565b610721576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071890611d98565b60405180910390fd5b600061072f89898989610e20565b9050600061079d610741603754610e5c565b61074c603854610e5c565b610757603954610e5c565b6107736034600088815260200190815260200160002054610e5c565b61078f6035600089815260200190815260200160002054610e5c565b6107988c610e5c565b610954565b9050856035600084815260200190815260200160002060008282546107c29190611db8565b92505081905550806034600084815260200190815260200160002060008282546107ec9190611db8565b925050819055506108203330888a73ffffffffffffffffffffffffffffffffffffffff16610f4f909392919063ffffffff16565b603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663731133e9868484600067ffffffffffffffff81111561087c5761087b611e0e565b5b6040519080825280601f01601f1916602001820160405280156108ae5781602001600182028036833780820191505090505b506040518563ffffffff1660e01b81526004016108ce9493929190611ed6565b600060405180830381600087803b1580156108e857600080fd5b505af11580156108fc573d6000803e3d6000fd5b50505050817f7ef62f60fd6b2d809eedbc8d39b5707298923d32fa9b56d3446ae566780b8f108b8b8b8b8b878b60405161093c9796959493929190611f52565b60405180910390a28092505050979650505050505050565b60008082846109639190611fc1565b9050600061097389898985610fd8565b61097f8a8a8a8661107a565b61098b8b8b8b876110b1565b6109978c8c8c886110e8565b6109a38d8d8d89611127565b6109af8e8e8e8a611184565b6109bb8f8f8f8b6111ca565b6109c59190611fc1565b6109cf9190612055565b6109d99190612055565b6109e39190612055565b6109ed9190612055565b6109f79190612118565b9050610a0d8682610a089190612055565b6111df565b925050509695505050505050565b60356020528060005260406000206000915090505481565b60395481565b60346020528060005260406000206000915090505481565b60008060019054906101000a900460ff16159050808015610a825750600160008054906101000a900460ff1660ff16105b80610aaf5750610a913061122c565b158015610aae5750600160008054906101000a900460ff1660ff16145b5b610aee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae5906121f4565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610b2b576001600060016101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600f81526020017f496e76616c6964203020696e707574000000000000000000000000000000000081525090610bd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bca9190612258565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600f81526020017f496e76616c6964203020696e707574000000000000000000000000000000000081525090610c7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c739190612258565b60405180910390fd5b5085603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084603660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360378190555082603881905550816039819055508015610d6d5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610d6491906122c2565b60405180910390a15b505050505050565b6000808285610d849190612055565b90506000610da487610d958a61124f565b610d9f9190611fc1565b611264565b89610daf91906122dd565b905060008183610ddc8a610dcd878e610dc89190612055565b61124f565b610dd79190611fc1565b611264565b610de69190611fc1565b8b610df191906122dd565b610dfb9190612055565b9050610e118187610e0c9190612055565b6111df565b93505050509695505050505050565b600084848484604051602001610e3994939291906123f4565b6040516020818303038152906040528051906020012060001c9050949350505050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115610ec1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb8906124ab565b60405180910390fd5b819050919050565b610f4a8363a9059cbb60e01b8484604051602401610ee89291906124cb565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611321565b505050565b610fd2846323b872dd60e01b858585604051602401610f70939291906124f4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611321565b50505050565b6000610fe38261124f565b6002610fef91906122dd565b8285876004610ffe91906122dd565b61100891906122dd565b61101291906122dd565b8461101c8861124f565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe61104791906122dd565b61105191906122dd565b61105b9190612055565b6110659190611fc1565b8561107091906122dd565b9050949350505050565b60006110858261124f565b8486600161109391906122dd565b61109d91906122dd565b6110a791906122dd565b9050949350505050565b600081836110be8761124f565b60026110ca91906122dd565b6110d491906122dd565b6110de91906122dd565b9050949350505050565b6000816110f48561124f565b6110fd8761124f565b600261110991906122dd565b61111391906122dd565b61111d91906122dd565b9050949350505050565b6000611145836111368661124f565b6111409190611fc1565b611264565b82856111508861124f565b600261115c91906122dd565b61116691906122dd565b61117091906122dd565b61117a91906122dd565b9050949350505050565b60006111a2836111938661124f565b61119d9190611fc1565b611264565b6111ab8361124f565b866111b691906122dd565b6111c091906122dd565b9050949350505050565b60006111d5826113e8565b9050949350505050565b600080821215611224576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121b90612577565b60405180910390fd5b819050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000818261125d91906122dd565b9050919050565b6000808212156112a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a0906125e3565b60405180910390fd5b600382131561130e57819050600060016002846112c69190612118565b6112d09190611fc1565b90505b818112156113085780915060028182856112ed9190612118565b6112f79190611fc1565b6113019190612118565b90506112d3565b5061131c565b6000821461131b57600190505b5b919050565b6000611383826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166114089092919063ffffffff16565b90506000815111156113e357808060200190518101906113a39190611d1f565b6113e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d990612675565b60405180910390fd5b5b505050565b60008182836113f791906122dd565b61140191906122dd565b9050919050565b60606114178484600085611420565b90509392505050565b606082471015611465576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145c90612707565b60405180910390fd5b61146e8561122c565b6114ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a490612773565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516114d691906127cf565b60006040518083038185875af1925050503d8060008114611513576040519150601f19603f3d011682016040523d82523d6000602084013e611518565b606091505b5091509150611528828286611534565b92505050949350505050565b6060831561154457829050611594565b6000835111156115575782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158b9190612258565b60405180910390fd5b9392505050565b6000819050919050565b6115ae8161159b565b82525050565b60006020820190506115c960008301846115a5565b92915050565b600080fd5b6115dd8161159b565b81146115e857600080fd5b50565b6000813590506115fa816115d4565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061162b82611600565b9050919050565b61163b81611620565b811461164657600080fd5b50565b60008135905061165881611632565b92915050565b600061166982611620565b9050919050565b6116798161165e565b811461168457600080fd5b50565b60008135905061169681611670565b92915050565b600080600080608085870312156116b6576116b56115cf565b5b60006116c4878288016115eb565b94505060206116d587828801611649565b93505060406116e6878288016115eb565b92505060606116f787828801611687565b91505092959194509250565b60008060008060008060c087890312156117205761171f6115cf565b5b600061172e89828a016115eb565b965050602061173f89828a01611649565b955050604061175089828a016115eb565b945050606061176189828a01611687565b935050608061177289828a016115eb565b92505060a061178389828a01611649565b9150509295509295509295565b6000819050919050565b60006117b56117b06117ab84611600565b611790565b611600565b9050919050565b60006117c78261179a565b9050919050565b60006117d9826117bc565b9050919050565b6117e9816117ce565b82525050565b600060208201905061180460008301846117e0565b92915050565b6000611815826117bc565b9050919050565b6118258161180a565b82525050565b6000602082019050611840600083018461181c565b92915050565b60008115159050919050565b61185b81611846565b811461186657600080fd5b50565b60008135905061187881611852565b92915050565b600080600080600080600060e0888a03121561189d5761189c6115cf565b5b60006118ab8a828b016115eb565b97505060206118bc8a828b01611649565b96505060406118cd8a828b016115eb565b95505060606118de8a828b01611687565b94505060806118ef8a828b016115eb565b93505060a06119008a828b01611649565b92505060c06119118a828b01611869565b91505092959891949750929550565b6000819050919050565b61193381611920565b811461193e57600080fd5b50565b6000813590506119508161192a565b92915050565b60008060008060008060c08789031215611973576119726115cf565b5b600061198189828a01611941565b965050602061199289828a01611941565b95505060406119a389828a01611941565b94505060606119b489828a01611941565b93505060806119c589828a01611941565b92505060a06119d689828a01611941565b9150509295509295509295565b6000602082840312156119f9576119f86115cf565b5b6000611a07848285016115eb565b91505092915050565b6000611a1b82611620565b9050919050565b611a2b81611a10565b8114611a3657600080fd5b50565b600081359050611a4881611a22565b92915050565b600080600080600060a08688031215611a6a57611a696115cf565b5b6000611a7888828901611649565b9550506020611a8988828901611a39565b9450506040611a9a888289016115eb565b9350506060611aab888289016115eb565b9250506080611abc888289016115eb565b9150509295509295909350565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611b10601f83611ac9565b9150611b1b82611ada565b602082019050919050565b60006020820190508181036000830152611b3f81611b03565b9050919050565b7f496e76616c6964203020696e7075740000000000000000000000000000000000600082015250565b6000611b7c600f83611ac9565b9150611b8782611b46565b602082019050919050565b60006020820190508181036000830152611bab81611b6f565b9050919050565b611bbb81611620565b82525050565b6000606082019050611bd66000830186611bb2565b611be360208301856115a5565b611bf060408301846115a5565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c328261159b565b9150611c3d8361159b565b925082821015611c5057611c4f611bf8565b5b828203905092915050565b6000604082019050611c7060008301856115a5565b611c7d60208301846115a5565b9392505050565b6000611c8f82611620565b9050919050565b611c9f81611c84565b8114611caa57600080fd5b50565b600081519050611cbc81611c96565b92915050565b600060208284031215611cd857611cd76115cf565b5b6000611ce684828501611cad565b91505092915050565b6000602082019050611d046000830184611bb2565b92915050565b600081519050611d1981611852565b92915050565b600060208284031215611d3557611d346115cf565b5b6000611d4384828501611d0a565b91505092915050565b7f4e6f742041646d696e0000000000000000000000000000000000000000000000600082015250565b6000611d82600983611ac9565b9150611d8d82611d4c565b602082019050919050565b60006020820190508181036000830152611db181611d75565b9050919050565b6000611dc38261159b565b9150611dce8361159b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611e0357611e02611bf8565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081519050919050565b600082825260208201905092915050565b60005b83811015611e77578082015181840152602081019050611e5c565b83811115611e86576000848401525b50505050565b6000601f19601f8301169050919050565b6000611ea882611e3d565b611eb28185611e48565b9350611ec2818560208601611e59565b611ecb81611e8c565b840191505092915050565b6000608082019050611eeb6000830187611bb2565b611ef860208301866115a5565b611f0560408301856115a5565b8181036060830152611f178184611e9d565b905095945050505050565b6000611f2d826117bc565b9050919050565b611f3d81611f22565b82525050565b611f4c81611846565b82525050565b600060e082019050611f67600083018a6115a5565b611f746020830189611bb2565b611f8160408301886115a5565b611f8e6060830187611f34565b611f9b60808301866115a5565b611fa860a08301856115a5565b611fb560c0830184611f43565b98975050505050505050565b6000611fcc82611920565b9150611fd783611920565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383136000831215161561201257612011611bf8565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161561204a57612049611bf8565b5b828201905092915050565b600061206082611920565b915061206b83611920565b9250827f8000000000000000000000000000000000000000000000000000000000000000018212600084121516156120a6576120a5611bf8565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182136000841216156120de576120dd611bf8565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061212382611920565b915061212e83611920565b92508261213e5761213d6120e9565b5b600160000383147f80000000000000000000000000000000000000000000000000000000000000008314161561217757612176611bf8565b5b828205905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006121de602e83611ac9565b91506121e982612182565b604082019050919050565b6000602082019050818103600083015261220d816121d1565b9050919050565b600081519050919050565b600061222a82612214565b6122348185611ac9565b9350612244818560208601611e59565b61224d81611e8c565b840191505092915050565b60006020820190508181036000830152612272818461221f565b905092915050565b6000819050919050565b600060ff82169050919050565b60006122ac6122a76122a28461227a565b611790565b612284565b9050919050565b6122bc81612291565b82525050565b60006020820190506122d760008301846122b3565b92915050565b60006122e882611920565b91506122f383611920565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561233257612331611bf8565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561236f5761236e611bf8565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156123ac576123ab611bf8565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156123e9576123e8611bf8565b5b828202905092915050565b600060808201905061240960008301876115a5565b6124166020830186611bb2565b61242360408301856115a5565b6124306060830184611f34565b95945050505050565b7f53616665436173743a2076616c756520646f65736e27742066697420696e206160008201527f6e20696e74323536000000000000000000000000000000000000000000000000602082015250565b6000612495602883611ac9565b91506124a082612439565b604082019050919050565b600060208201905081810360008301526124c481612488565b9050919050565b60006040820190506124e06000830185611bb2565b6124ed60208301846115a5565b9392505050565b60006060820190506125096000830186611bb2565b6125166020830185611bb2565b61252360408301846115a5565b949350505050565b7f53616665436173743a2076616c7565206d75737420626520706f736974697665600082015250565b6000612561602083611ac9565b915061256c8261252b565b602082019050919050565b6000602082019050818103600083015261259081612554565b9050919050565b7f4e65676174697665207371727400000000000000000000000000000000000000600082015250565b60006125cd600d83611ac9565b91506125d882612597565b602082019050919050565b600060208201905081810360008301526125fc816125c0565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061265f602a83611ac9565b915061266a82612603565b604082019050919050565b6000602082019050818103600083015261268e81612652565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006126f1602683611ac9565b91506126fc82612695565b604082019050919050565b60006020820190508181036000830152612720816126e4565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061275d601d83611ac9565b915061276882612727565b602082019050919050565b6000602082019050818103600083015261278c81612750565b9050919050565b600081905092915050565b60006127a982611e3d565b6127b38185612793565b93506127c3818560208601611e59565b80840191505092915050565b60006127db828461279e565b91508190509291505056fea2646970667358221220f7049ff9e74484367e161d76fe79692d9f1260c76989685262557489e44e4c9c64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806367e9dbcb1161008c578063c3da42b811610066578063c3da42b81461023c578063c9ff430c1461025a578063d13f90b41461028a578063d6cec5b7146102a6576100cf565b806367e9dbcb146101ac5780636893baf8146101dc5780638334278d1461020c576100cf565b80630dbe671f146100d457806317e1816c146100f25780631f2a8b061461012257806323115b99146101525780633ab76e9f146101705780634df7e3d01461018e575b600080fd5b6100dc6102d6565b6040516100e991906115b4565b60405180910390f35b61010c6004803603810190610107919061169c565b6102dc565b60405161011991906115b4565b60405180910390f35b61013c60048036038101906101379190611703565b6102f4565b60405161014991906115b4565b60405180910390f35b61015a610565565b60405161016791906117ef565b60405180910390f35b61017861058b565b604051610185919061182b565b60405180910390f35b6101966105b1565b6040516101a391906115b4565b60405180910390f35b6101c660048036038101906101c1919061187e565b6105b7565b6040516101d391906115b4565b60405180910390f35b6101f660048036038101906101f19190611956565b610954565b60405161020391906115b4565b60405180910390f35b610226600480360381019061022191906119e3565b610a1b565b60405161023391906115b4565b60405180910390f35b610244610a33565b60405161025191906115b4565b60405180910390f35b610274600480360381019061026f91906119e3565b610a39565b60405161028191906115b4565b60405180910390f35b6102a4600480360381019061029f9190611a4e565b610a51565b005b6102c060048036038101906102bb9190611956565b610d75565b6040516102cd91906115b4565b60405180910390f35b60375481565b60006102ea85858585610e20565b9050949350505050565b60006002600154141561033c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033390611b26565b60405180910390fd5b600260018190555060008311610387576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037e90611b92565b60405180910390fd5b600061039588888888610e20565b9050603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5298aca3383876040518463ffffffff1660e01b81526004016103f693929190611bc1565b600060405180830381600087803b15801561041057600080fd5b505af1158015610424573d6000803e3d6000fd5b505050506000610494610438603754610e5c565b610443603854610e5c565b61044e603954610e5c565b61046a6034600088815260200190815260200160002054610e5c565b6104866035600089815260200190815260200160002054610e5c565b61048f8b610e5c565b610d75565b9050806035600084815260200190815260200160002060008282546104b99190611c27565b92505081905550846034600084815260200190815260200160002060008282546104e39190611c27565b9250508190555061051584828873ffffffffffffffffffffffffffffffffffffffff16610ec99092919063ffffffff16565b817fdfafe7ef66b19c68e35d3237d07d7c4bf90008019e12ea9e2adb12fdfdeb79178287604051610547929190611c5b565b60405180910390a28092505050600180819055509695505050505050565b603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60385481565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662435da56040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561062257600080fd5b505af1158015610636573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065a9190611cc2565b73ffffffffffffffffffffffffffffffffffffffff16638e975b35336040518263ffffffff1660e01b81526004016106929190611cef565b60206040518083038186803b1580156106aa57600080fd5b505afa1580156106be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e29190611d1f565b610721576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071890611d98565b60405180910390fd5b600061072f89898989610e20565b9050600061079d610741603754610e5c565b61074c603854610e5c565b610757603954610e5c565b6107736034600088815260200190815260200160002054610e5c565b61078f6035600089815260200190815260200160002054610e5c565b6107988c610e5c565b610954565b9050856035600084815260200190815260200160002060008282546107c29190611db8565b92505081905550806034600084815260200190815260200160002060008282546107ec9190611db8565b925050819055506108203330888a73ffffffffffffffffffffffffffffffffffffffff16610f4f909392919063ffffffff16565b603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663731133e9868484600067ffffffffffffffff81111561087c5761087b611e0e565b5b6040519080825280601f01601f1916602001820160405280156108ae5781602001600182028036833780820191505090505b506040518563ffffffff1660e01b81526004016108ce9493929190611ed6565b600060405180830381600087803b1580156108e857600080fd5b505af11580156108fc573d6000803e3d6000fd5b50505050817f7ef62f60fd6b2d809eedbc8d39b5707298923d32fa9b56d3446ae566780b8f108b8b8b8b8b878b60405161093c9796959493929190611f52565b60405180910390a28092505050979650505050505050565b60008082846109639190611fc1565b9050600061097389898985610fd8565b61097f8a8a8a8661107a565b61098b8b8b8b876110b1565b6109978c8c8c886110e8565b6109a38d8d8d89611127565b6109af8e8e8e8a611184565b6109bb8f8f8f8b6111ca565b6109c59190611fc1565b6109cf9190612055565b6109d99190612055565b6109e39190612055565b6109ed9190612055565b6109f79190612118565b9050610a0d8682610a089190612055565b6111df565b925050509695505050505050565b60356020528060005260406000206000915090505481565b60395481565b60346020528060005260406000206000915090505481565b60008060019054906101000a900460ff16159050808015610a825750600160008054906101000a900460ff1660ff16105b80610aaf5750610a913061122c565b158015610aae5750600160008054906101000a900460ff1660ff16145b5b610aee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae5906121f4565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610b2b576001600060016101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600f81526020017f496e76616c6964203020696e707574000000000000000000000000000000000081525090610bd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bca9190612258565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600f81526020017f496e76616c6964203020696e707574000000000000000000000000000000000081525090610c7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c739190612258565b60405180910390fd5b5085603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084603660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360378190555082603881905550816039819055508015610d6d5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610d6491906122c2565b60405180910390a15b505050505050565b6000808285610d849190612055565b90506000610da487610d958a61124f565b610d9f9190611fc1565b611264565b89610daf91906122dd565b905060008183610ddc8a610dcd878e610dc89190612055565b61124f565b610dd79190611fc1565b611264565b610de69190611fc1565b8b610df191906122dd565b610dfb9190612055565b9050610e118187610e0c9190612055565b6111df565b93505050509695505050505050565b600084848484604051602001610e3994939291906123f4565b6040516020818303038152906040528051906020012060001c9050949350505050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115610ec1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb8906124ab565b60405180910390fd5b819050919050565b610f4a8363a9059cbb60e01b8484604051602401610ee89291906124cb565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611321565b505050565b610fd2846323b872dd60e01b858585604051602401610f70939291906124f4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611321565b50505050565b6000610fe38261124f565b6002610fef91906122dd565b8285876004610ffe91906122dd565b61100891906122dd565b61101291906122dd565b8461101c8861124f565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe61104791906122dd565b61105191906122dd565b61105b9190612055565b6110659190611fc1565b8561107091906122dd565b9050949350505050565b60006110858261124f565b8486600161109391906122dd565b61109d91906122dd565b6110a791906122dd565b9050949350505050565b600081836110be8761124f565b60026110ca91906122dd565b6110d491906122dd565b6110de91906122dd565b9050949350505050565b6000816110f48561124f565b6110fd8761124f565b600261110991906122dd565b61111391906122dd565b61111d91906122dd565b9050949350505050565b6000611145836111368661124f565b6111409190611fc1565b611264565b82856111508861124f565b600261115c91906122dd565b61116691906122dd565b61117091906122dd565b61117a91906122dd565b9050949350505050565b60006111a2836111938661124f565b61119d9190611fc1565b611264565b6111ab8361124f565b866111b691906122dd565b6111c091906122dd565b9050949350505050565b60006111d5826113e8565b9050949350505050565b600080821215611224576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121b90612577565b60405180910390fd5b819050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000818261125d91906122dd565b9050919050565b6000808212156112a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a0906125e3565b60405180910390fd5b600382131561130e57819050600060016002846112c69190612118565b6112d09190611fc1565b90505b818112156113085780915060028182856112ed9190612118565b6112f79190611fc1565b6113019190612118565b90506112d3565b5061131c565b6000821461131b57600190505b5b919050565b6000611383826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166114089092919063ffffffff16565b90506000815111156113e357808060200190518101906113a39190611d1f565b6113e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d990612675565b60405180910390fd5b5b505050565b60008182836113f791906122dd565b61140191906122dd565b9050919050565b60606114178484600085611420565b90509392505050565b606082471015611465576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145c90612707565b60405180910390fd5b61146e8561122c565b6114ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a490612773565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516114d691906127cf565b60006040518083038185875af1925050503d8060008114611513576040519150601f19603f3d011682016040523d82523d6000602084013e611518565b606091505b5091509150611528828286611534565b92505050949350505050565b6060831561154457829050611594565b6000835111156115575782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158b9190612258565b60405180910390fd5b9392505050565b6000819050919050565b6115ae8161159b565b82525050565b60006020820190506115c960008301846115a5565b92915050565b600080fd5b6115dd8161159b565b81146115e857600080fd5b50565b6000813590506115fa816115d4565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061162b82611600565b9050919050565b61163b81611620565b811461164657600080fd5b50565b60008135905061165881611632565b92915050565b600061166982611620565b9050919050565b6116798161165e565b811461168457600080fd5b50565b60008135905061169681611670565b92915050565b600080600080608085870312156116b6576116b56115cf565b5b60006116c4878288016115eb565b94505060206116d587828801611649565b93505060406116e6878288016115eb565b92505060606116f787828801611687565b91505092959194509250565b60008060008060008060c087890312156117205761171f6115cf565b5b600061172e89828a016115eb565b965050602061173f89828a01611649565b955050604061175089828a016115eb565b945050606061176189828a01611687565b935050608061177289828a016115eb565b92505060a061178389828a01611649565b9150509295509295509295565b6000819050919050565b60006117b56117b06117ab84611600565b611790565b611600565b9050919050565b60006117c78261179a565b9050919050565b60006117d9826117bc565b9050919050565b6117e9816117ce565b82525050565b600060208201905061180460008301846117e0565b92915050565b6000611815826117bc565b9050919050565b6118258161180a565b82525050565b6000602082019050611840600083018461181c565b92915050565b60008115159050919050565b61185b81611846565b811461186657600080fd5b50565b60008135905061187881611852565b92915050565b600080600080600080600060e0888a03121561189d5761189c6115cf565b5b60006118ab8a828b016115eb565b97505060206118bc8a828b01611649565b96505060406118cd8a828b016115eb565b95505060606118de8a828b01611687565b94505060806118ef8a828b016115eb565b93505060a06119008a828b01611649565b92505060c06119118a828b01611869565b91505092959891949750929550565b6000819050919050565b61193381611920565b811461193e57600080fd5b50565b6000813590506119508161192a565b92915050565b60008060008060008060c08789031215611973576119726115cf565b5b600061198189828a01611941565b965050602061199289828a01611941565b95505060406119a389828a01611941565b94505060606119b489828a01611941565b93505060806119c589828a01611941565b92505060a06119d689828a01611941565b9150509295509295509295565b6000602082840312156119f9576119f86115cf565b5b6000611a07848285016115eb565b91505092915050565b6000611a1b82611620565b9050919050565b611a2b81611a10565b8114611a3657600080fd5b50565b600081359050611a4881611a22565b92915050565b600080600080600060a08688031215611a6a57611a696115cf565b5b6000611a7888828901611649565b9550506020611a8988828901611a39565b9450506040611a9a888289016115eb565b9350506060611aab888289016115eb565b9250506080611abc888289016115eb565b9150509295509295909350565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611b10601f83611ac9565b9150611b1b82611ada565b602082019050919050565b60006020820190508181036000830152611b3f81611b03565b9050919050565b7f496e76616c6964203020696e7075740000000000000000000000000000000000600082015250565b6000611b7c600f83611ac9565b9150611b8782611b46565b602082019050919050565b60006020820190508181036000830152611bab81611b6f565b9050919050565b611bbb81611620565b82525050565b6000606082019050611bd66000830186611bb2565b611be360208301856115a5565b611bf060408301846115a5565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c328261159b565b9150611c3d8361159b565b925082821015611c5057611c4f611bf8565b5b828203905092915050565b6000604082019050611c7060008301856115a5565b611c7d60208301846115a5565b9392505050565b6000611c8f82611620565b9050919050565b611c9f81611c84565b8114611caa57600080fd5b50565b600081519050611cbc81611c96565b92915050565b600060208284031215611cd857611cd76115cf565b5b6000611ce684828501611cad565b91505092915050565b6000602082019050611d046000830184611bb2565b92915050565b600081519050611d1981611852565b92915050565b600060208284031215611d3557611d346115cf565b5b6000611d4384828501611d0a565b91505092915050565b7f4e6f742041646d696e0000000000000000000000000000000000000000000000600082015250565b6000611d82600983611ac9565b9150611d8d82611d4c565b602082019050919050565b60006020820190508181036000830152611db181611d75565b9050919050565b6000611dc38261159b565b9150611dce8361159b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611e0357611e02611bf8565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081519050919050565b600082825260208201905092915050565b60005b83811015611e77578082015181840152602081019050611e5c565b83811115611e86576000848401525b50505050565b6000601f19601f8301169050919050565b6000611ea882611e3d565b611eb28185611e48565b9350611ec2818560208601611e59565b611ecb81611e8c565b840191505092915050565b6000608082019050611eeb6000830187611bb2565b611ef860208301866115a5565b611f0560408301856115a5565b8181036060830152611f178184611e9d565b905095945050505050565b6000611f2d826117bc565b9050919050565b611f3d81611f22565b82525050565b611f4c81611846565b82525050565b600060e082019050611f67600083018a6115a5565b611f746020830189611bb2565b611f8160408301886115a5565b611f8e6060830187611f34565b611f9b60808301866115a5565b611fa860a08301856115a5565b611fb560c0830184611f43565b98975050505050505050565b6000611fcc82611920565b9150611fd783611920565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383136000831215161561201257612011611bf8565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161561204a57612049611bf8565b5b828201905092915050565b600061206082611920565b915061206b83611920565b9250827f8000000000000000000000000000000000000000000000000000000000000000018212600084121516156120a6576120a5611bf8565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182136000841216156120de576120dd611bf8565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061212382611920565b915061212e83611920565b92508261213e5761213d6120e9565b5b600160000383147f80000000000000000000000000000000000000000000000000000000000000008314161561217757612176611bf8565b5b828205905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006121de602e83611ac9565b91506121e982612182565b604082019050919050565b6000602082019050818103600083015261220d816121d1565b9050919050565b600081519050919050565b600061222a82612214565b6122348185611ac9565b9350612244818560208601611e59565b61224d81611e8c565b840191505092915050565b60006020820190508181036000830152612272818461221f565b905092915050565b6000819050919050565b600060ff82169050919050565b60006122ac6122a76122a28461227a565b611790565b612284565b9050919050565b6122bc81612291565b82525050565b60006020820190506122d760008301846122b3565b92915050565b60006122e882611920565b91506122f383611920565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561233257612331611bf8565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561236f5761236e611bf8565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156123ac576123ab611bf8565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156123e9576123e8611bf8565b5b828202905092915050565b600060808201905061240960008301876115a5565b6124166020830186611bb2565b61242360408301856115a5565b6124306060830184611f34565b95945050505050565b7f53616665436173743a2076616c756520646f65736e27742066697420696e206160008201527f6e20696e74323536000000000000000000000000000000000000000000000000602082015250565b6000612495602883611ac9565b91506124a082612439565b604082019050919050565b600060208201905081810360008301526124c481612488565b9050919050565b60006040820190506124e06000830185611bb2565b6124ed60208301846115a5565b9392505050565b60006060820190506125096000830186611bb2565b6125166020830185611bb2565b61252360408301846115a5565b949350505050565b7f53616665436173743a2076616c7565206d75737420626520706f736974697665600082015250565b6000612561602083611ac9565b915061256c8261252b565b602082019050919050565b6000602082019050818103600083015261259081612554565b9050919050565b7f4e65676174697665207371727400000000000000000000000000000000000000600082015250565b60006125cd600d83611ac9565b91506125d882612597565b602082019050919050565b600060208201905081810360008301526125fc816125c0565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061265f602a83611ac9565b915061266a82612603565b604082019050919050565b6000602082019050818103600083015261268e81612652565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006126f1602683611ac9565b91506126fc82612695565b604082019050919050565b60006020820190508181036000830152612720816126e4565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061275d601d83611ac9565b915061276882612727565b602082019050919050565b6000602082019050818103600083015261278c81612750565b9050919050565b600081905092915050565b60006127a982611e3d565b6127b38185612793565b93506127c3818560208601611e59565b80840191505092915050565b60006127db828461279e565b91508190509291505056fea2646970667358221220f7049ff9e74484367e161d76fe79692d9f1260c76989685262557489e44e4c9c64736f6c63430008090033",
  "devdoc": {
    "details": "This contract tracks tokens in a sigmoid bonding curve per Taker NFT. When users spend reactions against a Taker NFT, it will use the Curator Liability to buy curator tokens against that Taker NFT and allocate to various parties. The curator tokens will be priced via the sigmoid curve.  The params that control the shape of the sigmoid are set in the parameter manager. At any point in time the owners of the curator tokens can sell them back to the bonding curve. Note: This contract is protected via a permissioned account set in the role manager.  Caution should be used as the role owner could renounce the role leaving all future actions disabled.  Additionally, if a malicious account was able to obtain the role, they could use it to set values to malicious values. See the public documentation website for more details.",
    "events": {
      "CuratorTokensBought(uint256,uint256,address,uint256,address,uint256,uint256,bool)": {
        "details": "Event triggered when curator tokens are purchased"
      },
      "CuratorTokensSold(uint256,uint256,uint256)": {
        "details": "Event triggered when curator tokens are sold"
      }
    },
    "kind": "dev",
    "methods": {
      "buyCuratorTokens(uint256,address,uint256,address,uint256,address,bool)": {
        "details": "Buy curator Tokens when reactions are spent. The reaction vault is the only account allowed to call this.",
        "returns": {
          "_0": "Returns the amount of curator tokens purchased."
        }
      },
      "calculatePaymentReturnedFromTokens(int256,int256,int256,int256,int256,int256)": {
        "details": "Selling Tokens into the curve will return payment tokens to be refunded",
        "params": {
          "a": "maxPrice of the curve / 2",
          "b": "inflectionPoint of the curve",
          "c": "slope steepness of the curve",
          "currentTokenSupply": "current amount of Tokens in the curve",
          "paymentReserves": "current mount of payment reserves in the curve",
          "tokensToSell": "amount the of Tokens the user wants to sell"
        }
      },
      "calculateTokensBoughtFromPayment(int256,int256,int256,int256,int256,int256)": {
        "details": "Buying into the curve with payment tokens will return Tokens amount to be bought",
        "params": {
          "a": "maxPrice of the curve / 2",
          "b": "inflectionPoint of the curve",
          "c": "slope steepness of the curve",
          "currentTokensSupply": "current amount of Tokens in the curve",
          "paymentReserves": "current mount of payment reserves in the curve",
          "paymentToSpend": "amount the of payment tokens to buy Tokens with"
        }
      },
      "getTokenId(uint256,address,uint256,address)": {
        "details": "get a unique token ID for a given nft address and nft ID"
      },
      "initialize(address,address,uint256,uint256,uint256)": {
        "details": "can only be called once",
        "params": {
          "_a": "- bonding curve param a",
          "_addressManager": "- address manager in the protocol",
          "_b": "- bonding curve param b",
          "_c": "- bonding curve param c",
          "_curatorTokens": "- curator token contract address"
        }
      },
      "sellCuratorTokens(uint256,address,uint256,address,uint256,address)": {
        "details": "Sell curator tokens back into the bonding curve. Any holder who owns tokens can sell them back",
        "returns": {
          "_0": "Returns the amount of payment tokens received for the curator tokens."
        }
      }
    },
    "title": "SigmoidCuratorVault",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(address,address,uint256,uint256,uint256)": {
        "notice": "initializer to call after deployment,"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2366,
        "contract": "contracts/SigmoidCuratorVault/SigmoidCuratorVault.sol:SigmoidCuratorVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2369,
        "contract": "contracts/SigmoidCuratorVault/SigmoidCuratorVault.sol:SigmoidCuratorVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2524,
        "contract": "contracts/SigmoidCuratorVault/SigmoidCuratorVault.sol:SigmoidCuratorVault",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2568,
        "contract": "contracts/SigmoidCuratorVault/SigmoidCuratorVault.sol:SigmoidCuratorVault",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12594,
        "contract": "contracts/SigmoidCuratorVault/SigmoidCuratorVault.sol:SigmoidCuratorVault",
        "label": "addressManager",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(IAddressManager)8538"
      },
      {
        "astId": 12599,
        "contract": "contracts/SigmoidCuratorVault/SigmoidCuratorVault.sol:SigmoidCuratorVault",
        "label": "curatorTokenSupply",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 12604,
        "contract": "contracts/SigmoidCuratorVault/SigmoidCuratorVault.sol:SigmoidCuratorVault",
        "label": "reserves",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 12608,
        "contract": "contracts/SigmoidCuratorVault/SigmoidCuratorVault.sol:SigmoidCuratorVault",
        "label": "curatorTokens",
        "offset": 0,
        "slot": "54",
        "type": "t_contract(IStandard1155)12865"
      },
      {
        "astId": 12611,
        "contract": "contracts/SigmoidCuratorVault/SigmoidCuratorVault.sol:SigmoidCuratorVault",
        "label": "a",
        "offset": 0,
        "slot": "55",
        "type": "t_uint256"
      },
      {
        "astId": 12613,
        "contract": "contracts/SigmoidCuratorVault/SigmoidCuratorVault.sol:SigmoidCuratorVault",
        "label": "b",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 12615,
        "contract": "contracts/SigmoidCuratorVault/SigmoidCuratorVault.sol:SigmoidCuratorVault",
        "label": "c",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAddressManager)8538": {
        "encoding": "inplace",
        "label": "contract IAddressManager",
        "numberOfBytes": "20"
      },
      "t_contract(IStandard1155)12865": {
        "encoding": "inplace",
        "label": "contract IStandard1155",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
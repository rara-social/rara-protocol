{
  "address": "0x10F892F9e8A2Bb0C098457e2ae74a3863A723703",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxChild",
          "type": "address"
        },
        {
          "internalType": "contract IAddressManager",
          "name": "_addressManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DE_REGISTER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressManager",
      "outputs": [
        {
          "internalType": "contract IAddressManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChild",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRootTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stateId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rootMessageSender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "processMessageFromRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxRootTunnel",
          "type": "address"
        }
      ],
      "name": "setFxRootTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x037dbc3060f7a15603dc1981565018395d6da5f5043a8777601aae28b48f2bd1",
  "receipt": {
    "to": null,
    "from": "0x8f1809FA5DDcf8275cf9C92fCeF40B2154a01022",
    "contractAddress": "0x10F892F9e8A2Bb0C098457e2ae74a3863A723703",
    "transactionIndex": 8,
    "gasUsed": "1110055",
    "logsBloom": "0x
    "blockHash": "0x9d16433e9620ab147cf571a15bbcabb47eb3efdd2bcc52403ed491d86a535f42",
    "transactionHash": "0x037dbc3060f7a15603dc1981565018395d6da5f5043a8777601aae28b48f2bd1",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 26081999,
        "transactionHash": "0x037dbc3060f7a15603dc1981565018395d6da5f5043a8777601aae28b48f2bd1",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008f1809fa5ddcf8275cf9c92fcef40b2154a01022",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000004edfc864df92d20000000000000000000000000000000000000000000000000801cb2a98206c030000000000000000000000000000000000000000000012fa525bbc4c1be0ef0300000000000000000000000000000000000000000000000007b2eb623340d9310000000000000000000000000000000000000000000012fa52aa9c1480c081d5",
        "logIndex": 118,
        "blockHash": "0x9d16433e9620ab147cf571a15bbcabb47eb3efdd2bcc52403ed491d86a535f42"
      }
    ],
    "blockNumber": 26081999,
    "cumulativeGasUsed": "3405158",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCf73231F28B7331BBe3124B907840A94851f9f11",
    "0x56b97055FEc20E4c244Bb3C0200956f4F9558ed3"
  ],
  "numDeployments": 1,
  "solcInputHash": "0aa2446dfdd461104da7fca84166983e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChild\",\"type\":\"address\"},{\"internalType\":\"contract IAddressManager\",\"name\":\"_addressManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DE_REGISTER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressManager\",\"outputs\":[{\"internalType\":\"contract IAddressManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChild\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRootTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stateId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rootMessageSender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"processMessageFromRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxRootTunnel\",\"type\":\"address\"}],\"name\":\"setFxRootTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract lives on the L2 and receives messages from the L1 to register and unregister NFTs on the L1 chain. This is not an upgradeable contract and should not be used with a proxy.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"After deployment you must call setFxRootTunnel() with the RootRegistrar Address on the L1.\",\"params\":{\"_addressManager\":\"- This is the address manager on the protocol\",\"_fxChild\":\"- This is the contract deployed on the L2 that will be sending messages here. This is a well known deployed contract that Matic has set up.\"}}},\"stateVariables\":{\"addressManager\":{\"details\":\"local reference to the address manager contract\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bridge/ChildRegistrar.sol\":\"ChildRegistrar\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@maticnetwork/fx-portal/contracts/tunnel/FxBaseChildTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// IFxMessageProcessor represents interface to process message\\ninterface IFxMessageProcessor {\\n    function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes calldata data) external;\\n}\\n\\n/**\\n* @notice Mock child tunnel contract to receive and send message from L2\\n*/\\nabstract contract FxBaseChildTunnel is IFxMessageProcessor{\\n    // MessageTunnel on L1 will get data from this event\\n    event MessageSent(bytes message);\\n\\n    // fx child\\n    address public fxChild;\\n\\n    // fx root tunnel\\n    address public fxRootTunnel;\\n\\n    constructor(address _fxChild) {\\n        fxChild = _fxChild;\\n    }\\n\\n    // Sender must be fxRootTunnel in case of ERC20 tunnel\\n    modifier validateSender(address sender) {\\n        require(sender == fxRootTunnel, \\\"FxBaseChildTunnel: INVALID_SENDER_FROM_ROOT\\\");\\n        _;\\n    }\\n\\n    // set fxRootTunnel if not set already\\n    function setFxRootTunnel(address _fxRootTunnel) external {\\n        require(fxRootTunnel == address(0x0), \\\"FxBaseChildTunnel: ROOT_TUNNEL_ALREADY_SET\\\");\\n        fxRootTunnel = _fxRootTunnel;\\n    }\\n\\n    function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes calldata data) external override {\\n        require(msg.sender == fxChild, \\\"FxBaseChildTunnel: INVALID_SENDER\\\");\\n        _processMessageFromRoot(stateId, rootMessageSender, data);\\n    }\\n\\n    /**\\n     * @notice Emit message that can be received on Root Tunnel\\n     * @dev Call the internal function when need to emit message\\n     * @param message bytes message that will be sent to Root Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToRoot(bytes memory message) internal {\\n        emit MessageSent(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Root Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param stateId unique state id\\n     * @param sender root message sender\\n     * @param message bytes message that was sent from Root Tunnel\\n     */\\n    function _processMessageFromRoot(uint256 stateId, address sender, bytes memory message) virtual internal;\\n}\\n\",\"keccak256\":\"0xf5b498e3d85967e8bedcfa7f10078d6018b6168eb56926d1b18a526e68e1c467\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"contracts/Bridge/ChildRegistrar.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.9;\\n\\nimport \\\"@maticnetwork/fx-portal/contracts/tunnel/FxBaseChildTunnel.sol\\\";\\nimport \\\"../Config/IAddressManager.sol\\\";\\n\\n/// @dev This contract lives on the L2 and receives messages from the L1 to register and unregister\\n/// NFTs on the L1 chain.\\n/// This is not an upgradeable contract and should not be used with a proxy.\\ncontract ChildRegistrar is FxBaseChildTunnel {\\n    bytes32 public constant REGISTER = keccak256(\\\"REGISTER\\\");\\n    bytes32 public constant DE_REGISTER = keccak256(\\\"DE_REGISTER\\\");\\n\\n    /// @dev local reference to the address manager contract\\n    IAddressManager public addressManager;\\n\\n    /// @param _fxChild - This is the contract deployed on the L2 that will be sending messages here.\\n    /// This is a well known deployed contract that Matic has set up.\\n    /// @param _addressManager - This is the address manager on the protocol\\n    /// @dev After deployment you must call setFxRootTunnel() with the RootRegistrar Address on the L1.\\n    constructor(address _fxChild, IAddressManager _addressManager)\\n        FxBaseChildTunnel(_fxChild)\\n    {\\n        addressManager = _addressManager;\\n    }\\n\\n    /// @dev The base contract ensures that the incoming message is from the contract _fxChild passed in the constructor.\\n    /// The validateSender() makes sure that the contract on the root chain is the one relaying the message.\\n    /// The root contract should have been set via setFxRootTunnel() after deployment\\n    function _processMessageFromRoot(\\n        uint256, /* stateId */\\n        address sender,\\n        bytes memory data\\n    ) internal override validateSender(sender) {\\n        // decode incoming data\\n        (bytes32 syncType, bytes memory syncData) = abi.decode(\\n            data,\\n            (bytes32, bytes)\\n        );\\n\\n        if (syncType == REGISTER) {\\n            _registerNft(syncData);\\n        } else if (syncType == DE_REGISTER) {\\n            _deRegisterNft(syncData);\\n        } else {\\n            revert(\\\"ERR MSG\\\");\\n        }\\n    }\\n\\n    /// @dev Handler for messages coming from the L1 when an owner wants to register\\n    function _registerNft(bytes memory syncData) internal {\\n        // Decode the params from the data\\n        (\\n            address owner,\\n            uint256 chainId,\\n            address nftContractAddress,\\n            uint256 nftId,\\n            address creatorAddress,\\n            uint256 creatorSaleBasisPoints,\\n            uint256 optionBits,\\n            string memory ipfsMetadataHash\\n        ) = abi.decode(\\n                syncData,\\n                (\\n                    address,\\n                    uint256,\\n                    address,\\n                    uint256,\\n                    address,\\n                    uint256,\\n                    uint256,\\n                    string\\n                )\\n            );\\n\\n        // Call the registrar and register the NFT\\n        addressManager.makerRegistrar().registerNftFromBridge(\\n            owner,\\n            chainId,\\n            nftContractAddress,\\n            nftId,\\n            creatorAddress,\\n            creatorSaleBasisPoints,\\n            optionBits,\\n            ipfsMetadataHash\\n        );\\n    }\\n\\n    /// @dev Handler for messages coming from the L1 when an owner wants to de-register\\n    function _deRegisterNft(bytes memory syncData) internal {\\n        // Decode the params from the data\\n        (\\n            address owner,\\n            uint256 chainId,\\n            address nftContractAddress,\\n            uint256 nftId\\n        ) = abi.decode(syncData, (address, uint256, address, uint256));\\n\\n        addressManager.makerRegistrar().deRegisterNftFromBridge(\\n            owner,\\n            chainId,\\n            nftContractAddress,\\n            nftId\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7393e9ca0c146a91d928e9a9b9817b25fc9b03a7176e012a7ceba8f779913953\",\"license\":\"GPL-3.0-only\"},\"contracts/Config/IAddressManager.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.9;\\n\\nimport \\\"../Permissions/IRoleManager.sol\\\";\\nimport \\\"../Parameters/IParameterManager.sol\\\";\\nimport \\\"../Maker/IMakerRegistrar.sol\\\";\\nimport \\\"../Token/IStandard1155.sol\\\";\\nimport \\\"../Reactions/IReactionVault.sol\\\";\\nimport \\\"../CuratorVault/ICuratorVault.sol\\\";\\n\\ninterface IAddressManager {\\n    /// @dev Getter for the role manager address\\n    function roleManager() external returns (IRoleManager);\\n\\n    /// @dev Setter for the role manager address\\n    function setRoleManager(IRoleManager _roleManager) external;\\n\\n    /// @dev Getter for the role manager address\\n    function parameterManager() external returns (IParameterManager);\\n\\n    /// @dev Setter for the role manager address\\n    function setParameterManager(IParameterManager _parameterManager) external;\\n\\n    /// @dev Getter for the maker registrar address\\n    function makerRegistrar() external returns (IMakerRegistrar);\\n\\n    /// @dev Setter for the maker registrar address\\n    function setMakerRegistrar(IMakerRegistrar _makerRegistrar) external;\\n\\n    /// @dev Getter for the reaction NFT contract address\\n    function reactionNftContract() external returns (IStandard1155);\\n\\n    /// @dev Setter for the reaction NFT contract address\\n    function setReactionNftContract(IStandard1155 _reactionNftContract)\\n        external;\\n\\n    /// @dev Getter for the default Curator Vault contract address\\n    function defaultCuratorVault() external returns (ICuratorVault);\\n\\n    /// @dev Setter for the default Curator Vault contract address\\n    function setDefaultCuratorVault(ICuratorVault _defaultCuratorVault)\\n        external;\\n\\n    /// @dev Getter for the L2 bridge registrar\\n    function childRegistrar() external returns (address);\\n\\n    /// @dev Setter for the L2 bridge registrar\\n    function setChildRegistrar(address _childRegistrar) external;\\n}\\n\",\"keccak256\":\"0x64a481ca905e86b48270c918b0b6a97fb66cdd52fa1732957d2891b4daa6b7c5\",\"license\":\"GPL-3.0-only\"},\"contracts/CuratorVault/ICuratorVault.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.9;\\n\\nimport \\\"../Token/IStandard1155.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n/// @dev Interface for the curator vault\\ninterface ICuratorVault {\\n    function getTokenId(\\n        uint256 nftChainId,\\n        address nftAddress,\\n        uint256 nftId,\\n        IERC20Upgradeable paymentToken\\n    ) external returns (uint256);\\n\\n    function buyCuratorTokens(\\n        uint256 nftChainId,\\n        address nftAddress,\\n        uint256 nftId,\\n        IERC20Upgradeable paymentToken,\\n        uint256 paymentAmount,\\n        address mintToAddress,\\n        bool isTakerPosition\\n    ) external returns (uint256);\\n\\n    function sellCuratorTokens(\\n        uint256 nftChainId,\\n        address nftAddress,\\n        uint256 nftId,\\n        IERC20Upgradeable paymentToken,\\n        uint256 tokensToBurn,\\n        address refundToAddress\\n    ) external returns (uint256);\\n\\n    function curatorTokens() external returns (IStandard1155);\\n}\\n\",\"keccak256\":\"0x6df35df492ee7525fd81d9ff9257891a2f41b0b54e39c88ce29203abee7fbf77\",\"license\":\"GPL-3.0-only\"},\"contracts/Maker/IMakerRegistrar.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.9;\\n\\n/// @dev Interface for the maker registrar that supports registering and de-registering NFTs\\ninterface IMakerRegistrar {\\n    /// @dev struct for storing details about a registered NFT\\n    struct NftDetails {\\n        bool registered;\\n        address owner;\\n        address creator;\\n        uint256 creatorSaleBasisPoints;\\n    }\\n\\n    function transformToSourceLookup(uint256 metaId) external returns (uint256);\\n\\n    function deriveSourceId(\\n        uint256 nftChainId,\\n        address nftAddress,\\n        uint256 nftId\\n    ) external returns (uint256);\\n\\n    /// @dev lookup for NftDetails from source ID\\n    function sourceToDetailsLookup(uint256)\\n        external\\n        returns (\\n            bool,\\n            address,\\n            address,\\n            uint256\\n        );\\n\\n    function verifyOwnership(\\n        address nftContractAddress,\\n        uint256 nftId,\\n        address potentialOwner\\n    ) external returns (bool);\\n\\n    function registerNftFromBridge(\\n        address owner,\\n        uint256 chainId,\\n        address nftContractAddress,\\n        uint256 nftId,\\n        address creatorAddress,\\n        uint256 creatorSaleBasisPoints,\\n        uint256 optionBits,\\n        string memory ipfsMetadataHash\\n    ) external;\\n\\n    function deRegisterNftFromBridge(\\n        address owner,\\n        uint256 chainId,\\n        address nftContractAddress,\\n        uint256 nftId\\n    ) external;\\n}\\n\",\"keccak256\":\"0xdc5d430e2c4a45584ca040fa196b20fd33c94fafda6611d877b38dcdf5b2ab9d\",\"license\":\"GPL-3.0-only\"},\"contracts/Parameters/IParameterManager.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.9;\\n\\nimport \\\"../Permissions/IRoleManager.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IParameterManager {\\n    struct SigmoidCurveParameters {\\n        uint256 a;\\n        uint256 b;\\n        uint256 c;\\n    }\\n\\n    /// @dev Getter for the payment token\\n    function paymentToken() external returns (IERC20Upgradeable);\\n\\n    /// @dev Setter for the payment token\\n    function setPaymentToken(IERC20Upgradeable _paymentToken) external;\\n\\n    /// @dev Getter for the reaction price\\n    function reactionPrice() external returns (uint256);\\n\\n    /// @dev Setter for the reaction price\\n    function setReactionPrice(uint256 _reactionPrice) external;\\n\\n    /// @dev Getter for the cut of purchase price going to the curator liability\\n    function saleCuratorLiabilityBasisPoints() external returns (uint256);\\n\\n    /// @dev Setter for the cut of purchase price going to the curator liability\\n    function setSaleCuratorLiabilityBasisPoints(\\n        uint256 _saleCuratorLiabilityBasisPoints\\n    ) external;\\n\\n    /// @dev Getter for the cut of purchase price going to the referrer\\n    function saleReferrerBasisPoints() external returns (uint256);\\n\\n    /// @dev Setter for the cut of purchase price going to the referrer\\n    function setSaleReferrerBasisPoints(uint256 _saleReferrerBasisPoints)\\n        external;\\n\\n    /// @dev Getter for the cut of spend curator liability going to the taker\\n    function spendTakerBasisPoints() external returns (uint256);\\n\\n    /// @dev Setter for the cut of spend curator liability going to the taker\\n    function setSpendTakerBasisPoints(uint256 _spendTakerBasisPoints) external;\\n\\n    /// @dev Getter for the cut of spend curator liability going to the taker\\n    function spendReferrerBasisPoints() external returns (uint256);\\n\\n    /// @dev Setter for the cut of spend curator liability going to the referrer\\n    function setSpendReferrerBasisPoints(uint256 _spendReferrerBasisPoints)\\n        external;\\n\\n    /// @dev Getter for the check to see if a curator vault is allowed to be used\\n    function approvedCuratorVaults(address potentialVault)\\n        external\\n        returns (bool);\\n\\n    /// @dev Setter for the list of curator vaults allowed to be used\\n    function setApprovedCuratorVaults(address vault, bool approved) external;\\n\\n    // @dev Getter for curator vault bonding curve params\\n    function bondingCurveParams()\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    // @dev Setter for curator vault bonding curve params\\n    function setBondingCurveParams(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7f365d25b5d2b1f4f5f457f9d716bfdc75307fffec3f07f20c00c8311ca6c048\",\"license\":\"GPL-3.0-only\"},\"contracts/Permissions/IRoleManager.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.9;\\n\\ninterface IRoleManager {\\n    /// @dev Determines if the specified address has capability to mint and burn reaction NFTs\\n    /// @param potentialAddress Address to check\\n    function isAdmin(address potentialAddress) external view returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to udpate addresses in the protocol\\n    /// @param potentialAddress Address to check\\n    function isAddressManagerAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to update parameters in the protocol\\n    /// @param potentialAddress Address to check\\n    function isParameterManagerAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to to mint and burn reaction NFTs\\n    /// @param potentialAddress Address to check\\n    function isReactionNftAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to purchase curator vault tokens\\n    /// @param potentialAddress Address to check\\n    function isCuratorVaultPurchaser(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to mint and burn curator tokens\\n    /// @param potentialAddress Address to check\\n    function isCuratorTokenAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x99dc318b1cd6ebfb106d7151e4e6b57c0466921de23bdc5aefb57fa37ee9433b\",\"license\":\"GPL-3.0-only\"},\"contracts/Reactions/IReactionVault.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.9;\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @dev Interface for the ReactionVault that supports buying and spending reactions\\ninterface IReactionVault {\\n    struct ReactionPriceDetails {\\n        IERC20Upgradeable paymentToken;\\n        uint256 reactionPrice;\\n        uint256 saleCuratorLiabilityBasisPoints;\\n    }\\n}\\n\",\"keccak256\":\"0x778ef735f1c5fb0960b64440ee0cc737d8713a95965e715afc641b73787dedd8\",\"license\":\"GPL-3.0-only\"},\"contracts/Token/IStandard1155.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.9;\\n\\n/// @dev Interface for the Standard1155 toke contract.\\ninterface IStandard1155 {\\n    /// @dev Allows a priviledged account to mint tokens to the specified address\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    function burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb029e180e6804b70d25b8972334703e160344619d2f1e7b38b4c51194125b70e\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200140538038062001405833981810160405281019062000037919062000171565b81806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620001b8565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f482620000c7565b9050919050565b6200010681620000e7565b81146200011257600080fd5b50565b6000815190506200012681620000fb565b92915050565b60006200013982620000e7565b9050919050565b6200014b816200012c565b81146200015757600080fd5b50565b6000815190506200016b8162000140565b92915050565b600080604083850312156200018b576200018a620000c2565b5b60006200019b8582860162000115565b9250506020620001ae858286016200015a565b9150509250929050565b61123d80620001c86000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637f1e9cb01161005b5780637f1e9cb0146100dc57806388837094146100fa5780639a7c4b7114610116578063e8a28dd7146101325761007d565b806310325264146100825780633ab76e9f146100a0578063450d11f0146100be575b600080fd5b61008a610150565b60405161009791906107c5565b60405180910390f35b6100a8610174565b6040516100b5919061085f565b60405180910390f35b6100c661019a565b6040516100d3919061089b565b60405180910390f35b6100e46101be565b6040516100f1919061089b565b60405180910390f35b610114600480360381019061010f91906108f6565b6101e4565b005b610130600480360381019061012b91906109be565b6102b9565b005b61013a61039c565b60405161014791906107c5565b60405180910390f35b7ff98aef635801dfa470eae0492dd6a267cc7e32661957109ef6316bfd8bea371e81565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610275576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026c90610ab5565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610347576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033e90610b47565b60405180910390fd5b610396848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506103c0565b50505050565b7f58cc5acb742fd5eb9df21407aed105abca7d37584645d014636aa13c7b7bc38781565b81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610451576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044890610bd9565b60405180910390fd5b600080838060200190518101906104689190610d8a565b915091507f58cc5acb742fd5eb9df21407aed105abca7d37584645d014636aa13c7b7bc3878214156104a25761049d8161051c565b610514565b7ff98aef635801dfa470eae0492dd6a267cc7e32661957109ef6316bfd8bea371e8214156104d8576104d381610671565b610513565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050a90610e32565b60405180910390fd5b5b505050505050565b6000806000806000806000808880602001905181019061053c9190610f46565b97509750975097509750975097509750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663363f8a656040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156105b657600080fd5b505af11580156105ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ee9190611056565b73ffffffffffffffffffffffffffffffffffffffff166343f6c17e89898989898989896040518963ffffffff1660e01b81526004016106349897969594939291906110d6565b600060405180830381600087803b15801561064e57600080fd5b505af1158015610662573d6000803e3d6000fd5b50505050505050505050505050565b6000806000808480602001905181019061068b919061115b565b9350935093509350600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663363f8a656040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156106fd57600080fd5b505af1158015610711573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107359190611056565b73ffffffffffffffffffffffffffffffffffffffff1663fb9b92bc858585856040518563ffffffff1660e01b815260040161077394939291906111c2565b600060405180830381600087803b15801561078d57600080fd5b505af11580156107a1573d6000803e3d6000fd5b505050505050505050565b6000819050919050565b6107bf816107ac565b82525050565b60006020820190506107da60008301846107b6565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061082561082061081b846107e0565b610800565b6107e0565b9050919050565b60006108378261080a565b9050919050565b60006108498261082c565b9050919050565b6108598161083e565b82525050565b60006020820190506108746000830184610850565b92915050565b6000610885826107e0565b9050919050565b6108958161087a565b82525050565b60006020820190506108b0600083018461088c565b92915050565b6000604051905090565b600080fd5b600080fd5b6108d38161087a565b81146108de57600080fd5b50565b6000813590506108f0816108ca565b92915050565b60006020828403121561090c5761090b6108c0565b5b600061091a848285016108e1565b91505092915050565b6000819050919050565b61093681610923565b811461094157600080fd5b50565b6000813590506109538161092d565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261097e5761097d610959565b5b8235905067ffffffffffffffff81111561099b5761099a61095e565b5b6020830191508360018202830111156109b7576109b6610963565b5b9250929050565b600080600080606085870312156109d8576109d76108c0565b5b60006109e687828801610944565b94505060206109f7878288016108e1565b935050604085013567ffffffffffffffff811115610a1857610a176108c5565b5b610a2487828801610968565b925092505092959194509250565b600082825260208201905092915050565b7f4678426173654368696c6454756e6e656c3a20524f4f545f54554e4e454c5f4160008201527f4c52454144595f53455400000000000000000000000000000000000000000000602082015250565b6000610a9f602a83610a32565b9150610aaa82610a43565b604082019050919050565b60006020820190508181036000830152610ace81610a92565b9050919050565b7f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560008201527f5200000000000000000000000000000000000000000000000000000000000000602082015250565b6000610b31602183610a32565b9150610b3c82610ad5565b604082019050919050565b60006020820190508181036000830152610b6081610b24565b9050919050565b7f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560008201527f525f46524f4d5f524f4f54000000000000000000000000000000000000000000602082015250565b6000610bc3602b83610a32565b9150610bce82610b67565b604082019050919050565b60006020820190508181036000830152610bf281610bb6565b9050919050565b610c02816107ac565b8114610c0d57600080fd5b50565b600081519050610c1f81610bf9565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c7382610c2a565b810181811067ffffffffffffffff82111715610c9257610c91610c3b565b5b80604052505050565b6000610ca56108b6565b9050610cb18282610c6a565b919050565b600067ffffffffffffffff821115610cd157610cd0610c3b565b5b610cda82610c2a565b9050602081019050919050565b60005b83811015610d05578082015181840152602081019050610cea565b83811115610d14576000848401525b50505050565b6000610d2d610d2884610cb6565b610c9b565b905082815260208101848484011115610d4957610d48610c25565b5b610d54848285610ce7565b509392505050565b600082601f830112610d7157610d70610959565b5b8151610d81848260208601610d1a565b91505092915050565b60008060408385031215610da157610da06108c0565b5b6000610daf85828601610c10565b925050602083015167ffffffffffffffff811115610dd057610dcf6108c5565b5b610ddc85828601610d5c565b9150509250929050565b7f455252204d534700000000000000000000000000000000000000000000000000600082015250565b6000610e1c600783610a32565b9150610e2782610de6565b602082019050919050565b60006020820190508181036000830152610e4b81610e0f565b9050919050565b6000610e5d826107e0565b9050919050565b610e6d81610e52565b8114610e7857600080fd5b50565b600081519050610e8a81610e64565b92915050565b600081519050610e9f8161092d565b92915050565b600067ffffffffffffffff821115610ec057610ebf610c3b565b5b610ec982610c2a565b9050602081019050919050565b6000610ee9610ee484610ea5565b610c9b565b905082815260208101848484011115610f0557610f04610c25565b5b610f10848285610ce7565b509392505050565b600082601f830112610f2d57610f2c610959565b5b8151610f3d848260208601610ed6565b91505092915050565b600080600080600080600080610100898b031215610f6757610f666108c0565b5b6000610f758b828c01610e7b565b9850506020610f868b828c01610e90565b9750506040610f978b828c01610e7b565b9650506060610fa88b828c01610e90565b9550506080610fb98b828c01610e7b565b94505060a0610fca8b828c01610e90565b93505060c0610fdb8b828c01610e90565b92505060e089015167ffffffffffffffff811115610ffc57610ffb6108c5565b5b6110088b828c01610f18565b9150509295985092959890939650565b60006110238261087a565b9050919050565b61103381611018565b811461103e57600080fd5b50565b6000815190506110508161102a565b92915050565b60006020828403121561106c5761106b6108c0565b5b600061107a84828501611041565b91505092915050565b61108c81610923565b82525050565b600081519050919050565b60006110a882611092565b6110b28185610a32565b93506110c2818560208601610ce7565b6110cb81610c2a565b840191505092915050565b6000610100820190506110ec600083018b61088c565b6110f9602083018a611083565b611106604083018961088c565b6111136060830188611083565b611120608083018761088c565b61112d60a0830186611083565b61113a60c0830185611083565b81810360e083015261114c818461109d565b90509998505050505050505050565b60008060008060808587031215611175576111746108c0565b5b600061118387828801610e7b565b945050602061119487828801610e90565b93505060406111a587828801610e7b565b92505060606111b687828801610e90565b91505092959194509250565b60006080820190506111d7600083018761088c565b6111e46020830186611083565b6111f1604083018561088c565b6111fe6060830184611083565b9594505050505056fea2646970667358221220d968caf4639e371f781acbb5d11ef784d76922203993e02ed50b4681fbb1195164736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80637f1e9cb01161005b5780637f1e9cb0146100dc57806388837094146100fa5780639a7c4b7114610116578063e8a28dd7146101325761007d565b806310325264146100825780633ab76e9f146100a0578063450d11f0146100be575b600080fd5b61008a610150565b60405161009791906107c5565b60405180910390f35b6100a8610174565b6040516100b5919061085f565b60405180910390f35b6100c661019a565b6040516100d3919061089b565b60405180910390f35b6100e46101be565b6040516100f1919061089b565b60405180910390f35b610114600480360381019061010f91906108f6565b6101e4565b005b610130600480360381019061012b91906109be565b6102b9565b005b61013a61039c565b60405161014791906107c5565b60405180910390f35b7ff98aef635801dfa470eae0492dd6a267cc7e32661957109ef6316bfd8bea371e81565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610275576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026c90610ab5565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610347576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033e90610b47565b60405180910390fd5b610396848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506103c0565b50505050565b7f58cc5acb742fd5eb9df21407aed105abca7d37584645d014636aa13c7b7bc38781565b81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610451576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044890610bd9565b60405180910390fd5b600080838060200190518101906104689190610d8a565b915091507f58cc5acb742fd5eb9df21407aed105abca7d37584645d014636aa13c7b7bc3878214156104a25761049d8161051c565b610514565b7ff98aef635801dfa470eae0492dd6a267cc7e32661957109ef6316bfd8bea371e8214156104d8576104d381610671565b610513565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050a90610e32565b60405180910390fd5b5b505050505050565b6000806000806000806000808880602001905181019061053c9190610f46565b97509750975097509750975097509750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663363f8a656040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156105b657600080fd5b505af11580156105ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ee9190611056565b73ffffffffffffffffffffffffffffffffffffffff166343f6c17e89898989898989896040518963ffffffff1660e01b81526004016106349897969594939291906110d6565b600060405180830381600087803b15801561064e57600080fd5b505af1158015610662573d6000803e3d6000fd5b50505050505050505050505050565b6000806000808480602001905181019061068b919061115b565b9350935093509350600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663363f8a656040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156106fd57600080fd5b505af1158015610711573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107359190611056565b73ffffffffffffffffffffffffffffffffffffffff1663fb9b92bc858585856040518563ffffffff1660e01b815260040161077394939291906111c2565b600060405180830381600087803b15801561078d57600080fd5b505af11580156107a1573d6000803e3d6000fd5b505050505050505050565b6000819050919050565b6107bf816107ac565b82525050565b60006020820190506107da60008301846107b6565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061082561082061081b846107e0565b610800565b6107e0565b9050919050565b60006108378261080a565b9050919050565b60006108498261082c565b9050919050565b6108598161083e565b82525050565b60006020820190506108746000830184610850565b92915050565b6000610885826107e0565b9050919050565b6108958161087a565b82525050565b60006020820190506108b0600083018461088c565b92915050565b6000604051905090565b600080fd5b600080fd5b6108d38161087a565b81146108de57600080fd5b50565b6000813590506108f0816108ca565b92915050565b60006020828403121561090c5761090b6108c0565b5b600061091a848285016108e1565b91505092915050565b6000819050919050565b61093681610923565b811461094157600080fd5b50565b6000813590506109538161092d565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261097e5761097d610959565b5b8235905067ffffffffffffffff81111561099b5761099a61095e565b5b6020830191508360018202830111156109b7576109b6610963565b5b9250929050565b600080600080606085870312156109d8576109d76108c0565b5b60006109e687828801610944565b94505060206109f7878288016108e1565b935050604085013567ffffffffffffffff811115610a1857610a176108c5565b5b610a2487828801610968565b925092505092959194509250565b600082825260208201905092915050565b7f4678426173654368696c6454756e6e656c3a20524f4f545f54554e4e454c5f4160008201527f4c52454144595f53455400000000000000000000000000000000000000000000602082015250565b6000610a9f602a83610a32565b9150610aaa82610a43565b604082019050919050565b60006020820190508181036000830152610ace81610a92565b9050919050565b7f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560008201527f5200000000000000000000000000000000000000000000000000000000000000602082015250565b6000610b31602183610a32565b9150610b3c82610ad5565b604082019050919050565b60006020820190508181036000830152610b6081610b24565b9050919050565b7f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560008201527f525f46524f4d5f524f4f54000000000000000000000000000000000000000000602082015250565b6000610bc3602b83610a32565b9150610bce82610b67565b604082019050919050565b60006020820190508181036000830152610bf281610bb6565b9050919050565b610c02816107ac565b8114610c0d57600080fd5b50565b600081519050610c1f81610bf9565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c7382610c2a565b810181811067ffffffffffffffff82111715610c9257610c91610c3b565b5b80604052505050565b6000610ca56108b6565b9050610cb18282610c6a565b919050565b600067ffffffffffffffff821115610cd157610cd0610c3b565b5b610cda82610c2a565b9050602081019050919050565b60005b83811015610d05578082015181840152602081019050610cea565b83811115610d14576000848401525b50505050565b6000610d2d610d2884610cb6565b610c9b565b905082815260208101848484011115610d4957610d48610c25565b5b610d54848285610ce7565b509392505050565b600082601f830112610d7157610d70610959565b5b8151610d81848260208601610d1a565b91505092915050565b60008060408385031215610da157610da06108c0565b5b6000610daf85828601610c10565b925050602083015167ffffffffffffffff811115610dd057610dcf6108c5565b5b610ddc85828601610d5c565b9150509250929050565b7f455252204d534700000000000000000000000000000000000000000000000000600082015250565b6000610e1c600783610a32565b9150610e2782610de6565b602082019050919050565b60006020820190508181036000830152610e4b81610e0f565b9050919050565b6000610e5d826107e0565b9050919050565b610e6d81610e52565b8114610e7857600080fd5b50565b600081519050610e8a81610e64565b92915050565b600081519050610e9f8161092d565b92915050565b600067ffffffffffffffff821115610ec057610ebf610c3b565b5b610ec982610c2a565b9050602081019050919050565b6000610ee9610ee484610ea5565b610c9b565b905082815260208101848484011115610f0557610f04610c25565b5b610f10848285610ce7565b509392505050565b600082601f830112610f2d57610f2c610959565b5b8151610f3d848260208601610ed6565b91505092915050565b600080600080600080600080610100898b031215610f6757610f666108c0565b5b6000610f758b828c01610e7b565b9850506020610f868b828c01610e90565b9750506040610f978b828c01610e7b565b9650506060610fa88b828c01610e90565b9550506080610fb98b828c01610e7b565b94505060a0610fca8b828c01610e90565b93505060c0610fdb8b828c01610e90565b92505060e089015167ffffffffffffffff811115610ffc57610ffb6108c5565b5b6110088b828c01610f18565b9150509295985092959890939650565b60006110238261087a565b9050919050565b61103381611018565b811461103e57600080fd5b50565b6000815190506110508161102a565b92915050565b60006020828403121561106c5761106b6108c0565b5b600061107a84828501611041565b91505092915050565b61108c81610923565b82525050565b600081519050919050565b60006110a882611092565b6110b28185610a32565b93506110c2818560208601610ce7565b6110cb81610c2a565b840191505092915050565b6000610100820190506110ec600083018b61088c565b6110f9602083018a611083565b611106604083018961088c565b6111136060830188611083565b611120608083018761088c565b61112d60a0830186611083565b61113a60c0830185611083565b81810360e083015261114c818461109d565b90509998505050505050505050565b60008060008060808587031215611175576111746108c0565b5b600061118387828801610e7b565b945050602061119487828801610e90565b93505060406111a587828801610e7b565b92505060606111b687828801610e90565b91505092959194509250565b60006080820190506111d7600083018761088c565b6111e46020830186611083565b6111f1604083018561088c565b6111fe6060830184611083565b9594505050505056fea2646970667358221220d968caf4639e371f781acbb5d11ef784d76922203993e02ed50b4681fbb1195164736f6c63430008090033",
  "devdoc": {
    "details": "This contract lives on the L2 and receives messages from the L1 to register and unregister NFTs on the L1 chain. This is not an upgradeable contract and should not be used with a proxy.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "After deployment you must call setFxRootTunnel() with the RootRegistrar Address on the L1.",
        "params": {
          "_addressManager": "- This is the address manager on the protocol",
          "_fxChild": "- This is the contract deployed on the L2 that will be sending messages here. This is a well known deployed contract that Matic has set up."
        }
      }
    },
    "stateVariables": {
      "addressManager": {
        "details": "local reference to the address manager contract"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1928,
        "contract": "contracts/Bridge/ChildRegistrar.sol:ChildRegistrar",
        "label": "fxChild",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1930,
        "contract": "contracts/Bridge/ChildRegistrar.sol:ChildRegistrar",
        "label": "fxRootTunnel",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6901,
        "contract": "contracts/Bridge/ChildRegistrar.sol:ChildRegistrar",
        "label": "addressManager",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IAddressManager)7551"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IAddressManager)7551": {
        "encoding": "inplace",
        "label": "contract IAddressManager",
        "numberOfBytes": "20"
      }
    }
  }
}
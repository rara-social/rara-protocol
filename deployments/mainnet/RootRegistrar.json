{
  "address": "0x2665Aa3846EC61e6D28A0d9F76b70047719F3664",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_checkpointManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fxRoot",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_royaltyRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DE_REGISTER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SEND_MESSAGE_EVENT_SIG",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpointManager",
      "outputs": [
        {
          "internalType": "contract ICheckpointManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        }
      ],
      "name": "deRegisterNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChildTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRoot",
      "outputs": [
        {
          "internalType": "contract IFxStateSender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "processedExits",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inputData",
          "type": "bytes"
        }
      ],
      "name": "receiveMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creatorAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "creatorSaleBasisPoints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "optionBits",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ipfsMetadataHash",
          "type": "string"
        }
      ],
      "name": "registerNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxChildTunnel",
          "type": "address"
        }
      ],
      "name": "setFxChildTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x43ea589b0703a4e8660bdfd94c93e86774b032ecd6df8dc76cdb9bdb835668c6",
  "receipt": {
    "to": null,
    "from": "0xa43C0ad9B1B867AdE1FCF0A88b779b2A3642d1b3",
    "contractAddress": "0x2665Aa3846EC61e6D28A0d9F76b70047719F3664",
    "transactionIndex": 291,
    "gasUsed": "3660019",
    "logsBloom": "0x
    "blockHash": "0x05b75628261d7009f21f1d1d4609a1a06e446e9b5e82df214da4e4147592f5e7",
    "transactionHash": "0x43ea589b0703a4e8660bdfd94c93e86774b032ecd6df8dc76cdb9bdb835668c6",
    "logs": [],
    "blockNumber": 14800453,
    "cumulativeGasUsed": "26390255",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x86e4dc95c7fbdbf52e33d563bbdb00823894c287",
    "0xfe5e5D361b2ad62c541bAb87C45a0B9B018389a2",
    "0x0385603ab55642cb4dd5de3ae9e306809991804f"
  ],
  "numDeployments": 1,
  "solcInputHash": "0c452a7a2a2db8193582d74055ee849a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_checkpointManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxRoot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DE_REGISTER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManager\",\"outputs\":[{\"internalType\":\"contract ICheckpointManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"deRegisterNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChildTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRoot\",\"outputs\":[{\"internalType\":\"contract IFxStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creatorSaleBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionBits\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsMetadataHash\",\"type\":\"string\"}],\"name\":\"registerNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChildTunnel\",\"type\":\"address\"}],\"name\":\"setFxChildTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract lives on the L1 and allows NFT owners to register NFTs that live on the L1. Once ownership is verified, it will send a message up to the contracts on the L2 specifying that the NFT has been registered or unregistered. This is not an upgradeable contract and should not be used with a proxy.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"You must call setFxChildTunnel() with the ChildRegistrar address on the L2 after deployment\",\"params\":{\"_checkpointManager\":\"This is a well known contract deployed by matic that is used to verify messages coming from the L2 down to L1.\",\"_fxRoot\":\"This is a well known contract deployed by matic that will emit the events going from L1 to L2.\"}},\"deRegisterNft(address,uint256)\":{\"details\":\"Allows a NFT owner to de-register the NFT in the protocol on L1 Once the ownership is verified a message will be sent to the Child contract on the L2 chain that will trigger a desgregistration there.\"},\"receiveMessage(bytes)\":{\"details\":\"This function verifies if the transaction actually happened on child chain\",\"params\":{\"inputData\":\"RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt\"}},\"registerNft(address,uint256,address,uint256,uint256,string)\":{\"details\":\"Allows a NFT owner to register the NFT in the protocol on L1 Once the ownership is verified a message will be sent to the Child contract on the L2 chain that will trigger a registration there.\"},\"setFxChildTunnel(address)\":{\"details\":\"Set fxChildTunnel if not set already Only the deploying account can update this Overrides the function in the base contract\"}},\"stateVariables\":{\"deployer\":{\"details\":\"the address that deployed this contract is the only one that can update the fxRootTunnel\"},\"royaltyRegistry\":{\"details\":\"the address where the registry royalty is deployed\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"receiveMessage(bytes)\":{\"notice\":\"receive message from  L2 to L1, validated by proof\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bridge/RootRegistrar.sol\":\"RootRegistrar\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@manifoldxyz/royalty-registry-solidity/contracts/IRoyaltyEngineV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Lookup engine interface\\n */\\ninterface IRoyaltyEngineV1 is IERC165 {\\n\\n    /**\\n     * Get the royalty for a given token (address, id) and value amount.  Does not cache the bps/amounts.  Caches the spec for a given token address\\n     * \\n     * @param tokenAddress - The address of the token\\n     * @param tokenId      - The id of the token\\n     * @param value        - The value you wish to get the royalty of\\n     *\\n     * returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get\\n     */\\n    function getRoyalty(address tokenAddress, uint256 tokenId, uint256 value) external returns(address payable[] memory recipients, uint256[] memory amounts);\\n\\n    /**\\n     * View only version of getRoyalty\\n     * \\n     * @param tokenAddress - The address of the token\\n     * @param tokenId      - The id of the token\\n     * @param value        - The value you wish to get the royalty of\\n     *\\n     * returns Two arrays of equal length, royalty recipients and the corresponding amount each recipient should get\\n     */\\n    function getRoyaltyView(address tokenAddress, uint256 tokenId, uint256 value) external view returns(address payable[] memory recipients, uint256[] memory amounts);\\n}\",\"keccak256\":\"0x088b901b9fe87d03d237b5a0a84ba35c18933dafb9fc344bd4d17a8085ea0387\",\"license\":\"MIT\"},\"@maticnetwork/fx-portal/contracts/lib/ExitPayloadReader.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { RLPReader } from \\\"./RLPReader.sol\\\";\\n\\nlibrary ExitPayloadReader {\\n  using RLPReader for bytes;\\n  using RLPReader for RLPReader.RLPItem;\\n\\n  uint8 constant WORD_SIZE = 32;\\n\\n  struct ExitPayload {\\n    RLPReader.RLPItem[] data;\\n  }\\n\\n  struct Receipt {\\n    RLPReader.RLPItem[] data;\\n    bytes raw;\\n    uint256 logIndex;\\n  }\\n\\n  struct Log {\\n    RLPReader.RLPItem data;\\n    RLPReader.RLPItem[] list;\\n  }\\n\\n  struct LogTopics {\\n    RLPReader.RLPItem[] data;\\n  }\\n\\n  // copy paste of private copy() from RLPReader to avoid changing of existing contracts\\n  function copy(uint src, uint dest, uint len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n  function toExitPayload(bytes memory data)\\n        internal\\n        pure\\n        returns (ExitPayload memory)\\n    {\\n        RLPReader.RLPItem[] memory payloadData = data\\n            .toRlpItem()\\n            .toList();\\n\\n        return ExitPayload(payloadData);\\n    }\\n\\n    function getHeaderNumber(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[0].toUint();\\n    }\\n\\n    function getBlockProof(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[1].toBytes();\\n    }\\n\\n    function getBlockNumber(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[2].toUint();\\n    }\\n\\n    function getBlockTime(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[3].toUint();\\n    }\\n\\n    function getTxRoot(ExitPayload memory payload) internal pure returns(bytes32) {\\n      return bytes32(payload.data[4].toUint());\\n    }\\n\\n    function getReceiptRoot(ExitPayload memory payload) internal pure returns(bytes32) {\\n      return bytes32(payload.data[5].toUint());\\n    }\\n\\n    function getReceipt(ExitPayload memory payload) internal pure returns(Receipt memory receipt) {\\n      receipt.raw = payload.data[6].toBytes();\\n      RLPReader.RLPItem memory receiptItem = receipt.raw.toRlpItem();\\n\\n      if (receiptItem.isList()) {\\n          // legacy tx\\n          receipt.data = receiptItem.toList();\\n      } else {\\n          // pop first byte before parsting receipt\\n          bytes memory typedBytes = receipt.raw;\\n          bytes memory result = new bytes(typedBytes.length - 1);\\n          uint256 srcPtr;\\n          uint256 destPtr;\\n          assembly {\\n              srcPtr := add(33, typedBytes)\\n              destPtr := add(0x20, result)\\n          }\\n\\n          copy(srcPtr, destPtr, result.length);\\n          receipt.data = result.toRlpItem().toList();\\n      }\\n\\n      receipt.logIndex = getReceiptLogIndex(payload);\\n      return receipt;\\n    }\\n\\n    function getReceiptProof(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[7].toBytes();\\n    }\\n\\n    function getBranchMaskAsBytes(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[8].toBytes();\\n    }\\n\\n    function getBranchMaskAsUint(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[8].toUint();\\n    }\\n\\n    function getReceiptLogIndex(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[9].toUint();\\n    }\\n    \\n    // Receipt methods\\n    function toBytes(Receipt memory receipt) internal pure returns(bytes memory) {\\n        return receipt.raw;\\n    }\\n\\n    function getLog(Receipt memory receipt) internal pure returns(Log memory) {\\n        RLPReader.RLPItem memory logData = receipt.data[3].toList()[receipt.logIndex];\\n        return Log(logData, logData.toList());\\n    }\\n\\n    // Log methods\\n    function getEmitter(Log memory log) internal pure returns(address) {\\n      return RLPReader.toAddress(log.list[0]);\\n    }\\n\\n    function getTopics(Log memory log) internal pure returns(LogTopics memory) {\\n        return LogTopics(log.list[1].toList());\\n    }\\n\\n    function getData(Log memory log) internal pure returns(bytes memory) {\\n        return log.list[2].toBytes();\\n    }\\n\\n    function toRlpBytes(Log memory log) internal pure returns(bytes memory) {\\n      return log.data.toRlpBytes();\\n    }\\n\\n    // LogTopics methods\\n    function getField(LogTopics memory topics, uint256 index) internal pure returns(RLPReader.RLPItem memory) {\\n      return topics.data[index];\\n    }\\n}\\n\",\"keccak256\":\"0xdb3cbd2e895069e17db4cdb8a7fcde127bf598f1c8b3c6f272d0e89727af3aca\"},\"@maticnetwork/fx-portal/contracts/lib/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Merkle {\\n    function checkMembership(\\n        bytes32 leaf,\\n        uint256 index,\\n        bytes32 rootHash,\\n        bytes memory proof\\n    ) internal pure returns (bool) {\\n        require(proof.length % 32 == 0, \\\"Invalid proof length\\\");\\n        uint256 proofHeight = proof.length / 32;\\n        // Proof of size n means, height of the tree is n+1.\\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\\n        require(index < 2 ** proofHeight, \\\"Leaf index is too big\\\");\\n\\n        bytes32 proofElement;\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            assembly {\\n                proofElement := mload(add(proof, i))\\n            }\\n\\n            if (index % 2 == 0) {\\n                computedHash = keccak256(\\n                    abi.encodePacked(computedHash, proofElement)\\n                );\\n            } else {\\n                computedHash = keccak256(\\n                    abi.encodePacked(proofElement, computedHash)\\n                );\\n            }\\n\\n            index = index / 2;\\n        }\\n        return computedHash == rootHash;\\n    }\\n}\\n\",\"keccak256\":\"0x20a3e580bfbdf11e27fba2b2cef7e2a4533c694b2d5b47d0107fc9bc716a37e9\",\"license\":\"MIT\"},\"@maticnetwork/fx-portal/contracts/lib/MerklePatriciaProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\nlibrary MerklePatriciaProof {\\n    /*\\n     * @dev Verifies a merkle patricia proof.\\n     * @param value The terminating value in the trie.\\n     * @param encodedPath The path in the trie leading to value.\\n     * @param rlpParentNodes The rlp encoded stack of nodes.\\n     * @param root The root hash of the trie.\\n     * @return The boolean validity of the proof.\\n     */\\n    function verify(\\n        bytes memory value,\\n        bytes memory encodedPath,\\n        bytes memory rlpParentNodes,\\n        bytes32 root\\n    ) internal pure returns (bool) {\\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\\n\\n        bytes memory currentNode;\\n        RLPReader.RLPItem[] memory currentNodeList;\\n\\n        bytes32 nodeKey = root;\\n        uint256 pathPtr = 0;\\n\\n        bytes memory path = _getNibbleArray(encodedPath);\\n        if (path.length == 0) {\\n            return false;\\n        }\\n\\n        for (uint256 i = 0; i < parentNodes.length; i++) {\\n            if (pathPtr > path.length) {\\n                return false;\\n            }\\n\\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\\n            if (nodeKey != keccak256(currentNode)) {\\n                return false;\\n            }\\n            currentNodeList = RLPReader.toList(parentNodes[i]);\\n\\n            if (currentNodeList.length == 17) {\\n                if (pathPtr == path.length) {\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[16])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                uint8 nextPathNibble = uint8(path[pathPtr]);\\n                if (nextPathNibble > 16) {\\n                    return false;\\n                }\\n                nodeKey = bytes32(\\n                    RLPReader.toUintStrict(currentNodeList[nextPathNibble])\\n                );\\n                pathPtr += 1;\\n            } else if (currentNodeList.length == 2) {\\n                uint256 traversed = _nibblesToTraverse(\\n                    RLPReader.toBytes(currentNodeList[0]),\\n                    path,\\n                    pathPtr\\n                );\\n                if (pathPtr + traversed == path.length) {\\n                    //leaf node\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[1])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                //extension node\\n                if (traversed == 0) {\\n                    return false;\\n                }\\n\\n                pathPtr += traversed;\\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\\n            } else {\\n                return false;\\n            }\\n        }\\n    }\\n\\n    function _nibblesToTraverse(\\n        bytes memory encodedPartialPath,\\n        bytes memory path,\\n        uint256 pathPtr\\n    ) private pure returns (uint256) {\\n        uint256 len = 0;\\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\\n        // and slicedPath have elements that are each one hex character (1 nibble)\\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\\n        bytes memory slicedPath = new bytes(partialPath.length);\\n\\n        // pathPtr counts nibbles in path\\n        // partialPath.length is a number of nibbles\\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\\n            bytes1 pathNibble = path[i];\\n            slicedPath[i - pathPtr] = pathNibble;\\n        }\\n\\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\\n            len = partialPath.length;\\n        } else {\\n            len = 0;\\n        }\\n        return len;\\n    }\\n\\n    // bytes b must be hp encoded\\n    function _getNibbleArray(bytes memory b)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory nibbles = \\\"\\\";\\n        if (b.length > 0) {\\n            uint8 offset;\\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\\n            if (hpNibble == 1 || hpNibble == 3) {\\n                nibbles = new bytes(b.length * 2 - 1);\\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\\n                nibbles[0] = oddNibble;\\n                offset = 1;\\n            } else {\\n                nibbles = new bytes(b.length * 2 - 2);\\n                offset = 0;\\n            }\\n\\n            for (uint256 i = offset; i < nibbles.length; i++) {\\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\\n            }\\n        }\\n        return nibbles;\\n    }\\n\\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str)\\n        private\\n        pure\\n        returns (bytes1)\\n    {\\n        return\\n            bytes1(\\n                n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10\\n            );\\n    }\\n}\",\"keccak256\":\"0xdfbc8f6ea9a4c2b46bd902bbbfae049a2b8afe839fc8634257c9551ab6f74d66\",\"license\":\"MIT\"},\"@maticnetwork/fx-portal/contracts/lib/RLPReader.sol\":{\"content\":\"/*\\n* @author Hamdi Allam hamdi.allam97@gmail.com\\n* Please reach out with any questions or concerns\\n*/\\npragma solidity ^0.8.0;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START  = 0xb8;\\n    uint8 constant LIST_SHORT_START   = 0xc0;\\n    uint8 constant LIST_LONG_START    = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint len;\\n        uint memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item;   // Item that's being iterated over.\\n        uint nextPtr;   // Position of the next item in the list.\\n    }\\n\\n    /*\\n    * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n    * @param self The iterator.\\n    * @return The next element in the iteration.\\n    */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint ptr = self.nextPtr;\\n        uint itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n    * @dev Returns true if the iteration has more elements.\\n    * @param self The iterator.\\n    * @return true if the iteration has more elements.\\n    */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n        uint memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n    * @dev Create an iterator. Reverts if item is not a list.\\n    * @param self The RLP item.\\n    * @return An 'Iterator' over the item.\\n    */\\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\n        require(isList(self));\\n\\n        uint ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint) {\\n        return item.len;\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint) {\\n        return item.len - _payloadOffset(item.memPtr);\\n    }\\n\\n    /*\\n    * @param item RLP encoded list in bytes\\n    */\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n        require(isList(item));\\n\\n        uint items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint dataLen;\\n        for (uint i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr); \\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START)\\n            return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    function payloadLocation(RLPItem memory item) internal pure returns (uint, uint) {\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint memPtr = item.memPtr + offset;\\n        uint len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        (uint memPtr, uint len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n        \\n        uint ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint result;\\n        uint memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        return result == 0 ? false : true;\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint len = item.len - offset;\\n\\n        uint result;\\n        uint memPtr = item.memPtr + offset;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint result;\\n        uint memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint len = item.len - offset; // data length\\n        bytes memory result = new bytes(len);\\n\\n        uint destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr + offset, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n    * Private Helpers\\n    */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint) {\\n        if (item.len == 0) return 0;\\n\\n        uint count = 0;\\n        uint currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n           currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n           count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint memPtr) private pure returns (uint) {\\n        uint itemLen;\\n        uint byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START)\\n            itemLen = 1;\\n        \\n        else if (byte0 < STRING_LONG_START)\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } \\n\\n        else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint memPtr) private pure returns (uint) {\\n        uint byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) \\n            return 0;\\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START))\\n            return 1;\\n        else if (byte0 < LIST_SHORT_START)  // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else\\n            return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n    * @param src Pointer to source\\n    * @param dest Pointer to destination\\n    * @param len Amount of memory to copy from the source\\n    */\\n    function copy(uint src, uint dest, uint len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len == 0) return;\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\\n\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x606985ec75fb803aae741a9890b635a5bcf60ba6df1921fdb1aaaaea80cec904\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1edf4e6819997d1820aea89eff73d4fdaeff0bb87ff2f2b4cb6ad60bfe5ba63c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Bridge/FxBaseRootTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {RLPReader} from \\\"@maticnetwork/fx-portal/contracts/lib/RLPReader.sol\\\";\\nimport {MerklePatriciaProof} from \\\"@maticnetwork/fx-portal/contracts/lib/MerklePatriciaProof.sol\\\";\\nimport {Merkle} from \\\"@maticnetwork/fx-portal/contracts/lib/Merkle.sol\\\";\\nimport \\\"@maticnetwork/fx-portal/contracts/lib/ExitPayloadReader.sol\\\";\\n\\n/// @title FxBaseRootTunnel\\n/// @author @maticnetwork\\n/// @notice This contract is copied from @maticnetwork/fx-portal\\n/// @dev The only change was to make setFxChildTunnel() virtual\\n\\ninterface IFxStateSender {\\n    function sendMessageToChild(address _receiver, bytes calldata _data)\\n        external;\\n}\\n\\ncontract ICheckpointManager {\\n    struct HeaderBlock {\\n        bytes32 root;\\n        uint256 start;\\n        uint256 end;\\n        uint256 createdAt;\\n        address proposer;\\n    }\\n\\n    /**\\n     * @notice mapping of checkpoint header numbers to block details\\n     * @dev These checkpoints are submited by plasma contracts\\n     */\\n    mapping(uint256 => HeaderBlock) public headerBlocks;\\n}\\n\\nabstract contract FxBaseRootTunnel {\\n    using RLPReader for RLPReader.RLPItem;\\n    using Merkle for bytes32;\\n    using ExitPayloadReader for bytes;\\n    using ExitPayloadReader for ExitPayloadReader.ExitPayload;\\n    using ExitPayloadReader for ExitPayloadReader.Log;\\n    using ExitPayloadReader for ExitPayloadReader.LogTopics;\\n    using ExitPayloadReader for ExitPayloadReader.Receipt;\\n\\n    // keccak256(MessageSent(bytes))\\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG =\\n        0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\\n\\n    // state sender contract\\n    IFxStateSender public fxRoot;\\n    // root chain manager\\n    ICheckpointManager public checkpointManager;\\n    // child tunnel contract which receives and sends messages\\n    address public fxChildTunnel;\\n\\n    // storage to avoid duplicate exits\\n    mapping(bytes32 => bool) public processedExits;\\n\\n    constructor(address _checkpointManager, address _fxRoot) {\\n        checkpointManager = ICheckpointManager(_checkpointManager);\\n        fxRoot = IFxStateSender(_fxRoot);\\n    }\\n\\n    // set fxChildTunnel if not set already\\n    function setFxChildTunnel(address _fxChildTunnel) public virtual {\\n        require(\\n            fxChildTunnel == address(0x0),\\n            \\\"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\\\"\\n        );\\n        fxChildTunnel = _fxChildTunnel;\\n    }\\n\\n    /**\\n     * @notice Send bytes message to Child Tunnel\\n     * @param message bytes message that will be sent to Child Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToChild(bytes memory message) internal {\\n        fxRoot.sendMessageToChild(fxChildTunnel, message);\\n    }\\n\\n    function _validateAndExtractMessage(bytes memory inputData)\\n        internal\\n        returns (bytes memory)\\n    {\\n        ExitPayloadReader.ExitPayload memory payload = inputData\\n            .toExitPayload();\\n\\n        bytes memory branchMaskBytes = payload.getBranchMaskAsBytes();\\n        uint256 blockNumber = payload.getBlockNumber();\\n        // checking if exit has already been processed\\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\\n        bytes32 exitHash = keccak256(\\n            abi.encodePacked(\\n                blockNumber,\\n                // first 2 nibbles are dropped while generating nibble array\\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\\n                // so converting to nibble array and then hashing it\\n                MerklePatriciaProof._getNibbleArray(branchMaskBytes),\\n                payload.getReceiptLogIndex()\\n            )\\n        );\\n        require(\\n            processedExits[exitHash] == false,\\n            \\\"FxRootTunnel: EXIT_ALREADY_PROCESSED\\\"\\n        );\\n        processedExits[exitHash] = true;\\n\\n        ExitPayloadReader.Receipt memory receipt = payload.getReceipt();\\n        ExitPayloadReader.Log memory log = receipt.getLog();\\n\\n        // check child tunnel\\n        require(\\n            fxChildTunnel == log.getEmitter(),\\n            \\\"FxRootTunnel: INVALID_FX_CHILD_TUNNEL\\\"\\n        );\\n\\n        bytes32 receiptRoot = payload.getReceiptRoot();\\n        // verify receipt inclusion\\n        require(\\n            MerklePatriciaProof.verify(\\n                receipt.toBytes(),\\n                branchMaskBytes,\\n                payload.getReceiptProof(),\\n                receiptRoot\\n            ),\\n            \\\"FxRootTunnel: INVALID_RECEIPT_PROOF\\\"\\n        );\\n\\n        // verify checkpoint inclusion\\n        _checkBlockMembershipInCheckpoint(\\n            blockNumber,\\n            payload.getBlockTime(),\\n            payload.getTxRoot(),\\n            receiptRoot,\\n            payload.getHeaderNumber(),\\n            payload.getBlockProof()\\n        );\\n\\n        ExitPayloadReader.LogTopics memory topics = log.getTopics();\\n\\n        require(\\n            bytes32(topics.getField(0).toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\\n            \\\"FxRootTunnel: INVALID_SIGNATURE\\\"\\n        );\\n\\n        // received message data\\n        bytes memory message = abi.decode(log.getData(), (bytes)); // event decodes params again, so decoding bytes to get message\\n        return message;\\n    }\\n\\n    function _checkBlockMembershipInCheckpoint(\\n        uint256 blockNumber,\\n        uint256 blockTime,\\n        bytes32 txRoot,\\n        bytes32 receiptRoot,\\n        uint256 headerNumber,\\n        bytes memory blockProof\\n    ) private view returns (uint256) {\\n        (\\n            bytes32 headerRoot,\\n            uint256 startBlock,\\n            ,\\n            uint256 createdAt,\\n\\n        ) = checkpointManager.headerBlocks(headerNumber);\\n\\n        require(\\n            keccak256(\\n                abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)\\n            ).checkMembership(blockNumber - startBlock, headerRoot, blockProof),\\n            \\\"FxRootTunnel: INVALID_HEADER\\\"\\n        );\\n        return createdAt;\\n    }\\n\\n    /**\\n     * @notice receive message from  L2 to L1, validated by proof\\n     * @dev This function verifies if the transaction actually happened on child chain\\n     *\\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\\n     *  2 - blockNumber - Block number containing the reference tx on child chain\\n     *  3 - blockTime - Reference tx block time\\n     *  4 - txRoot - Transactions root of block\\n     *  5 - receiptRoot - Receipts root of block\\n     *  6 - receipt - Receipt of the reference transaction\\n     *  7 - receiptProof - Merkle proof of the reference receipt\\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\\n     *  9 - receiptLogIndex - Log Index to read from the receipt\\n     */\\n    function receiveMessage(bytes memory inputData) public virtual {\\n        bytes memory message = _validateAndExtractMessage(inputData);\\n        _processMessageFromChild(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Child Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param message bytes message that was sent from Child Tunnel\\n     */\\n    function _processMessageFromChild(bytes memory message) internal virtual;\\n}\\n\",\"keccak256\":\"0x8c43ad53d6c35e3eef0fd565a8925b56b257b6fb53ecc8fe29777fbb7d110db9\",\"license\":\"MIT\"},\"contracts/Bridge/RootRegistrar.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"./FxBaseRootTunnel.sol\\\";\\nimport \\\"../Maker/NftOwnership.sol\\\";\\nimport \\\"../Royalties/Royalties.sol\\\";\\n\\n/// @dev This contract lives on the L1 and allows NFT owners to register NFTs that live on the L1.\\n/// Once ownership is verified, it will send a message up to the contracts on the L2 specifying that\\n/// the NFT has been registered or unregistered.\\n/// This is not an upgradeable contract and should not be used with a proxy.\\ncontract RootRegistrar is FxBaseRootTunnel {\\n    bytes32 public constant REGISTER = keccak256(\\\"REGISTER\\\");\\n    bytes32 public constant DE_REGISTER = keccak256(\\\"DE_REGISTER\\\");\\n\\n    /// @dev the address that deployed this contract is the only one that can update the fxRootTunnel\\n    address public deployer;\\n\\n    /// @dev the address where the registry royalty is deployed\\n    address royaltyRegistry;\\n\\n    /// @param _checkpointManager This is a well known contract deployed by matic that is used to verify messages coming from the L2 down to L1.\\n    /// @param _fxRoot This is a well known contract deployed by matic that will emit the events going from L1 to L2.\\n    /// @dev You must call setFxChildTunnel() with the ChildRegistrar address on the L2 after deployment\\n    constructor(\\n        address _checkpointManager,\\n        address _fxRoot,\\n        address _royaltyRegistry\\n    ) FxBaseRootTunnel(_checkpointManager, _fxRoot) {\\n        deployer = msg.sender;\\n        royaltyRegistry = _royaltyRegistry;\\n    }\\n\\n    /// @dev Set fxChildTunnel if not set already\\n    /// Only the deploying account can update this\\n    /// Overrides the function in the base contract\\n    function setFxChildTunnel(address _fxChildTunnel) public override {\\n        require(deployer == msg.sender, \\\"Only deployer\\\");\\n        require(fxChildTunnel == address(0x0), \\\"Already set\\\");\\n        fxChildTunnel = _fxChildTunnel;\\n    }\\n\\n    /// @dev Allows a NFT owner to register the NFT in the protocol on L1\\n    /// Once the ownership is verified a message will be sent to the Child contract\\n    /// on the L2 chain that will trigger a registration there.\\n    function registerNft(\\n        address nftContractAddress,\\n        uint256 nftId,\\n        address creatorAddress,\\n        uint256 creatorSaleBasisPoints,\\n        uint256 optionBits,\\n        string memory ipfsMetadataHash\\n    ) external {\\n        // Verify ownership\\n        require(\\n            NftOwnership._verifyOwnership(\\n                nftContractAddress,\\n                nftId,\\n                msg.sender\\n            ),\\n            \\\"NFT not owned\\\"\\n        );\\n\\n        // Get the royalties for the creator addresses - use fallback if none set on chain\\n        (\\n            address[] memory addressesArray,\\n            uint256[] memory creatorBasisPointsArray\\n        ) = Royalties._getRoyaltyOverride(\\n                royaltyRegistry,\\n                nftContractAddress,\\n                nftId,\\n                creatorAddress,\\n                creatorSaleBasisPoints\\n            );\\n\\n        // REGISTER, encode(owner, chainId, nftContractAddress, nftId, creatorAddress, optionBits, ipfsMetadataHash)\\n        bytes memory message = abi.encode(\\n            REGISTER,\\n            abi.encode(\\n                msg.sender,\\n                block.chainid,\\n                nftContractAddress,\\n                nftId,\\n                addressesArray,\\n                creatorBasisPointsArray,\\n                optionBits,\\n                ipfsMetadataHash\\n            )\\n        );\\n        _sendMessageToChild(message);\\n    }\\n\\n    /// @dev Allows a NFT owner to de-register the NFT in the protocol on L1\\n    /// Once the ownership is verified a message will be sent to the Child contract\\n    /// on the L2 chain that will trigger a desgregistration there.\\n    function deRegisterNft(address nftContractAddress, uint256 nftId) external {\\n        // Verify ownership\\n        require(\\n            NftOwnership._verifyOwnership(\\n                nftContractAddress,\\n                nftId,\\n                msg.sender\\n            ),\\n            \\\"NFT not owned\\\"\\n        );\\n\\n        // DERegister, encode(address owner, uint256 chainId, address nftContractAddress, uint256 nftId)\\n        bytes memory message = abi.encode(\\n            DE_REGISTER,\\n            abi.encode(msg.sender, block.chainid, nftContractAddress, nftId)\\n        );\\n        _sendMessageToChild(message);\\n    }\\n\\n    /// @dev NOOP - No messages come from L2 down to L1\\n    function _processMessageFromChild(bytes memory data) internal override {}\\n}\\n\",\"keccak256\":\"0x5864cbbb875e8c6d8fb65654502d2f19a80f7a98b637d4c7e1b83b4d6cf42aeb\",\"license\":\"GPL-3.0\"},\"contracts/Maker/NftOwnership.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\ninterface IPunk {\\n    function punkIndexToAddress(uint256 index) external view returns (address);\\n}\\n\\n/// @dev This is a library for other contracts to use that need to verify ownership of an NFT on the current chain.\\n/// Since this only has internal functions, it will be inlined into the calling contract at\\n/// compile time and does not need to be separately deployed on chain.\\nlibrary NftOwnership {\\n    /// @dev For the specified NFT, verify it is owned by the potential owner\\n    function _verifyOwnership(\\n        address nftContractAddress,\\n        uint256 nftId,\\n        address potentialOwner\\n    ) internal view returns (bool) {\\n        // Try ERC1155\\n        try\\n            IERC1155Upgradeable(nftContractAddress).balanceOf(\\n                potentialOwner,\\n                nftId\\n            )\\n        returns (uint256 balance) {\\n            return balance > 0;\\n        } catch {\\n            // Ignore error\\n        }\\n\\n        // Try ERC721\\n        try IERC721Upgradeable(nftContractAddress).ownerOf(nftId) returns (\\n            address foundOwner\\n        ) {\\n            return foundOwner == potentialOwner;\\n        } catch {\\n            // Ignore error\\n        }\\n\\n        // Try CryptoPunk\\n        try IPunk(nftContractAddress).punkIndexToAddress(nftId) returns (\\n            address foundOwner\\n        ) {\\n            return foundOwner == potentialOwner;\\n        } catch {\\n            // Ignore error\\n        }\\n\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x0753dd292b9ad0b6b1837f11dcd1fc248f1b489001d60704be97585e7c98a817\",\"license\":\"GPL-3.0\"},\"contracts/Royalties/Royalties.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@manifoldxyz/royalty-registry-solidity/contracts/IRoyaltyEngineV1.sol\\\";\\n\\n/// @dev This library uses the Royalty Registry to see if royalties are configured for a specified NFT.\\n/// The Royalty Registry looks at a number of sources to see if the original creator set a royalty\\n/// configurationon the contract, such as EIP-2981, Manifold, Rarible, etc.\\n/// See https://royaltyregistry.xyz/ for more details and deployed addresses.\\n/// The output will be a list of addresses and a value that each should receive.\\nlibrary Royalties {\\n    /// @dev Validate royalties addresses and amounts arrays\\n    function _validateRoyalties(\\n        address payable[] memory recipients,\\n        uint256[] memory amounts\\n    ) internal pure returns (bool) {\\n        // Verify royalties were found\\n        if (recipients.length == 0) {\\n            return false;\\n        }\\n\\n        // Verify array lengths match\\n        if (recipients.length != amounts.length) {\\n            return false;\\n        }\\n\\n        // Calculate the total rewards BP\\n        uint256 totalRewardsBp = 0;\\n\\n        // Verify valid addresses and amounts\\n        for (uint8 i = 0; i < recipients.length; i++) {\\n            if (recipients[i] == address(0x0)) {\\n                return false;\\n            }\\n\\n            if (amounts[i] == 0 || amounts[i] > 10_000) {\\n                return false;\\n            }\\n\\n            totalRewardsBp += amounts[i];\\n        }\\n\\n        // Total rewards across all addresses should not be above 100%\\n        if (totalRewardsBp > 10_000) {\\n            return false;\\n        }\\n\\n        // No issues found, use them\\n        return true;\\n    }\\n\\n    /// @dev Gets the royalties for a specified NFT and uses the fallback values if none are found\\n    /// A sale price of 10,000 will be used as the value to query since the protocol uses basis points\\n    /// to track a percentage of value to send to the creators.  (10k basis points = 100%)\\n    function _getRoyaltyOverride(\\n        address royaltyRegistry,\\n        address nftContractAddress,\\n        uint256 nftId,\\n        address fallbackCreator,\\n        uint256 fallbackCreatorBasisPoints\\n    )\\n        internal\\n        view\\n        returns (\\n            address[] memory creators,\\n            uint256[] memory creatorSaleBasisPoints\\n        )\\n    {\\n        // Query the royalty registry\\n        if (royaltyRegistry != address(0x0)) {\\n            // Use 10k to get back basis points\\n            try\\n                IRoyaltyEngineV1(royaltyRegistry).getRoyaltyView(\\n                    nftContractAddress,\\n                    nftId,\\n                    10_000\\n                )\\n            returns (\\n                address payable[] memory recipients,\\n                uint256[] memory amounts\\n            ) {\\n                // Check to see if valid results were found\\n                if (_validateRoyalties(recipients, amounts)) {\\n                    // Convert to non-payable\\n                    // https://github.com/ethereum/solidity/issues/5462\\n                    address[] memory convertedAddresses = new address[](\\n                        recipients.length\\n                    );\\n                    for (uint8 i = 0; i < recipients.length; i++) {\\n                        convertedAddresses[i] = recipients[i];\\n                    }\\n\\n                    // Use the valid royalties\\n                    return (convertedAddresses, amounts);\\n                }\\n            } catch {\\n                // Ignore an errors\\n            }\\n        }\\n        // None found, use fallback address... address 0x0 means no creator rewards\\n        address[] memory addressesArray = new address[](1);\\n        addressesArray[0] = fallbackCreator;\\n\\n        // Use fallback value, and ensure it is not above 100%\\n        require(fallbackCreatorBasisPoints <= 10_000, \\\"Invalid bp\\\");\\n        uint256[] memory creatorBasisPointsArray = new uint256[](1);\\n        creatorBasisPointsArray[0] = fallbackCreatorBasisPoints;\\n\\n        return (addressesArray, creatorBasisPointsArray);\\n    }\\n}\\n\",\"keccak256\":\"0xc75e97e2e62e18ceb4ce5e8834a482ca03e1d01cd1e53d8dbeaac657682d590b\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063c0857ba011610071578063c0857ba01461017b578063c679ff9a14610199578063d5f39488146101b5578063de9b771f146101d3578063e8a28dd7146101f1578063f953cec71461020f576100b4565b80630e387de6146100b957806310325264146100d7578063607f2d42146100f5578063972c492814610125578063aea4e49e14610143578063b7d0ee431461015f575b600080fd5b6100c161022b565b6040516100ce91906126de565b60405180910390f35b6100df610252565b6040516100ec91906126de565b60405180910390f35b61010f600480360381019061010a9190612739565b610276565b60405161011c9190612781565b60405180910390f35b61012d610296565b60405161013a91906127dd565b60405180910390f35b61015d60048036038101906101589190612824565b6102bc565b005b61017960048036038101906101749190612887565b610421565b005b6101836104e4565b6040516101909190612926565b60405180910390f35b6101b360048036038101906101ae9190612a87565b61050a565b005b6101bd610611565b6040516101ca91906127dd565b60405180910390f35b6101db610637565b6040516101e89190612b51565b60405180910390f35b6101f961065b565b60405161020691906126de565b60405180910390f35b61022960048036038101906102249190612c0d565b61067f565b005b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03660001b81565b7ff98aef635801dfa470eae0492dd6a267cc7e32661957109ef6316bfd8bea371e81565b60036020528060005260406000206000915054906101000a900460ff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461034c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390612cb3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146103dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d490612d1f565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61042c828233610699565b61046b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046290612d8b565b60405180910390fd5b60007ff98aef635801dfa470eae0492dd6a267cc7e32661957109ef6316bfd8bea371e334685856040516020016104a59493929190612dba565b6040516020818303038152906040526040516020016104c5929190612e87565b60405160208183030381529060405290506104df816108c3565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610515868633610699565b610554576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054b90612d8b565b60405180910390fd5b600080610586600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1689898989610975565b9150915060007f58cc5acb742fd5eb9df21407aed105abca7d37584645d014636aa13c7b7bc38733468b8b87878b8b6040516020016105cc989796959493929190613077565b6040516020818303038152906040526040516020016105ec929190612e87565b6040516020818303038152906040529050610606816108c3565b505050505050505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f58cc5acb742fd5eb9df21407aed105abca7d37584645d014636aa13c7b7bc38781565b600061068a82610ca6565b905061069581610fab565b5050565b60008373ffffffffffffffffffffffffffffffffffffffff1662fdd58e83856040518363ffffffff1660e01b81526004016106d592919061310a565b60206040518083038186803b1580156106ed57600080fd5b505afa92505050801561071e57506040513d601f19601f8201168201806040525081019061071b9190613148565b60015b61072757610733565b600081119150506108bc565b8373ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b815260040161076c9190613175565b60206040518083038186803b15801561078457600080fd5b505afa9250505080156107b557506040513d601f19601f820116820180604052508101906107b291906131a5565b60015b6107be576107f5565b8273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16149150506108bc565b8373ffffffffffffffffffffffffffffffffffffffff166358178168846040518263ffffffff1660e01b815260040161082e9190613175565b60206040518083038186803b15801561084657600080fd5b505afa92505050801561087757506040513d601f19601f8201168201806040525081019061087491906131a5565b60015b610880576108b7565b8273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16149150506108bc565b600090505b9392505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b4720477600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016109409291906131d2565b600060405180830381600087803b15801561095a57600080fd5b505af115801561096e573d6000803e3d6000fd5b5050505050565b606080600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614610b42578673ffffffffffffffffffffffffffffffffffffffff16633e10401487876127106040518463ffffffff1660e01b81526004016109eb9392919061323d565b60006040518083038186803b158015610a0357600080fd5b505afa925050508015610a3957506040513d6000823e3d601f19601f82011682018060405250810190610a36919061343d565b60015b610a4257610b41565b610a4c8282610fae565b15610b3e576000825167ffffffffffffffff811115610a6e57610a6d61295c565b5b604051908082528060200260200182016040528015610a9c5781602001602082028036833780820191505090505b50905060005b83518160ff161015610b2f57838160ff1681518110610ac457610ac36134b5565b5b6020026020010151828260ff1681518110610ae257610ae16134b5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080610b2790613520565b915050610aa2565b50808294509450505050610c9c565b50505b5b6000600167ffffffffffffffff811115610b5f57610b5e61295c565b5b604051908082528060200260200182016040528015610b8d5781602001602082028036833780820191505090505b5090508481600081518110610ba557610ba46134b5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050612710841115610c24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1b90613596565b60405180910390fd5b6000600167ffffffffffffffff811115610c4157610c4061295c565b5b604051908082528060200260200182016040528015610c6f5781602001602082028036833780820191505090505b5090508481600081518110610c8757610c866134b5565b5b60200260200101818152505081819350935050505b9550959350505050565b60606000610cb3836110fa565b90506000610cc08261112e565b90506000610ccd8361115f565b9050600081610cdb84611190565b610ce4866113a6565b604051602001610cf693929190613613565b604051602081830303815290604052805190602001209050600015156003600083815260200190815260200160002060009054906101000a900460ff16151514610d75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6c906136be565b60405180910390fd5b60016003600083815260200190815260200160002060006101000a81548160ff0219169083151502179055506000610dac856113d7565b90506000610db9826114fc565b9050610dc481611573565b73ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4a90613750565b60405180910390fd5b6000610e5e876115a4565b9050610e7c610e6c846115d8565b87610e768a6115e6565b84611617565b610ebb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb2906137e2565b60405180910390fd5b610ee985610ec88961191d565b610ed18a61194e565b84610edb8c611982565b610ee48d6119b3565b6119e4565b506000610ef583611b3a565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03660001b610f37610f32600084611b7f90919063ffffffff16565b611bae565b60001b14610f7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f719061384e565b60405180910390fd5b6000610f8584611c31565b806020019051810190610f9891906138de565b9050809950505050505050505050919050565b50565b60008083511415610fc257600090506110f4565b8151835114610fd457600090506110f4565b6000805b84518160ff1610156110d957600073ffffffffffffffffffffffffffffffffffffffff16858260ff1681518110611012576110116134b5565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415611041576000925050506110f4565b6000848260ff1681518110611059576110586134b5565b5b6020026020010151148061108b5750612710848260ff1681518110611081576110806134b5565b5b6020026020010151115b1561109b576000925050506110f4565b838160ff16815181106110b1576110b06134b5565b5b6020026020010151826110c49190613927565b915080806110d190613520565b915050610fd8565b506127108111156110ee5760009150506110f4565b60019150505b92915050565b611102612644565b600061111561111084611c62565b611c90565b9050604051806020016040528082815250915050919050565b6060611158826000015160088151811061114b5761114a6134b5565b5b6020026020010151611da5565b9050919050565b6000611189826000015160028151811061117c5761117b6134b5565b5b6020026020010151611bae565b9050919050565b6060600060405180602001604052806000815250905060008351111561139d576000806111be600086611e5c565b60f81c905060018160ff1614806111d8575060038160ff16145b156112a2576001600286516111ed919061397d565b6111f791906139d7565b67ffffffffffffffff8111156112105761120f61295c565b5b6040519080825280601f01601f1916602001820160405280156112425781602001600182028036833780820191505090505b5092506000611252600187611e5c565b90508084600081518110611269576112686134b5565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600192505061130e565b60028086516112b1919061397d565b6112bb91906139d7565b67ffffffffffffffff8111156112d4576112d361295c565b5b6040519080825280601f01601f1916602001820160405280156113065781602001600182028036833780820191505090505b509250600091505b60008260ff1690505b83518110156113995761134460028460ff168361133491906139d7565b61133e9190613927565b87611e5c565b848281518110611357576113566134b5565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808061139190613a0b565b915050611317565b5050505b80915050919050565b60006113d082600001516009815181106113c3576113c26134b5565b5b6020026020010151611bae565b9050919050565b6113df612657565b61140782600001516006815181106113fa576113f96134b5565b5b6020026020010151611da5565b8160200181905250600061141e8260200151611c62565b905061142981611ef4565b156114445761143781611c90565b82600001819052506114e4565b60008260200151905060006001825161145d91906139d7565b67ffffffffffffffff8111156114765761147561295c565b5b6040519080825280601f01601f1916602001820160405280156114a85781602001600182028036833780820191505090505b5090506000808360210191508260200190506114c682828551611f42565b6114d76114d284611c62565b611c90565b8660000181905250505050505b6114ed836113a6565b82604001818152505050919050565b611504612678565b600061152e8360000151600381518110611521576115206134b5565b5b6020026020010151611c90565b836040015181518110611544576115436134b5565b5b60200260200101519050604051806040016040528082815260200161156883611c90565b815250915050919050565b600061159d82602001516000815181106115905761158f6134b5565b5b6020026020010151611fdf565b9050919050565b60006115ce82600001516005815181106115c1576115c06134b5565b5b6020026020010151611bae565b60001b9050919050565b606081602001519050919050565b60606116108260000151600781518110611603576116026134b5565b5b6020026020010151611da5565b9050919050565b60008061162384611c62565b9050600061163082611c90565b905060608060008690506000806116468b611190565b9050600081511415611662576000975050505050505050611915565b60005b865181101561190c57815183111561168857600098505050505050505050611915565b6116ab87828151811061169e5761169d6134b5565b5b6020026020010151612002565b9550858051906020012084146116cc57600098505050505050505050611915565b6116ef8782815181106116e2576116e16134b5565b5b6020026020010151611c90565b94506011855114156117e257815183141561175f578c8051906020012061173086601081518110611723576117226134b5565b5b6020026020010151611da5565b80519060200120141561174e57600198505050505050505050611915565b600098505050505050505050611915565b6000828481518110611774576117736134b5565b5b602001015160f81c60f81b60f81c905060108160ff1611156117a25760009950505050505050505050611915565b6117c8868260ff16815181106117bb576117ba6134b5565b5b6020026020010151612092565b60001b94506001846117da9190613927565b9350506118f9565b6002855114156118e757600061181c61181587600081518110611808576118076134b5565b5b6020026020010151611da5565b84866120c9565b90508251818561182c9190613927565b141561188f578d8051906020012061185e87600181518110611851576118506134b5565b5b6020026020010151611da5565b80519060200120141561187d5760019950505050505050505050611915565b60009950505050505050505050611915565b60008114156118aa5760009950505050505050505050611915565b80846118b69190613927565b93506118dc866001815181106118cf576118ce6134b5565b5b6020026020010151612092565b60001b9450506118f8565b600098505050505050505050611915565b5b808061190490613a0b565b915050611665565b50505050505050505b949350505050565b6000611947826000015160038151811061193a576119396134b5565b5b6020026020010151611bae565b9050919050565b6000611978826000015160048151811061196b5761196a6134b5565b5b6020026020010151611bae565b60001b9050919050565b60006119ac826000015160008151811061199f5761199e6134b5565b5b6020026020010151611bae565b9050919050565b60606119dd82600001516001815181106119d0576119cf6134b5565b5b6020026020010151611da5565b9050919050565b600080600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166341539d4a876040518263ffffffff1660e01b8152600401611a459190613175565b60a06040518083038186803b158015611a5d57600080fd5b505afa158015611a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a959190613a69565b5093505092509250611aeb828b611aac91906139d7565b84878d8d8d8d604051602001611ac59493929190613b05565b604051602081830303815290604052805190602001206121ff909392919063ffffffff16565b611b2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2190613b9f565b60405180910390fd5b8093505050509695505050505050565b611b42612698565b6040518060200160405280611b758460200151600181518110611b6857611b676134b5565b5b6020026020010151611c90565b8152509050919050565b611b876126ab565b82600001518281518110611b9e57611b9d6134b5565b5b6020026020010151905092915050565b6000808260000151118015611bc857506021826000015111155b611bd157600080fd5b6000611be08360200151612370565b90506000818460000151611bf491906139d7565b9050600080838660200151611c099190613927565b9050805191506020831015611c2557826020036101000a820491505b81945050505050919050565b6060611c5b8260200151600281518110611c4e57611c4d6134b5565b5b6020026020010151611da5565b9050919050565b611c6a6126ab565b600060208301905060405180604001604052808451815260200182815250915050919050565b6060611c9b82611ef4565b611ca457600080fd5b6000611caf8361242f565b905060008167ffffffffffffffff811115611ccd57611ccc61295c565b5b604051908082528060200260200182016040528015611d0657816020015b611cf36126ab565b815260200190600190039081611ceb5790505b5090506000611d188560200151612370565b8560200151611d279190613927565b9050600080600090505b84811015611d9857611d42836124bd565b9150604051806040016040528083815260200184815250848281518110611d6c57611d6b6134b5565b5b60200260200101819052508183611d839190613927565b92508080611d9090613a0b565b915050611d31565b5082945050505050919050565b60606000826000015111611db857600080fd5b6000611dc78360200151612370565b90506000818460000151611ddb91906139d7565b905060008167ffffffffffffffff811115611df957611df861295c565b5b6040519080825280601f01601f191660200182016040528015611e2b5781602001600182028036833780820191505090505b5090506000816020019050611e50848760200151611e499190613927565b8285612599565b81945050505050919050565b600080600284611e6c9190613bee565b14611eaf57601082600285611e819190613c1f565b81518110611e9257611e916134b5565b5b602001015160f81c60f81b60f81c611eaa9190613c50565b611ee9565b601082600285611ebf9190613c1f565b81518110611ed057611ecf6134b5565b5b602001015160f81c60f81b60f81c611ee89190613c81565b5b60f81b905092915050565b60008082600001511415611f0b5760009050611f3d565b60008083602001519050805160001a915060c060ff168260ff161015611f3657600092505050611f3d565b6001925050505b919050565b6000811415611f5057611fda565b5b602060ff168110611f9b5782518252602060ff1683611f709190613927565b9250602060ff1682611f829190613927565b9150602060ff1681611f9491906139d7565b9050611f51565b6000600182602060ff16611faf91906139d7565b610100611fbc9190613de5565b611fc691906139d7565b905080198451168184511681811785525050505b505050565b60006015826000015114611ff257600080fd5b611ffb82611bae565b9050919050565b60606000826000015167ffffffffffffffff8111156120245761202361295c565b5b6040519080825280601f01601f1916602001820160405280156120565781602001600182028036833780820191505090505b50905060008151141561206c578091505061208d565b60008160200190506120878460200151828660000151612599565b81925050505b919050565b600060218260000151146120a557600080fd5b600080600184602001516120b99190613927565b9050805191508192505050919050565b6000806000905060006120db86611190565b90506000815167ffffffffffffffff8111156120fa576120f961295c565b5b6040519080825280601f01601f19166020018201604052801561212c5781602001600182028036833780820191505090505b50905060008590505b8251866121429190613927565b8110156121cd57600087828151811061215e5761215d6134b5565b5b602001015160f81c60f81b90508083888461217991906139d7565b8151811061218a576121896134b5565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505080806121c590613a0b565b915050612135565b508080519060200120828051906020012014156121ed57815192506121f2565b600092505b8293505050509392505050565b600080602083516122109190613bee565b14612250576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161224790613e7c565b60405180910390fd5b6000602083516122609190613c1f565b905080600261226f9190613de5565b85106122b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a790613ee8565b60405180910390fd5b6000808790506000602090505b8551811161235f5780860151925060006002896122da9190613bee565b14156123105781836040516020016122f3929190613f08565b60405160208183030381529060405280519060200120915061233c565b8282604051602001612323929190613f08565b6040516020818303038152906040528051906020012091505b6002886123499190613c1f565b97506020816123589190613927565b90506122bd565b508581149350505050949350505050565b600080825160001a9050608060ff1681101561239057600091505061242a565b60b860ff168110806123b5575060c060ff1681101580156123b4575060f860ff1681105b5b156123c457600191505061242a565b60c060ff168110156123ff5760018060b86123df9190613f34565b60ff16826123ed91906139d7565b6123f79190613927565b91505061242a565b60018060f861240e9190613f34565b60ff168261241c91906139d7565b6124269190613927565b9150505b919050565b6000808260000151141561244657600090506124b8565b6000806124568460200151612370565b84602001516124659190613927565b905060008460000151856020015161247d9190613927565b90505b808210156124b157612491826124bd565b8261249c9190613927565b915082806124a990613a0b565b935050612480565b8293505050505b919050565b6000806000835160001a9050608060ff168110156124de576001915061258f565b60b860ff1681101561250d576001608060ff16826124fc91906139d7565b6125069190613927565b915061258e565b60c060ff1681101561253d5760b78103600185019450806020036101000a8551046001820181019350505061258d565b60f860ff1681101561256c57600160c060ff168261255b91906139d7565b6125659190613927565b915061258c565b60f78103600185019450806020036101000a855104600182018101935050505b5b5b5b8192505050919050565b60008114156125a75761263f565b5b602060ff1681106125f25782518252602060ff16836125c79190613927565b9250602060ff16826125d99190613927565b9150602060ff16816125eb91906139d7565b90506125a8565b60008114156126005761263f565b6000600182602060ff1661261491906139d7565b6101006126219190613de5565b61262b91906139d7565b905080198451168184511681811785525050505b505050565b6040518060200160405280606081525090565b60405180606001604052806060815260200160608152602001600081525090565b604051806040016040528061268b6126ab565b8152602001606081525090565b6040518060200160405280606081525090565b604051806040016040528060008152602001600081525090565b6000819050919050565b6126d8816126c5565b82525050565b60006020820190506126f360008301846126cf565b92915050565b6000604051905090565b600080fd5b600080fd5b612716816126c5565b811461272157600080fd5b50565b6000813590506127338161270d565b92915050565b60006020828403121561274f5761274e612703565b5b600061275d84828501612724565b91505092915050565b60008115159050919050565b61277b81612766565b82525050565b60006020820190506127966000830184612772565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006127c78261279c565b9050919050565b6127d7816127bc565b82525050565b60006020820190506127f260008301846127ce565b92915050565b612801816127bc565b811461280c57600080fd5b50565b60008135905061281e816127f8565b92915050565b60006020828403121561283a57612839612703565b5b60006128488482850161280f565b91505092915050565b6000819050919050565b61286481612851565b811461286f57600080fd5b50565b6000813590506128818161285b565b92915050565b6000806040838503121561289e5761289d612703565b5b60006128ac8582860161280f565b92505060206128bd85828601612872565b9150509250929050565b6000819050919050565b60006128ec6128e76128e28461279c565b6128c7565b61279c565b9050919050565b60006128fe826128d1565b9050919050565b6000612910826128f3565b9050919050565b61292081612905565b82525050565b600060208201905061293b6000830184612917565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6129948261294b565b810181811067ffffffffffffffff821117156129b3576129b261295c565b5b80604052505050565b60006129c66126f9565b90506129d2828261298b565b919050565b600067ffffffffffffffff8211156129f2576129f161295c565b5b6129fb8261294b565b9050602081019050919050565b82818337600083830152505050565b6000612a2a612a25846129d7565b6129bc565b905082815260208101848484011115612a4657612a45612946565b5b612a51848285612a08565b509392505050565b600082601f830112612a6e57612a6d612941565b5b8135612a7e848260208601612a17565b91505092915050565b60008060008060008060c08789031215612aa457612aa3612703565b5b6000612ab289828a0161280f565b9650506020612ac389828a01612872565b9550506040612ad489828a0161280f565b9450506060612ae589828a01612872565b9350506080612af689828a01612872565b92505060a087013567ffffffffffffffff811115612b1757612b16612708565b5b612b2389828a01612a59565b9150509295509295509295565b6000612b3b826128f3565b9050919050565b612b4b81612b30565b82525050565b6000602082019050612b666000830184612b42565b92915050565b600067ffffffffffffffff821115612b8757612b8661295c565b5b612b908261294b565b9050602081019050919050565b6000612bb0612bab84612b6c565b6129bc565b905082815260208101848484011115612bcc57612bcb612946565b5b612bd7848285612a08565b509392505050565b600082601f830112612bf457612bf3612941565b5b8135612c04848260208601612b9d565b91505092915050565b600060208284031215612c2357612c22612703565b5b600082013567ffffffffffffffff811115612c4157612c40612708565b5b612c4d84828501612bdf565b91505092915050565b600082825260208201905092915050565b7f4f6e6c79206465706c6f79657200000000000000000000000000000000000000600082015250565b6000612c9d600d83612c56565b9150612ca882612c67565b602082019050919050565b60006020820190508181036000830152612ccc81612c90565b9050919050565b7f416c726561647920736574000000000000000000000000000000000000000000600082015250565b6000612d09600b83612c56565b9150612d1482612cd3565b602082019050919050565b60006020820190508181036000830152612d3881612cfc565b9050919050565b7f4e4654206e6f74206f776e656400000000000000000000000000000000000000600082015250565b6000612d75600d83612c56565b9150612d8082612d3f565b602082019050919050565b60006020820190508181036000830152612da481612d68565b9050919050565b612db481612851565b82525050565b6000608082019050612dcf60008301876127ce565b612ddc6020830186612dab565b612de960408301856127ce565b612df66060830184612dab565b95945050505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612e39578082015181840152602081019050612e1e565b83811115612e48576000848401525b50505050565b6000612e5982612dff565b612e638185612e0a565b9350612e73818560208601612e1b565b612e7c8161294b565b840191505092915050565b6000604082019050612e9c60008301856126cf565b8181036020830152612eae8184612e4e565b90509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612eec816127bc565b82525050565b6000612efe8383612ee3565b60208301905092915050565b6000602082019050919050565b6000612f2282612eb7565b612f2c8185612ec2565b9350612f3783612ed3565b8060005b83811015612f68578151612f4f8882612ef2565b9750612f5a83612f0a565b925050600181019050612f3b565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612faa81612851565b82525050565b6000612fbc8383612fa1565b60208301905092915050565b6000602082019050919050565b6000612fe082612f75565b612fea8185612f80565b9350612ff583612f91565b8060005b8381101561302657815161300d8882612fb0565b975061301883612fc8565b925050600181019050612ff9565b5085935050505092915050565b600081519050919050565b600061304982613033565b6130538185612c56565b9350613063818560208601612e1b565b61306c8161294b565b840191505092915050565b60006101008201905061308d600083018b6127ce565b61309a602083018a612dab565b6130a760408301896127ce565b6130b46060830188612dab565b81810360808301526130c68187612f17565b905081810360a08301526130da8186612fd5565b90506130e960c0830185612dab565b81810360e08301526130fb818461303e565b90509998505050505050505050565b600060408201905061311f60008301856127ce565b61312c6020830184612dab565b9392505050565b6000815190506131428161285b565b92915050565b60006020828403121561315e5761315d612703565b5b600061316c84828501613133565b91505092915050565b600060208201905061318a6000830184612dab565b92915050565b60008151905061319f816127f8565b92915050565b6000602082840312156131bb576131ba612703565b5b60006131c984828501613190565b91505092915050565b60006040820190506131e760008301856127ce565b81810360208301526131f98184612e4e565b90509392505050565b6000819050919050565b600061322761322261321d84613202565b6128c7565b612851565b9050919050565b6132378161320c565b82525050565b600060608201905061325260008301866127ce565b61325f6020830185612dab565b61326c604083018461322e565b949350505050565b600067ffffffffffffffff82111561328f5761328e61295c565b5b602082029050602081019050919050565b600080fd5b60006132b08261279c565b9050919050565b6132c0816132a5565b81146132cb57600080fd5b50565b6000815190506132dd816132b7565b92915050565b60006132f66132f184613274565b6129bc565b90508083825260208201905060208402830185811115613319576133186132a0565b5b835b81811015613342578061332e88826132ce565b84526020840193505060208101905061331b565b5050509392505050565b600082601f83011261336157613360612941565b5b81516133718482602086016132e3565b91505092915050565b600067ffffffffffffffff8211156133955761339461295c565b5b602082029050602081019050919050565b60006133b96133b48461337a565b6129bc565b905080838252602082019050602084028301858111156133dc576133db6132a0565b5b835b8181101561340557806133f18882613133565b8452602084019350506020810190506133de565b5050509392505050565b600082601f83011261342457613423612941565b5b81516134348482602086016133a6565b91505092915050565b6000806040838503121561345457613453612703565b5b600083015167ffffffffffffffff81111561347257613471612708565b5b61347e8582860161334c565b925050602083015167ffffffffffffffff81111561349f5761349e612708565b5b6134ab8582860161340f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff82169050919050565b600061352b82613513565b915060ff82141561353f5761353e6134e4565b5b600182019050919050565b7f496e76616c696420627000000000000000000000000000000000000000000000600082015250565b6000613580600a83612c56565b915061358b8261354a565b602082019050919050565b600060208201905081810360008301526135af81613573565b9050919050565b6000819050919050565b6135d16135cc82612851565b6135b6565b82525050565b600081905092915050565b60006135ed82612dff565b6135f781856135d7565b9350613607818560208601612e1b565b80840191505092915050565b600061361f82866135c0565b60208201915061362f82856135e2565b915061363b82846135c0565b602082019150819050949350505050565b7f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560008201527f5353454400000000000000000000000000000000000000000000000000000000602082015250565b60006136a8602483612c56565b91506136b38261364c565b604082019050919050565b600060208201905081810360008301526136d78161369b565b9050919050565b7f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f5460008201527f554e4e454c000000000000000000000000000000000000000000000000000000602082015250565b600061373a602583612c56565b9150613745826136de565b604082019050919050565b600060208201905081810360008301526137698161372d565b9050919050565b7f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260008201527f4f4f460000000000000000000000000000000000000000000000000000000000602082015250565b60006137cc602383612c56565b91506137d782613770565b604082019050919050565b600060208201905081810360008301526137fb816137bf565b9050919050565b7f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e415455524500600082015250565b6000613838601f83612c56565b915061384382613802565b602082019050919050565b600060208201905081810360008301526138678161382b565b9050919050565b600061388161387c84612b6c565b6129bc565b90508281526020810184848401111561389d5761389c612946565b5b6138a8848285612e1b565b509392505050565b600082601f8301126138c5576138c4612941565b5b81516138d584826020860161386e565b91505092915050565b6000602082840312156138f4576138f3612703565b5b600082015167ffffffffffffffff81111561391257613911612708565b5b61391e848285016138b0565b91505092915050565b600061393282612851565b915061393d83612851565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613972576139716134e4565b5b828201905092915050565b600061398882612851565b915061399383612851565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156139cc576139cb6134e4565b5b828202905092915050565b60006139e282612851565b91506139ed83612851565b925082821015613a00576139ff6134e4565b5b828203905092915050565b6000613a1682612851565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613a4957613a486134e4565b5b600182019050919050565b600081519050613a638161270d565b92915050565b600080600080600060a08688031215613a8557613a84612703565b5b6000613a9388828901613a54565b9550506020613aa488828901613133565b9450506040613ab588828901613133565b9350506060613ac688828901613133565b9250506080613ad788828901613190565b9150509295509295909350565b6000819050919050565b613aff613afa826126c5565b613ae4565b82525050565b6000613b1182876135c0565b602082019150613b2182866135c0565b602082019150613b318285613aee565b602082019150613b418284613aee565b60208201915081905095945050505050565b7f4678526f6f7454756e6e656c3a20494e56414c49445f48454144455200000000600082015250565b6000613b89601c83612c56565b9150613b9482613b53565b602082019050919050565b60006020820190508181036000830152613bb881613b7c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613bf982612851565b9150613c0483612851565b925082613c1457613c13613bbf565b5b828206905092915050565b6000613c2a82612851565b9150613c3583612851565b925082613c4557613c44613bbf565b5b828204905092915050565b6000613c5b82613513565b9150613c6683613513565b925082613c7657613c75613bbf565b5b828206905092915050565b6000613c8c82613513565b9150613c9783613513565b925082613ca757613ca6613bbf565b5b828204905092915050565b60008160011c9050919050565b6000808291508390505b6001851115613d0957808604811115613ce557613ce46134e4565b5b6001851615613cf45780820291505b8081029050613d0285613cb2565b9450613cc9565b94509492505050565b600082613d225760019050613dde565b81613d305760009050613dde565b8160018114613d465760028114613d5057613d7f565b6001915050613dde565b60ff841115613d6257613d616134e4565b5b8360020a915084821115613d7957613d786134e4565b5b50613dde565b5060208310610133831016604e8410600b8410161715613db45782820a905083811115613daf57613dae6134e4565b5b613dde565b613dc18484846001613cbf565b92509050818404811115613dd857613dd76134e4565b5b81810290505b9392505050565b6000613df082612851565b9150613dfb83612851565b9250613e287fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613d12565b905092915050565b7f496e76616c69642070726f6f66206c656e677468000000000000000000000000600082015250565b6000613e66601483612c56565b9150613e7182613e30565b602082019050919050565b60006020820190508181036000830152613e9581613e59565b9050919050565b7f4c65616620696e64657820697320746f6f206269670000000000000000000000600082015250565b6000613ed2601583612c56565b9150613edd82613e9c565b602082019050919050565b60006020820190508181036000830152613f0181613ec5565b9050919050565b6000613f148285613aee565b602082019150613f248284613aee565b6020820191508190509392505050565b6000613f3f82613513565b9150613f4a83613513565b925082821015613f5d57613f5c6134e4565b5b82820390509291505056fea26469706673582212207632d4088aeee4b020a674429d20959bf13acfff284e0c83442f7d002ea2dceb64736f6c63430008090033",
  "devdoc": {
    "details": "This contract lives on the L1 and allows NFT owners to register NFTs that live on the L1. Once ownership is verified, it will send a message up to the contracts on the L2 specifying that the NFT has been registered or unregistered. This is not an upgradeable contract and should not be used with a proxy.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "You must call setFxChildTunnel() with the ChildRegistrar address on the L2 after deployment",
        "params": {
          "_checkpointManager": "This is a well known contract deployed by matic that is used to verify messages coming from the L2 down to L1.",
          "_fxRoot": "This is a well known contract deployed by matic that will emit the events going from L1 to L2."
        }
      },
      "deRegisterNft(address,uint256)": {
        "details": "Allows a NFT owner to de-register the NFT in the protocol on L1 Once the ownership is verified a message will be sent to the Child contract on the L2 chain that will trigger a desgregistration there."
      },
      "receiveMessage(bytes)": {
        "details": "This function verifies if the transaction actually happened on child chain",
        "params": {
          "inputData": "RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt"
        }
      },
      "registerNft(address,uint256,address,uint256,uint256,string)": {
        "details": "Allows a NFT owner to register the NFT in the protocol on L1 Once the ownership is verified a message will be sent to the Child contract on the L2 chain that will trigger a registration there."
      },
      "setFxChildTunnel(address)": {
        "details": "Set fxChildTunnel if not set already Only the deploying account can update this Overrides the function in the base contract"
      }
    },
    "stateVariables": {
      "deployer": {
        "details": "the address that deployed this contract is the only one that can update the fxRootTunnel"
      },
      "royaltyRegistry": {
        "details": "the address where the registry royalty is deployed"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "receiveMessage(bytes)": {
        "notice": "receive message from  L2 to L1, validated by proof"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7258,
        "contract": "contracts/Bridge/RootRegistrar.sol:RootRegistrar",
        "label": "fxRoot",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IFxStateSender)7208"
      },
      {
        "astId": 7261,
        "contract": "contracts/Bridge/RootRegistrar.sol:RootRegistrar",
        "label": "checkpointManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICheckpointManager)7226"
      },
      {
        "astId": 7263,
        "contract": "contracts/Bridge/RootRegistrar.sol:RootRegistrar",
        "label": "fxChildTunnel",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 7267,
        "contract": "contracts/Bridge/RootRegistrar.sol:RootRegistrar",
        "label": "processedExits",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 7580,
        "contract": "contracts/Bridge/RootRegistrar.sol:RootRegistrar",
        "label": "deployer",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 7583,
        "contract": "contracts/Bridge/RootRegistrar.sol:RootRegistrar",
        "label": "royaltyRegistry",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICheckpointManager)7226": {
        "encoding": "inplace",
        "label": "contract ICheckpointManager",
        "numberOfBytes": "20"
      },
      "t_contract(IFxStateSender)7208": {
        "encoding": "inplace",
        "label": "contract IFxStateSender",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}
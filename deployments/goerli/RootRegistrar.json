{
  "address": "0xC3C93DBf716006900146B2cf6055ff7a217316C7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_checkpointManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fxRoot",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DE_REGISTER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SEND_MESSAGE_EVENT_SIG",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpointManager",
      "outputs": [
        {
          "internalType": "contract ICheckpointManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        }
      ],
      "name": "deRegisterNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChildTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRoot",
      "outputs": [
        {
          "internalType": "contract IFxStateSender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "processedExits",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inputData",
          "type": "bytes"
        }
      ],
      "name": "receiveMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creatorAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "creatorSaleBasisPoints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "optionBits",
          "type": "uint256"
        }
      ],
      "name": "registerNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxChildTunnel",
          "type": "address"
        }
      ],
      "name": "setFxChildTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbb827547eba27d0bf9e47b6e12098d28331e49d228a43b6ac3944a9b585e19d5",
  "receipt": {
    "to": null,
    "from": "0xE27B562C20f689c0e80e6eAaA59D17ABB662129F",
    "contractAddress": "0xC3C93DBf716006900146B2cf6055ff7a217316C7",
    "transactionIndex": 1,
    "gasUsed": "3069664",
    "logsBloom": "0x
    "blockHash": "0x0ab580db42ceffc7b813bbdc321ec797349639d8fa8ec1d30215b2320bdbac0e",
    "transactionHash": "0xbb827547eba27d0bf9e47b6e12098d28331e49d228a43b6ac3944a9b585e19d5",
    "logs": [],
    "blockNumber": 6623173,
    "cumulativeGasUsed": "3125461",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2890bA17EfE978480615e330ecB65333b880928e",
    "0x3d1d3E34f7fB6D26245E6640E1c50710eFFf15bA"
  ],
  "numDeployments": 1,
  "solcInputHash": "ceb95f7bc4a63ad25349627214c0303f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_checkpointManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxRoot\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DE_REGISTER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManager\",\"outputs\":[{\"internalType\":\"contract ICheckpointManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"deRegisterNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChildTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRoot\",\"outputs\":[{\"internalType\":\"contract IFxStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creatorSaleBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionBits\",\"type\":\"uint256\"}],\"name\":\"registerNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChildTunnel\",\"type\":\"address\"}],\"name\":\"setFxChildTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract lives on the L1 and allows NFT owners to register NFTs that live on the L1. Once ownership is verified, it will send a message up to the contracts on the L2 specifying that the NFT has been registered or unregistered. This is not an upgradeable contract and should not be used with a proxy.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"You must call setFxChildTunnel() with the ChildRegistrar address on the L2 after deployment\",\"params\":{\"_checkpointManager\":\"This is a well known contract deployed by matic that is used to verify messages coming from the L2 down to L1.\",\"_fxRoot\":\"This is a well known contract deployed by matic that will emit the events going from L1 to L2.\"}},\"deRegisterNft(address,uint256)\":{\"details\":\"Allows a NFT owner to de-register the NFT in the protocol on L1 Once the ownership is verified a message will be sent to the Child contract on the L2 chain that will trigger a desgregistration there.\"},\"receiveMessage(bytes)\":{\"details\":\"This function verifies if the transaction actually happened on child chain\",\"params\":{\"inputData\":\"RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt\"}},\"registerNft(address,uint256,address,uint256,uint256)\":{\"details\":\"Allows a NFT owner to register the NFT in the protocol on L1 Once the ownership is verified a message will be sent to the Child contract on the L2 chain that will trigger a registration there.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"receiveMessage(bytes)\":{\"notice\":\"receive message from  L2 to L1, validated by proof\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bridge/RootRegistrar.sol\":\"RootRegistrar\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@maticnetwork/fx-portal/contracts/lib/ExitPayloadReader.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport { RLPReader } from \\\"./RLPReader.sol\\\";\\n\\nlibrary ExitPayloadReader {\\n  using RLPReader for bytes;\\n  using RLPReader for RLPReader.RLPItem;\\n\\n  uint8 constant WORD_SIZE = 32;\\n\\n  struct ExitPayload {\\n    RLPReader.RLPItem[] data;\\n  }\\n\\n  struct Receipt {\\n    RLPReader.RLPItem[] data;\\n    bytes raw;\\n    uint256 logIndex;\\n  }\\n\\n  struct Log {\\n    RLPReader.RLPItem data;\\n    RLPReader.RLPItem[] list;\\n  }\\n\\n  struct LogTopics {\\n    RLPReader.RLPItem[] data;\\n  }\\n\\n  // copy paste of private copy() from RLPReader to avoid changing of existing contracts\\n  function copy(uint src, uint dest, uint len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n  function toExitPayload(bytes memory data)\\n        internal\\n        pure\\n        returns (ExitPayload memory)\\n    {\\n        RLPReader.RLPItem[] memory payloadData = data\\n            .toRlpItem()\\n            .toList();\\n\\n        return ExitPayload(payloadData);\\n    }\\n\\n    function getHeaderNumber(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[0].toUint();\\n    }\\n\\n    function getBlockProof(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[1].toBytes();\\n    }\\n\\n    function getBlockNumber(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[2].toUint();\\n    }\\n\\n    function getBlockTime(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[3].toUint();\\n    }\\n\\n    function getTxRoot(ExitPayload memory payload) internal pure returns(bytes32) {\\n      return bytes32(payload.data[4].toUint());\\n    }\\n\\n    function getReceiptRoot(ExitPayload memory payload) internal pure returns(bytes32) {\\n      return bytes32(payload.data[5].toUint());\\n    }\\n\\n    function getReceipt(ExitPayload memory payload) internal pure returns(Receipt memory receipt) {\\n      receipt.raw = payload.data[6].toBytes();\\n      RLPReader.RLPItem memory receiptItem = receipt.raw.toRlpItem();\\n\\n      if (receiptItem.isList()) {\\n          // legacy tx\\n          receipt.data = receiptItem.toList();\\n      } else {\\n          // pop first byte before parsting receipt\\n          bytes memory typedBytes = receipt.raw;\\n          bytes memory result = new bytes(typedBytes.length - 1);\\n          uint256 srcPtr;\\n          uint256 destPtr;\\n          assembly {\\n              srcPtr := add(33, typedBytes)\\n              destPtr := add(0x20, result)\\n          }\\n\\n          copy(srcPtr, destPtr, result.length);\\n          receipt.data = result.toRlpItem().toList();\\n      }\\n\\n      receipt.logIndex = getReceiptLogIndex(payload);\\n      return receipt;\\n    }\\n\\n    function getReceiptProof(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[7].toBytes();\\n    }\\n\\n    function getBranchMaskAsBytes(ExitPayload memory payload) internal pure returns(bytes memory) {\\n      return payload.data[8].toBytes();\\n    }\\n\\n    function getBranchMaskAsUint(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[8].toUint();\\n    }\\n\\n    function getReceiptLogIndex(ExitPayload memory payload) internal pure returns(uint256) {\\n      return payload.data[9].toUint();\\n    }\\n    \\n    // Receipt methods\\n    function toBytes(Receipt memory receipt) internal pure returns(bytes memory) {\\n        return receipt.raw;\\n    }\\n\\n    function getLog(Receipt memory receipt) internal pure returns(Log memory) {\\n        RLPReader.RLPItem memory logData = receipt.data[3].toList()[receipt.logIndex];\\n        return Log(logData, logData.toList());\\n    }\\n\\n    // Log methods\\n    function getEmitter(Log memory log) internal pure returns(address) {\\n      return RLPReader.toAddress(log.list[0]);\\n    }\\n\\n    function getTopics(Log memory log) internal pure returns(LogTopics memory) {\\n        return LogTopics(log.list[1].toList());\\n    }\\n\\n    function getData(Log memory log) internal pure returns(bytes memory) {\\n        return log.list[2].toBytes();\\n    }\\n\\n    function toRlpBytes(Log memory log) internal pure returns(bytes memory) {\\n      return log.data.toRlpBytes();\\n    }\\n\\n    // LogTopics methods\\n    function getField(LogTopics memory topics, uint256 index) internal pure returns(RLPReader.RLPItem memory) {\\n      return topics.data[index];\\n    }\\n}\\n\",\"keccak256\":\"0xdb3cbd2e895069e17db4cdb8a7fcde127bf598f1c8b3c6f272d0e89727af3aca\"},\"@maticnetwork/fx-portal/contracts/lib/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Merkle {\\n    function checkMembership(\\n        bytes32 leaf,\\n        uint256 index,\\n        bytes32 rootHash,\\n        bytes memory proof\\n    ) internal pure returns (bool) {\\n        require(proof.length % 32 == 0, \\\"Invalid proof length\\\");\\n        uint256 proofHeight = proof.length / 32;\\n        // Proof of size n means, height of the tree is n+1.\\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\\n        require(index < 2 ** proofHeight, \\\"Leaf index is too big\\\");\\n\\n        bytes32 proofElement;\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            assembly {\\n                proofElement := mload(add(proof, i))\\n            }\\n\\n            if (index % 2 == 0) {\\n                computedHash = keccak256(\\n                    abi.encodePacked(computedHash, proofElement)\\n                );\\n            } else {\\n                computedHash = keccak256(\\n                    abi.encodePacked(proofElement, computedHash)\\n                );\\n            }\\n\\n            index = index / 2;\\n        }\\n        return computedHash == rootHash;\\n    }\\n}\\n\",\"keccak256\":\"0x20a3e580bfbdf11e27fba2b2cef7e2a4533c694b2d5b47d0107fc9bc716a37e9\",\"license\":\"MIT\"},\"@maticnetwork/fx-portal/contracts/lib/MerklePatriciaProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\nlibrary MerklePatriciaProof {\\n    /*\\n     * @dev Verifies a merkle patricia proof.\\n     * @param value The terminating value in the trie.\\n     * @param encodedPath The path in the trie leading to value.\\n     * @param rlpParentNodes The rlp encoded stack of nodes.\\n     * @param root The root hash of the trie.\\n     * @return The boolean validity of the proof.\\n     */\\n    function verify(\\n        bytes memory value,\\n        bytes memory encodedPath,\\n        bytes memory rlpParentNodes,\\n        bytes32 root\\n    ) internal pure returns (bool) {\\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\\n\\n        bytes memory currentNode;\\n        RLPReader.RLPItem[] memory currentNodeList;\\n\\n        bytes32 nodeKey = root;\\n        uint256 pathPtr = 0;\\n\\n        bytes memory path = _getNibbleArray(encodedPath);\\n        if (path.length == 0) {\\n            return false;\\n        }\\n\\n        for (uint256 i = 0; i < parentNodes.length; i++) {\\n            if (pathPtr > path.length) {\\n                return false;\\n            }\\n\\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\\n            if (nodeKey != keccak256(currentNode)) {\\n                return false;\\n            }\\n            currentNodeList = RLPReader.toList(parentNodes[i]);\\n\\n            if (currentNodeList.length == 17) {\\n                if (pathPtr == path.length) {\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[16])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                uint8 nextPathNibble = uint8(path[pathPtr]);\\n                if (nextPathNibble > 16) {\\n                    return false;\\n                }\\n                nodeKey = bytes32(\\n                    RLPReader.toUintStrict(currentNodeList[nextPathNibble])\\n                );\\n                pathPtr += 1;\\n            } else if (currentNodeList.length == 2) {\\n                uint256 traversed = _nibblesToTraverse(\\n                    RLPReader.toBytes(currentNodeList[0]),\\n                    path,\\n                    pathPtr\\n                );\\n                if (pathPtr + traversed == path.length) {\\n                    //leaf node\\n                    if (\\n                        keccak256(RLPReader.toBytes(currentNodeList[1])) ==\\n                        keccak256(value)\\n                    ) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                //extension node\\n                if (traversed == 0) {\\n                    return false;\\n                }\\n\\n                pathPtr += traversed;\\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\\n            } else {\\n                return false;\\n            }\\n        }\\n    }\\n\\n    function _nibblesToTraverse(\\n        bytes memory encodedPartialPath,\\n        bytes memory path,\\n        uint256 pathPtr\\n    ) private pure returns (uint256) {\\n        uint256 len = 0;\\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\\n        // and slicedPath have elements that are each one hex character (1 nibble)\\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\\n        bytes memory slicedPath = new bytes(partialPath.length);\\n\\n        // pathPtr counts nibbles in path\\n        // partialPath.length is a number of nibbles\\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\\n            bytes1 pathNibble = path[i];\\n            slicedPath[i - pathPtr] = pathNibble;\\n        }\\n\\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\\n            len = partialPath.length;\\n        } else {\\n            len = 0;\\n        }\\n        return len;\\n    }\\n\\n    // bytes b must be hp encoded\\n    function _getNibbleArray(bytes memory b)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory nibbles = \\\"\\\";\\n        if (b.length > 0) {\\n            uint8 offset;\\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\\n            if (hpNibble == 1 || hpNibble == 3) {\\n                nibbles = new bytes(b.length * 2 - 1);\\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\\n                nibbles[0] = oddNibble;\\n                offset = 1;\\n            } else {\\n                nibbles = new bytes(b.length * 2 - 2);\\n                offset = 0;\\n            }\\n\\n            for (uint256 i = offset; i < nibbles.length; i++) {\\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\\n            }\\n        }\\n        return nibbles;\\n    }\\n\\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str)\\n        private\\n        pure\\n        returns (bytes1)\\n    {\\n        return\\n            bytes1(\\n                n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10\\n            );\\n    }\\n}\",\"keccak256\":\"0xdfbc8f6ea9a4c2b46bd902bbbfae049a2b8afe839fc8634257c9551ab6f74d66\",\"license\":\"MIT\"},\"@maticnetwork/fx-portal/contracts/lib/RLPReader.sol\":{\"content\":\"/*\\n* @author Hamdi Allam hamdi.allam97@gmail.com\\n* Please reach out with any questions or concerns\\n*/\\npragma solidity ^0.8.0;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START  = 0xb8;\\n    uint8 constant LIST_SHORT_START   = 0xc0;\\n    uint8 constant LIST_LONG_START    = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint len;\\n        uint memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item;   // Item that's being iterated over.\\n        uint nextPtr;   // Position of the next item in the list.\\n    }\\n\\n    /*\\n    * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n    * @param self The iterator.\\n    * @return The next element in the iteration.\\n    */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint ptr = self.nextPtr;\\n        uint itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n    * @dev Returns true if the iteration has more elements.\\n    * @param self The iterator.\\n    * @return true if the iteration has more elements.\\n    */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n        uint memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n    * @dev Create an iterator. Reverts if item is not a list.\\n    * @param self The RLP item.\\n    * @return An 'Iterator' over the item.\\n    */\\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\n        require(isList(self));\\n\\n        uint ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint) {\\n        return item.len;\\n    }\\n\\n    /*\\n    * @param item RLP encoded bytes\\n    */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint) {\\n        return item.len - _payloadOffset(item.memPtr);\\n    }\\n\\n    /*\\n    * @param item RLP encoded list in bytes\\n    */\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n        require(isList(item));\\n\\n        uint items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint dataLen;\\n        for (uint i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr); \\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START)\\n            return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    function payloadLocation(RLPItem memory item) internal pure returns (uint, uint) {\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint memPtr = item.memPtr + offset;\\n        uint len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        (uint memPtr, uint len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n        \\n        uint ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint result;\\n        uint memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        return result == 0 ? false : true;\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint len = item.len - offset;\\n\\n        uint result;\\n        uint memPtr = item.memPtr + offset;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint result;\\n        uint memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint len = item.len - offset; // data length\\n        bytes memory result = new bytes(len);\\n\\n        uint destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr + offset, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n    * Private Helpers\\n    */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint) {\\n        if (item.len == 0) return 0;\\n\\n        uint count = 0;\\n        uint currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n           currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n           count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint memPtr) private pure returns (uint) {\\n        uint itemLen;\\n        uint byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START)\\n            itemLen = 1;\\n        \\n        else if (byte0 < STRING_LONG_START)\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } \\n\\n        else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint memPtr) private pure returns (uint) {\\n        uint byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) \\n            return 0;\\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START))\\n            return 1;\\n        else if (byte0 < LIST_SHORT_START)  // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else\\n            return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n    * @param src Pointer to source\\n    * @param dest Pointer to destination\\n    * @param len Amount of memory to copy from the source\\n    */\\n    function copy(uint src, uint dest, uint len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len == 0) return;\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\\n\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x606985ec75fb803aae741a9890b635a5bcf60ba6df1921fdb1aaaaea80cec904\"},\"@maticnetwork/fx-portal/contracts/tunnel/FxBaseRootTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nimport {RLPReader} from \\\"../lib/RLPReader.sol\\\";\\nimport {MerklePatriciaProof} from \\\"../lib/MerklePatriciaProof.sol\\\";\\nimport {Merkle} from \\\"../lib/Merkle.sol\\\";\\nimport \\\"../lib/ExitPayloadReader.sol\\\";\\n\\n\\ninterface IFxStateSender {\\n    function sendMessageToChild(address _receiver, bytes calldata _data) external;\\n}\\n\\ncontract ICheckpointManager {\\n    struct HeaderBlock {\\n        bytes32 root;\\n        uint256 start;\\n        uint256 end;\\n        uint256 createdAt;\\n        address proposer;\\n    }\\n\\n    /**\\n     * @notice mapping of checkpoint header numbers to block details\\n     * @dev These checkpoints are submited by plasma contracts\\n     */\\n    mapping(uint256 => HeaderBlock) public headerBlocks;\\n}\\n\\nabstract contract FxBaseRootTunnel {\\n    using RLPReader for RLPReader.RLPItem;\\n    using Merkle for bytes32;\\n    using ExitPayloadReader for bytes;\\n    using ExitPayloadReader for ExitPayloadReader.ExitPayload;\\n    using ExitPayloadReader for ExitPayloadReader.Log;\\n    using ExitPayloadReader for ExitPayloadReader.LogTopics;\\n    using ExitPayloadReader for ExitPayloadReader.Receipt;\\n\\n    // keccak256(MessageSent(bytes))\\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\\n\\n    // state sender contract\\n    IFxStateSender public fxRoot;\\n    // root chain manager\\n    ICheckpointManager public checkpointManager;\\n    // child tunnel contract which receives and sends messages \\n    address public fxChildTunnel;\\n\\n    // storage to avoid duplicate exits\\n    mapping(bytes32 => bool) public processedExits;\\n\\n    constructor(address _checkpointManager, address _fxRoot) {\\n        checkpointManager = ICheckpointManager(_checkpointManager);\\n        fxRoot = IFxStateSender(_fxRoot);\\n    }\\n\\n    // set fxChildTunnel if not set already\\n    function setFxChildTunnel(address _fxChildTunnel) public {\\n        require(fxChildTunnel == address(0x0), \\\"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\\\");\\n        fxChildTunnel = _fxChildTunnel;\\n    }\\n\\n    /**\\n     * @notice Send bytes message to Child Tunnel\\n     * @param message bytes message that will be sent to Child Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToChild(bytes memory message) internal {\\n        fxRoot.sendMessageToChild(fxChildTunnel, message);\\n    }\\n\\n    function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\\n        ExitPayloadReader.ExitPayload memory payload = inputData.toExitPayload();\\n\\n        bytes memory branchMaskBytes = payload.getBranchMaskAsBytes();\\n        uint256 blockNumber = payload.getBlockNumber();\\n        // checking if exit has already been processed\\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\\n        bytes32 exitHash = keccak256(\\n            abi.encodePacked(\\n                blockNumber,\\n                // first 2 nibbles are dropped while generating nibble array\\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\\n                // so converting to nibble array and then hashing it\\n                MerklePatriciaProof._getNibbleArray(branchMaskBytes),\\n                payload.getReceiptLogIndex()\\n            )\\n        );\\n        require(\\n            processedExits[exitHash] == false,\\n            \\\"FxRootTunnel: EXIT_ALREADY_PROCESSED\\\"\\n        );\\n        processedExits[exitHash] = true;\\n\\n        ExitPayloadReader.Receipt memory receipt = payload.getReceipt();\\n        ExitPayloadReader.Log memory log = receipt.getLog();\\n\\n        // check child tunnel\\n        require(fxChildTunnel == log.getEmitter(), \\\"FxRootTunnel: INVALID_FX_CHILD_TUNNEL\\\");\\n\\n        bytes32 receiptRoot = payload.getReceiptRoot();\\n        // verify receipt inclusion\\n        require(\\n            MerklePatriciaProof.verify(\\n                receipt.toBytes(), \\n                branchMaskBytes, \\n                payload.getReceiptProof(), \\n                receiptRoot\\n            ),\\n            \\\"FxRootTunnel: INVALID_RECEIPT_PROOF\\\"\\n        );\\n\\n        // verify checkpoint inclusion\\n        _checkBlockMembershipInCheckpoint(\\n            blockNumber,\\n            payload.getBlockTime(),\\n            payload.getTxRoot(),\\n            receiptRoot,\\n            payload.getHeaderNumber(),\\n            payload.getBlockProof()\\n        );\\n\\n        ExitPayloadReader.LogTopics memory topics = log.getTopics();\\n\\n        require(\\n            bytes32(topics.getField(0).toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\\n            \\\"FxRootTunnel: INVALID_SIGNATURE\\\"\\n        );\\n\\n        // received message data\\n        (bytes memory message) = abi.decode(log.getData(), (bytes)); // event decodes params again, so decoding bytes to get message\\n        return message;\\n    }\\n\\n    function _checkBlockMembershipInCheckpoint(\\n        uint256 blockNumber,\\n        uint256 blockTime,\\n        bytes32 txRoot,\\n        bytes32 receiptRoot,\\n        uint256 headerNumber,\\n        bytes memory blockProof\\n    ) private view returns (uint256) {\\n        (\\n            bytes32 headerRoot,\\n            uint256 startBlock,\\n            ,\\n            uint256 createdAt,\\n\\n        ) = checkpointManager.headerBlocks(headerNumber);\\n\\n        require(\\n            keccak256(\\n                abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)\\n            )\\n                .checkMembership(\\n                blockNumber-startBlock,\\n                headerRoot,\\n                blockProof\\n            ),\\n            \\\"FxRootTunnel: INVALID_HEADER\\\"\\n        );\\n        return createdAt;\\n    }\\n\\n    /**\\n     * @notice receive message from  L2 to L1, validated by proof\\n     * @dev This function verifies if the transaction actually happened on child chain\\n     *\\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\\n     *  2 - blockNumber - Block number containing the reference tx on child chain\\n     *  3 - blockTime - Reference tx block time\\n     *  4 - txRoot - Transactions root of block\\n     *  5 - receiptRoot - Receipts root of block\\n     *  6 - receipt - Receipt of the reference transaction\\n     *  7 - receiptProof - Merkle proof of the reference receipt\\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\\n     *  9 - receiptLogIndex - Log Index to read from the receipt\\n     */\\n    function receiveMessage(bytes memory inputData) public virtual {\\n        bytes memory message = _validateAndExtractMessage(inputData);\\n        _processMessageFromChild(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Child Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param message bytes message that was sent from Child Tunnel\\n     */\\n    function _processMessageFromChild(bytes memory message) virtual internal;\\n}\\n\",\"keccak256\":\"0x0cd588c3f7c6bb2a450e094e92b899db8c3ea3f5cfedd132efd1eccbddacbe82\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1edf4e6819997d1820aea89eff73d4fdaeff0bb87ff2f2b4cb6ad60bfe5ba63c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/Bridge/RootRegistrar.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@maticnetwork/fx-portal/contracts/tunnel/FxBaseRootTunnel.sol\\\";\\nimport \\\"../Maker/NftOwnership.sol\\\";\\n\\n/// @dev This contract lives on the L1 and allows NFT owners to register NFTs that live on the L1.\\n/// Once ownership is verified, it will send a message up to the contracts on the L2 specifying that\\n/// the NFT has been registered or unregistered.\\n/// This is not an upgradeable contract and should not be used with a proxy.\\ncontract RootRegistrar is FxBaseRootTunnel {\\n    bytes32 public constant REGISTER = keccak256(\\\"REGISTER\\\");\\n    bytes32 public constant DE_REGISTER = keccak256(\\\"DE_REGISTER\\\");\\n\\n    /// @param _checkpointManager This is a well known contract deployed by matic that is used to verify messages coming from the L2 down to L1.\\n    /// @param _fxRoot This is a well known contract deployed by matic that will emit the events going from L1 to L2.\\n    /// @dev You must call setFxChildTunnel() with the ChildRegistrar address on the L2 after deployment\\n    constructor(address _checkpointManager, address _fxRoot)\\n        FxBaseRootTunnel(_checkpointManager, _fxRoot)\\n    {}\\n\\n    /// @dev Allows a NFT owner to register the NFT in the protocol on L1\\n    /// Once the ownership is verified a message will be sent to the Child contract\\n    /// on the L2 chain that will trigger a registration there.\\n    function registerNft(\\n        address nftContractAddress,\\n        uint256 nftId,\\n        address creatorAddress,\\n        uint256 creatorSaleBasisPoints,\\n        uint256 optionBits\\n    ) external {\\n        // Verify ownership\\n        require(\\n            NftOwnership._verifyOwnership(\\n                nftContractAddress,\\n                nftId,\\n                msg.sender\\n            ),\\n            \\\"NFT not owned\\\"\\n        );\\n\\n        // REGISTER, encode(owner, chainId, nftContractAddress, nftId, creatorAddress, optionBits)\\n        bytes memory message = abi.encode(\\n            REGISTER,\\n            abi.encode(\\n                msg.sender,\\n                block.chainid,\\n                nftContractAddress,\\n                nftId,\\n                creatorAddress,\\n                creatorSaleBasisPoints,\\n                optionBits\\n            )\\n        );\\n        _sendMessageToChild(message);\\n    }\\n\\n    /// @dev Allows a NFT owner to de-register the NFT in the protocol on L1\\n    /// Once the ownership is verified a message will be sent to the Child contract\\n    /// on the L2 chain that will trigger a desgregistration there.\\n    function deRegisterNft(address nftContractAddress, uint256 nftId) external {\\n        // Verify ownership\\n        require(\\n            NftOwnership._verifyOwnership(\\n                nftContractAddress,\\n                nftId,\\n                msg.sender\\n            ),\\n            \\\"NFT not owned\\\"\\n        );\\n\\n        // DERegister, encode(address owner, uint256 chainId, address nftContractAddress, uint256 nftId)\\n        bytes memory message = abi.encode(\\n            DE_REGISTER,\\n            abi.encode(msg.sender, block.chainid, nftContractAddress, nftId)\\n        );\\n        _sendMessageToChild(message);\\n    }\\n\\n    /// @dev NOOP - No messages come from L2 down to L1\\n    function _processMessageFromChild(bytes memory data) internal override {}\\n}\\n\",\"keccak256\":\"0x7a71c300e5c45724e8b68785dcb6af2c7d546c316d5742d90b0a352f49eb09a1\",\"license\":\"MIT\"},\"contracts/Maker/NftOwnership.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\n/// @dev This is a library for other contracts to use that need to verify ownership of an NFT on the current chain.\\n/// Since this only has internal functions, it will be inlined into the calling contract at\\n/// compile time and does not need to be separately deployed on chain.\\nlibrary NftOwnership {\\n    /// @dev For the specified NFT, verify it is owned by the potential owner\\n    function _verifyOwnership(\\n        address nftContractAddress,\\n        uint256 nftId,\\n        address potentialOwner\\n    ) internal view returns (bool) {\\n        // Try ERC1155\\n        (bool success, bytes memory result) = nftContractAddress.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"balanceOf(address,uint256)\\\",\\n                potentialOwner,\\n                nftId\\n            )\\n        );\\n\\n        // If success, check the balance\\n        if (success) {\\n            uint256 balance = abi.decode(result, (uint256));\\n            return balance > 0;\\n        }\\n\\n        // Try ERC721\\n        (success, result) = nftContractAddress.staticcall(\\n            abi.encodeWithSignature(\\\"ownerOf(uint256)\\\", nftId)\\n        );\\n\\n        // If success, check the owner returned\\n        if (success) {\\n            address foundOwner = abi.decode(result, (address));\\n            return foundOwner == potentialOwner;\\n        }\\n\\n        // Try CryptoPunk\\n        (success, result) = nftContractAddress.staticcall(\\n            abi.encodeWithSignature(\\\"punkIndexToAddress(uint256)\\\", nftId)\\n        );\\n\\n        // If success, check the owner returned\\n        if (success) {\\n            address foundOwner = abi.decode(result, (address));\\n            return foundOwner == potentialOwner;\\n        }\\n\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x7c0b4d5f5f60885141a8df004990f97cc7ba56269803b50605cb5b6383c20a7e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063aea4e49e11610071578063aea4e49e14610154578063b7d0ee4314610170578063c0857ba01461018c578063de9b771f146101aa578063e8a28dd7146101c8578063f953cec7146101e6576100a9565b80630e387de6146100ae57806310325264146100cc5780633b700e9b146100ea578063607f2d4214610106578063972c492814610136575b600080fd5b6100b6610202565b6040516100c391906122f8565b60405180910390f35b6100d4610229565b6040516100e191906122f8565b60405180910390f35b61010460048036038101906100ff91906123bb565b61024d565b005b610120600480360381019061011b9190612462565b610319565b60405161012d91906124aa565b60405180910390f35b61013e610339565b60405161014b91906124d4565b60405180910390f35b61016e600480360381019061016991906124ef565b61035f565b005b61018a6004803603810190610185919061251c565b610434565b005b6101946104f7565b6040516101a191906125bb565b60405180910390f35b6101b261051d565b6040516101bf91906125f7565b60405180910390f35b6101d0610541565b6040516101dd91906122f8565b60405180910390f35b61020060048036038101906101fb9190612758565b610565565b005b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03660001b81565b7ff98aef635801dfa470eae0492dd6a267cc7e32661957109ef6316bfd8bea371e81565b61025885853361057f565b610297576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028e906127fe565b60405180910390fd5b60007f58cc5acb742fd5eb9df21407aed105abca7d37584645d014636aa13c7b7bc387334688888888886040516020016102d7979695949392919061282d565b6040516020818303038152906040526040516020016102f7929190612924565b60405160208183030381529060405290506103118161095a565b505050505050565b60036020528060005260406000206000915054906101000a900460ff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146103f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e7906129c6565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61043f82823361057f565b61047e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610475906127fe565b60405180910390fd5b60007ff98aef635801dfa470eae0492dd6a267cc7e32661957109ef6316bfd8bea371e334685856040516020016104b894939291906129e6565b6040516020818303038152906040526040516020016104d8929190612924565b60405160208183030381529060405290506104f28161095a565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f58cc5acb742fd5eb9df21407aed105abca7d37584645d014636aa13c7b7bc38781565b600061057082610a0c565b905061057b81610d11565b5050565b60008060008573ffffffffffffffffffffffffffffffffffffffff1684866040516024016105ae929190612a2b565b6040516020818303038152906040527efdd58e000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516106379190612a90565b600060405180830381855afa9150503d8060008114610672576040519150601f19603f3d011682016040523d82523d6000602084013e610677565b606091505b509150915081156106a8576000818060200190518101906106989190612abc565b9050600081119350505050610953565b8573ffffffffffffffffffffffffffffffffffffffff16856040516024016106d09190612ae9565b6040516020818303038152906040527f6352211e000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161075a9190612a90565b600060405180830381855afa9150503d8060008114610795576040519150601f19603f3d011682016040523d82523d6000602084013e61079a565b606091505b50809250819350505081156107fa576000818060200190518101906107bf9190612b42565b90508473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16149350505050610953565b8573ffffffffffffffffffffffffffffffffffffffff16856040516024016108229190612ae9565b6040516020818303038152906040527f58178168000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516108ac9190612a90565b600060405180830381855afa9150503d80600081146108e7576040519150601f19603f3d011682016040523d82523d6000602084013e6108ec565b606091505b508092508193505050811561094c576000818060200190518101906109119190612b42565b90508473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16149350505050610953565b6000925050505b9392505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b4720477600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016109d7929190612b6f565b600060405180830381600087803b1580156109f157600080fd5b505af1158015610a05573d6000803e3d6000fd5b5050505050565b60606000610a1983610d14565b90506000610a2682610d48565b90506000610a3383610d79565b9050600081610a4184610daa565b610a4a86610fc0565b604051602001610a5c93929190612bc0565b604051602081830303815290604052805190602001209050600015156003600083815260200190815260200160002060009054906101000a900460ff16151514610adb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad290612c6b565b60405180910390fd5b60016003600083815260200190815260200160002060006101000a81548160ff0219169083151502179055506000610b1285610ff1565b90506000610b1f82611116565b9050610b2a8161118d565b73ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610bb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb090612cfd565b60405180910390fd5b6000610bc4876111be565b9050610be2610bd2846111f2565b87610bdc8a611200565b84611231565b610c21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1890612d8f565b60405180910390fd5b610c4f85610c2e89611537565b610c378a611568565b84610c418c61159c565b610c4a8d6115cd565b6115fe565b506000610c5b83611754565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03660001b610c9d610c9860008461179990919063ffffffff16565b6117c8565b60001b14610ce0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd790612dfb565b60405180910390fd5b6000610ceb8461184b565b806020019051810190610cfe9190612e8b565b9050809950505050505050505050919050565b50565b610d1c61225e565b6000610d2f610d2a8461187c565b6118aa565b9050604051806020016040528082815250915050919050565b6060610d728260000151600881518110610d6557610d64612ed4565b5b60200260200101516119bf565b9050919050565b6000610da38260000151600281518110610d9657610d95612ed4565b5b60200260200101516117c8565b9050919050565b60606000604051806020016040528060008152509050600083511115610fb757600080610dd8600086611a76565b60f81c905060018160ff161480610df2575060038160ff16145b15610ebc57600160028651610e079190612f32565b610e119190612f8c565b67ffffffffffffffff811115610e2a57610e2961262d565b5b6040519080825280601f01601f191660200182016040528015610e5c5781602001600182028036833780820191505090505b5092506000610e6c600187611a76565b90508084600081518110610e8357610e82612ed4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506001925050610f28565b6002808651610ecb9190612f32565b610ed59190612f8c565b67ffffffffffffffff811115610eee57610eed61262d565b5b6040519080825280601f01601f191660200182016040528015610f205781602001600182028036833780820191505090505b509250600091505b60008260ff1690505b8351811015610fb357610f5e60028460ff1683610f4e9190612f8c565b610f589190612fc0565b87611a76565b848281518110610f7157610f70612ed4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080610fab90613016565b915050610f31565b5050505b80915050919050565b6000610fea8260000151600981518110610fdd57610fdc612ed4565b5b60200260200101516117c8565b9050919050565b610ff9612271565b611021826000015160068151811061101457611013612ed4565b5b60200260200101516119bf565b81602001819052506000611038826020015161187c565b905061104381611b0e565b1561105e57611051816118aa565b82600001819052506110fe565b6000826020015190506000600182516110779190612f8c565b67ffffffffffffffff8111156110905761108f61262d565b5b6040519080825280601f01601f1916602001820160405280156110c25781602001600182028036833780820191505090505b5090506000808360210191508260200190506110e082828551611b5c565b6110f16110ec8461187c565b6118aa565b8660000181905250505050505b61110783610fc0565b82604001818152505050919050565b61111e612292565b6000611148836000015160038151811061113b5761113a612ed4565b5b60200260200101516118aa565b83604001518151811061115e5761115d612ed4565b5b602002602001015190506040518060400160405280828152602001611182836118aa565b815250915050919050565b60006111b782602001516000815181106111aa576111a9612ed4565b5b6020026020010151611bf9565b9050919050565b60006111e882600001516005815181106111db576111da612ed4565b5b60200260200101516117c8565b60001b9050919050565b606081602001519050919050565b606061122a826000015160078151811061121d5761121c612ed4565b5b60200260200101516119bf565b9050919050565b60008061123d8461187c565b9050600061124a826118aa565b905060608060008690506000806112608b610daa565b905060008151141561127c57600097505050505050505061152f565b60005b86518110156115265781518311156112a25760009850505050505050505061152f565b6112c58782815181106112b8576112b7612ed4565b5b6020026020010151611c1c565b9550858051906020012084146112e65760009850505050505050505061152f565b6113098782815181106112fc576112fb612ed4565b5b60200260200101516118aa565b94506011855114156113fc578151831415611379578c8051906020012061134a8660108151811061133d5761133c612ed4565b5b60200260200101516119bf565b8051906020012014156113685760019850505050505050505061152f565b60009850505050505050505061152f565b600082848151811061138e5761138d612ed4565b5b602001015160f81c60f81b60f81c905060108160ff1611156113bc576000995050505050505050505061152f565b6113e2868260ff16815181106113d5576113d4612ed4565b5b6020026020010151611cac565b60001b94506001846113f49190612fc0565b935050611513565b60028551141561150157600061143661142f8760008151811061142257611421612ed4565b5b60200260200101516119bf565b8486611ce3565b9050825181856114469190612fc0565b14156114a9578d805190602001206114788760018151811061146b5761146a612ed4565b5b60200260200101516119bf565b805190602001201415611497576001995050505050505050505061152f565b6000995050505050505050505061152f565b60008114156114c4576000995050505050505050505061152f565b80846114d09190612fc0565b93506114f6866001815181106114e9576114e8612ed4565b5b6020026020010151611cac565b60001b945050611512565b60009850505050505050505061152f565b5b808061151e90613016565b91505061127f565b50505050505050505b949350505050565b6000611561826000015160038151811061155457611553612ed4565b5b60200260200101516117c8565b9050919050565b6000611592826000015160048151811061158557611584612ed4565b5b60200260200101516117c8565b60001b9050919050565b60006115c682600001516000815181106115b9576115b8612ed4565b5b60200260200101516117c8565b9050919050565b60606115f782600001516001815181106115ea576115e9612ed4565b5b60200260200101516119bf565b9050919050565b600080600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166341539d4a876040518263ffffffff1660e01b815260040161165f9190612ae9565b60a06040518083038186803b15801561167757600080fd5b505afa15801561168b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116af9190613089565b5093505092509250611705828b6116c69190612f8c565b84878d8d8d8d6040516020016116df9493929190613125565b60405160208183030381529060405280519060200120611e19909392919063ffffffff16565b611744576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173b906131bf565b60405180910390fd5b8093505050509695505050505050565b61175c6122b2565b604051806020016040528061178f846020015160018151811061178257611781612ed4565b5b60200260200101516118aa565b8152509050919050565b6117a16122c5565b826000015182815181106117b8576117b7612ed4565b5b6020026020010151905092915050565b60008082600001511180156117e257506021826000015111155b6117eb57600080fd5b60006117fa8360200151611f8a565b9050600081846000015161180e9190612f8c565b90506000808386602001516118239190612fc0565b905080519150602083101561183f57826020036101000a820491505b81945050505050919050565b6060611875826020015160028151811061186857611867612ed4565b5b60200260200101516119bf565b9050919050565b6118846122c5565b600060208301905060405180604001604052808451815260200182815250915050919050565b60606118b582611b0e565b6118be57600080fd5b60006118c983612049565b905060008167ffffffffffffffff8111156118e7576118e661262d565b5b60405190808252806020026020018201604052801561192057816020015b61190d6122c5565b8152602001906001900390816119055790505b50905060006119328560200151611f8a565b85602001516119419190612fc0565b9050600080600090505b848110156119b25761195c836120d7565b915060405180604001604052808381526020018481525084828151811061198657611985612ed4565b5b6020026020010181905250818361199d9190612fc0565b925080806119aa90613016565b91505061194b565b5082945050505050919050565b606060008260000151116119d257600080fd5b60006119e18360200151611f8a565b905060008184600001516119f59190612f8c565b905060008167ffffffffffffffff811115611a1357611a1261262d565b5b6040519080825280601f01601f191660200182016040528015611a455781602001600182028036833780820191505090505b5090506000816020019050611a6a848760200151611a639190612fc0565b82856121b3565b81945050505050919050565b600080600284611a86919061320e565b14611ac957601082600285611a9b919061323f565b81518110611aac57611aab612ed4565b5b602001015160f81c60f81b60f81c611ac4919061327d565b611b03565b601082600285611ad9919061323f565b81518110611aea57611ae9612ed4565b5b602001015160f81c60f81b60f81c611b0291906132ae565b5b60f81b905092915050565b60008082600001511415611b255760009050611b57565b60008083602001519050805160001a915060c060ff168260ff161015611b5057600092505050611b57565b6001925050505b919050565b6000811415611b6a57611bf4565b5b602060ff168110611bb55782518252602060ff1683611b8a9190612fc0565b9250602060ff1682611b9c9190612fc0565b9150602060ff1681611bae9190612f8c565b9050611b6b565b6000600182602060ff16611bc99190612f8c565b610100611bd69190613412565b611be09190612f8c565b905080198451168184511681811785525050505b505050565b60006015826000015114611c0c57600080fd5b611c15826117c8565b9050919050565b60606000826000015167ffffffffffffffff811115611c3e57611c3d61262d565b5b6040519080825280601f01601f191660200182016040528015611c705781602001600182028036833780820191505090505b509050600081511415611c865780915050611ca7565b6000816020019050611ca184602001518286600001516121b3565b81925050505b919050565b60006021826000015114611cbf57600080fd5b60008060018460200151611cd39190612fc0565b9050805191508192505050919050565b600080600090506000611cf586610daa565b90506000815167ffffffffffffffff811115611d1457611d1361262d565b5b6040519080825280601f01601f191660200182016040528015611d465781602001600182028036833780820191505090505b50905060008590505b825186611d5c9190612fc0565b811015611de7576000878281518110611d7857611d77612ed4565b5b602001015160f81c60f81b905080838884611d939190612f8c565b81518110611da457611da3612ed4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350508080611ddf90613016565b915050611d4f565b50808051906020012082805190602001201415611e075781519250611e0c565b600092505b8293505050509392505050565b60008060208351611e2a919061320e565b14611e6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e61906134a9565b60405180910390fd5b600060208351611e7a919061323f565b9050806002611e899190613412565b8510611eca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ec190613515565b60405180910390fd5b6000808790506000602090505b85518111611f79578086015192506000600289611ef4919061320e565b1415611f2a578183604051602001611f0d929190613535565b604051602081830303815290604052805190602001209150611f56565b8282604051602001611f3d929190613535565b6040516020818303038152906040528051906020012091505b600288611f63919061323f565b9750602081611f729190612fc0565b9050611ed7565b508581149350505050949350505050565b600080825160001a9050608060ff16811015611faa576000915050612044565b60b860ff16811080611fcf575060c060ff168110158015611fce575060f860ff1681105b5b15611fde576001915050612044565b60c060ff168110156120195760018060b8611ff99190613561565b60ff16826120079190612f8c565b6120119190612fc0565b915050612044565b60018060f86120289190613561565b60ff16826120369190612f8c565b6120409190612fc0565b9150505b919050565b6000808260000151141561206057600090506120d2565b6000806120708460200151611f8a565b846020015161207f9190612fc0565b90506000846000015185602001516120979190612fc0565b90505b808210156120cb576120ab826120d7565b826120b69190612fc0565b915082806120c390613016565b93505061209a565b8293505050505b919050565b6000806000835160001a9050608060ff168110156120f857600191506121a9565b60b860ff16811015612127576001608060ff16826121169190612f8c565b6121209190612fc0565b91506121a8565b60c060ff168110156121575760b78103600185019450806020036101000a855104600182018101935050506121a7565b60f860ff1681101561218657600160c060ff16826121759190612f8c565b61217f9190612fc0565b91506121a6565b60f78103600185019450806020036101000a855104600182018101935050505b5b5b5b8192505050919050565b60008114156121c157612259565b5b602060ff16811061220c5782518252602060ff16836121e19190612fc0565b9250602060ff16826121f39190612fc0565b9150602060ff16816122059190612f8c565b90506121c2565b600081141561221a57612259565b6000600182602060ff1661222e9190612f8c565b61010061223b9190613412565b6122459190612f8c565b905080198451168184511681811785525050505b505050565b6040518060200160405280606081525090565b60405180606001604052806060815260200160608152602001600081525090565b60405180604001604052806122a56122c5565b8152602001606081525090565b6040518060200160405280606081525090565b604051806040016040528060008152602001600081525090565b6000819050919050565b6122f2816122df565b82525050565b600060208201905061230d60008301846122e9565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061235282612327565b9050919050565b61236281612347565b811461236d57600080fd5b50565b60008135905061237f81612359565b92915050565b6000819050919050565b61239881612385565b81146123a357600080fd5b50565b6000813590506123b58161238f565b92915050565b600080600080600060a086880312156123d7576123d661231d565b5b60006123e588828901612370565b95505060206123f6888289016123a6565b945050604061240788828901612370565b9350506060612418888289016123a6565b9250506080612429888289016123a6565b9150509295509295909350565b61243f816122df565b811461244a57600080fd5b50565b60008135905061245c81612436565b92915050565b6000602082840312156124785761247761231d565b5b60006124868482850161244d565b91505092915050565b60008115159050919050565b6124a48161248f565b82525050565b60006020820190506124bf600083018461249b565b92915050565b6124ce81612347565b82525050565b60006020820190506124e960008301846124c5565b92915050565b6000602082840312156125055761250461231d565b5b600061251384828501612370565b91505092915050565b600080604083850312156125335761253261231d565b5b600061254185828601612370565b9250506020612552858286016123a6565b9150509250929050565b6000819050919050565b600061258161257c61257784612327565b61255c565b612327565b9050919050565b600061259382612566565b9050919050565b60006125a582612588565b9050919050565b6125b58161259a565b82525050565b60006020820190506125d060008301846125ac565b92915050565b60006125e182612588565b9050919050565b6125f1816125d6565b82525050565b600060208201905061260c60008301846125e8565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6126658261261c565b810181811067ffffffffffffffff821117156126845761268361262d565b5b80604052505050565b6000612697612313565b90506126a3828261265c565b919050565b600067ffffffffffffffff8211156126c3576126c261262d565b5b6126cc8261261c565b9050602081019050919050565b82818337600083830152505050565b60006126fb6126f6846126a8565b61268d565b90508281526020810184848401111561271757612716612617565b5b6127228482856126d9565b509392505050565b600082601f83011261273f5761273e612612565b5b813561274f8482602086016126e8565b91505092915050565b60006020828403121561276e5761276d61231d565b5b600082013567ffffffffffffffff81111561278c5761278b612322565b5b6127988482850161272a565b91505092915050565b600082825260208201905092915050565b7f4e4654206e6f74206f776e656400000000000000000000000000000000000000600082015250565b60006127e8600d836127a1565b91506127f3826127b2565b602082019050919050565b60006020820190508181036000830152612817816127db565b9050919050565b61282781612385565b82525050565b600060e082019050612842600083018a6124c5565b61284f602083018961281e565b61285c60408301886124c5565b612869606083018761281e565b61287660808301866124c5565b61288360a083018561281e565b61289060c083018461281e565b98975050505050505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156128d65780820151818401526020810190506128bb565b838111156128e5576000848401525b50505050565b60006128f68261289c565b61290081856128a7565b93506129108185602086016128b8565b6129198161261c565b840191505092915050565b600060408201905061293960008301856122e9565b818103602083015261294b81846128eb565b90509392505050565b7f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160008201527f4c52454144595f53455400000000000000000000000000000000000000000000602082015250565b60006129b0602a836127a1565b91506129bb82612954565b604082019050919050565b600060208201905081810360008301526129df816129a3565b9050919050565b60006080820190506129fb60008301876124c5565b612a08602083018661281e565b612a1560408301856124c5565b612a22606083018461281e565b95945050505050565b6000604082019050612a4060008301856124c5565b612a4d602083018461281e565b9392505050565b600081905092915050565b6000612a6a8261289c565b612a748185612a54565b9350612a848185602086016128b8565b80840191505092915050565b6000612a9c8284612a5f565b915081905092915050565b600081519050612ab68161238f565b92915050565b600060208284031215612ad257612ad161231d565b5b6000612ae084828501612aa7565b91505092915050565b6000602082019050612afe600083018461281e565b92915050565b6000612b0f82612327565b9050919050565b612b1f81612b04565b8114612b2a57600080fd5b50565b600081519050612b3c81612b16565b92915050565b600060208284031215612b5857612b5761231d565b5b6000612b6684828501612b2d565b91505092915050565b6000604082019050612b8460008301856124c5565b8181036020830152612b9681846128eb565b90509392505050565b6000819050919050565b612bba612bb582612385565b612b9f565b82525050565b6000612bcc8286612ba9565b602082019150612bdc8285612a5f565b9150612be88284612ba9565b602082019150819050949350505050565b7f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560008201527f5353454400000000000000000000000000000000000000000000000000000000602082015250565b6000612c556024836127a1565b9150612c6082612bf9565b604082019050919050565b60006020820190508181036000830152612c8481612c48565b9050919050565b7f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f5460008201527f554e4e454c000000000000000000000000000000000000000000000000000000602082015250565b6000612ce76025836127a1565b9150612cf282612c8b565b604082019050919050565b60006020820190508181036000830152612d1681612cda565b9050919050565b7f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260008201527f4f4f460000000000000000000000000000000000000000000000000000000000602082015250565b6000612d796023836127a1565b9150612d8482612d1d565b604082019050919050565b60006020820190508181036000830152612da881612d6c565b9050919050565b7f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e415455524500600082015250565b6000612de5601f836127a1565b9150612df082612daf565b602082019050919050565b60006020820190508181036000830152612e1481612dd8565b9050919050565b6000612e2e612e29846126a8565b61268d565b905082815260208101848484011115612e4a57612e49612617565b5b612e558482856128b8565b509392505050565b600082601f830112612e7257612e71612612565b5b8151612e82848260208601612e1b565b91505092915050565b600060208284031215612ea157612ea061231d565b5b600082015167ffffffffffffffff811115612ebf57612ebe612322565b5b612ecb84828501612e5d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612f3d82612385565b9150612f4883612385565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612f8157612f80612f03565b5b828202905092915050565b6000612f9782612385565b9150612fa283612385565b925082821015612fb557612fb4612f03565b5b828203905092915050565b6000612fcb82612385565b9150612fd683612385565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561300b5761300a612f03565b5b828201905092915050565b600061302182612385565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561305457613053612f03565b5b600182019050919050565b60008151905061306e81612436565b92915050565b60008151905061308381612359565b92915050565b600080600080600060a086880312156130a5576130a461231d565b5b60006130b38882890161305f565b95505060206130c488828901612aa7565b94505060406130d588828901612aa7565b93505060606130e688828901612aa7565b92505060806130f788828901613074565b9150509295509295909350565b6000819050919050565b61311f61311a826122df565b613104565b82525050565b60006131318287612ba9565b6020820191506131418286612ba9565b602082019150613151828561310e565b602082019150613161828461310e565b60208201915081905095945050505050565b7f4678526f6f7454756e6e656c3a20494e56414c49445f48454144455200000000600082015250565b60006131a9601c836127a1565b91506131b482613173565b602082019050919050565b600060208201905081810360008301526131d88161319c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061321982612385565b915061322483612385565b925082613234576132336131df565b5b828206905092915050565b600061324a82612385565b915061325583612385565b925082613265576132646131df565b5b828204905092915050565b600060ff82169050919050565b600061328882613270565b915061329383613270565b9250826132a3576132a26131df565b5b828206905092915050565b60006132b982613270565b91506132c483613270565b9250826132d4576132d36131df565b5b828204905092915050565b60008160011c9050919050565b6000808291508390505b60018511156133365780860481111561331257613311612f03565b5b60018516156133215780820291505b808102905061332f856132df565b94506132f6565b94509492505050565b60008261334f576001905061340b565b8161335d576000905061340b565b8160018114613373576002811461337d576133ac565b600191505061340b565b60ff84111561338f5761338e612f03565b5b8360020a9150848211156133a6576133a5612f03565b5b5061340b565b5060208310610133831016604e8410600b84101617156133e15782820a9050838111156133dc576133db612f03565b5b61340b565b6133ee84848460016132ec565b9250905081840481111561340557613404612f03565b5b81810290505b9392505050565b600061341d82612385565b915061342883612385565b92506134557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461333f565b905092915050565b7f496e76616c69642070726f6f66206c656e677468000000000000000000000000600082015250565b60006134936014836127a1565b915061349e8261345d565b602082019050919050565b600060208201905081810360008301526134c281613486565b9050919050565b7f4c65616620696e64657820697320746f6f206269670000000000000000000000600082015250565b60006134ff6015836127a1565b915061350a826134c9565b602082019050919050565b6000602082019050818103600083015261352e816134f2565b9050919050565b6000613541828561310e565b602082019150613551828461310e565b6020820191508190509392505050565b600061356c82613270565b915061357783613270565b92508282101561358a57613589612f03565b5b82820390509291505056fea264697066735822122024a06241ecc20b5aef949bca38d08e9e9fad4de72ba5830f6710d6b5ac1869c564736f6c63430008090033",
  "devdoc": {
    "details": "This contract lives on the L1 and allows NFT owners to register NFTs that live on the L1. Once ownership is verified, it will send a message up to the contracts on the L2 specifying that the NFT has been registered or unregistered. This is not an upgradeable contract and should not be used with a proxy.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "You must call setFxChildTunnel() with the ChildRegistrar address on the L2 after deployment",
        "params": {
          "_checkpointManager": "This is a well known contract deployed by matic that is used to verify messages coming from the L2 down to L1.",
          "_fxRoot": "This is a well known contract deployed by matic that will emit the events going from L1 to L2."
        }
      },
      "deRegisterNft(address,uint256)": {
        "details": "Allows a NFT owner to de-register the NFT in the protocol on L1 Once the ownership is verified a message will be sent to the Child contract on the L2 chain that will trigger a desgregistration there."
      },
      "receiveMessage(bytes)": {
        "details": "This function verifies if the transaction actually happened on child chain",
        "params": {
          "inputData": "RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt"
        }
      },
      "registerNft(address,uint256,address,uint256,uint256)": {
        "details": "Allows a NFT owner to register the NFT in the protocol on L1 Once the ownership is verified a message will be sent to the Child contract on the L2 chain that will trigger a registration there."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "receiveMessage(bytes)": {
        "notice": "receive message from  L2 to L1, validated by proof"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2087,
        "contract": "contracts/Bridge/RootRegistrar.sol:RootRegistrar",
        "label": "fxRoot",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IFxStateSender)2037"
      },
      {
        "astId": 2090,
        "contract": "contracts/Bridge/RootRegistrar.sol:RootRegistrar",
        "label": "checkpointManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICheckpointManager)2055"
      },
      {
        "astId": 2092,
        "contract": "contracts/Bridge/RootRegistrar.sol:RootRegistrar",
        "label": "fxChildTunnel",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2096,
        "contract": "contracts/Bridge/RootRegistrar.sol:RootRegistrar",
        "label": "processedExits",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICheckpointManager)2055": {
        "encoding": "inplace",
        "label": "contract ICheckpointManager",
        "numberOfBytes": "20"
      },
      "t_contract(IFxStateSender)2037": {
        "encoding": "inplace",
        "label": "contract IFxStateSender",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}
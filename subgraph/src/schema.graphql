type User @entity {
  id: ID! #publicAddress
  makerRewardsBalance: BigDecimal!
  creatorRewardsBalance: BigDecimal!
  referrerRewardsBalance: BigDecimal!
}

type Source @entity {
  id: ID! #event.params.sourceId.toHexString()
  sourceId: BigInt!
  nftChainId: BigInt!
  nftContractAddress: Bytes!
  nftId: BigInt!
  nftOwnerAddress: Bytes!
  nftCreatorAddress: Bytes!

  makerUser: User!

  registered: Boolean!
}

type Transform @entity {
  id: ID! #event.params.transformId.toHexString()
  transformId: BigInt!

  source: Source!

  totalSold: BigInt!
  makerFeesTotal: BigDecimal!
  creatorFeesTotal: BigDecimal!
  referrerFeesTotal: BigDecimal!
}

type UserReaction @entity {
  id: ID! #curatorShareTokenId
  transform: Transform!
  quantity: BigInt!

  curatorShareCount: BigInt! #number of shares
  curatorShareBalance: BigDecimal! #payment token balance
  referrerFeesBalance: BigDecimal!
}

type CuratorReaction @entity {
  id: ID! #event.transaction.hash.toHex() + "-" + event.logIndex.toString()
  curator: User!
  reaction: Reaction!
  transform: Transform!
  quantity: BigInt!

  metadataHash: BigInt
}

type CuratorPosition @entity {
  id: ID! #msg.sender + takerNft.id
  takerNFT: TakerNFT!
  shareCount: BigInt!
  curator: User!
}

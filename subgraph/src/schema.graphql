type Source @entity {
  id: ID! #sourceId
  sourceId: BigInt!
  sourceIdHex: String
  user: Bytes!

  # maker media
  nftChainId: BigInt!
  nftContractAddress: Bytes!
  nftId: BigInt!

  # creator info
  creatorAddresses: [String!]
  creatorSaleBasisPoints: [BigInt!]

  # status
  registered: Boolean!

  createdAt: BigInt!
  updatedAt: BigInt!
  blockNumber: BigInt!
}

type Transform @entity {
  id: ID! #transformId
  transformId: BigInt!
  source: Source!
  optionBits: BigInt!
  ipfsHash: String
  name: String
  tags: [String!]

  createdAt: BigInt!
  updatedAt: BigInt!
  blockNumber: BigInt!
}

type Reaction @entity {
  id: ID! #reactionId
  reactionId: BigInt!
  transform: Transform!

  parameterVersion: BigInt!

  totalSold: BigInt!
  totalReferrerFees: BigDecimal!
  totalCreatorFees: BigDecimal!
  totalMakerFees: BigDecimal!

  createdAt: BigInt!
  updatedAt: BigInt!
  blockNumber: BigInt!
}

type UserReaction @entity {
  id: ID! #reactionId + "-" + msg.sender
  user: Bytes!
  reaction: Reaction!

  # current
  currentBalance: BigInt!

  # historical
  totalPurchased: BigInt!

  createdAt: BigInt!
  updatedAt: BigInt!
  blockNumber: BigInt!
}

type UserSpend @entity {
  id: ID! #event.transaction.hash.toHex() + "-" + event.logIndex.toString()
  user: Bytes!

  # spend
  reaction: Reaction!
  reactionQuantity: BigInt!
  ipfsHash: String
  comment: String
  tags: [String!]

  # result
  curatorVaultToken: CuratorVaultToken!
  curatorTokensPurchased: BigInt!

  createdAt: BigInt!
  updatedAt: BigInt!
  blockNumber: BigInt!
}

type UserPosition @entity {
  id: ID! #curatorTokenId + "-" + msg.sender
  user: Bytes!
  curatorVaultToken: CuratorVaultToken!

  # current
  currentTokenBalance: BigInt!

  # historical
  totalTokenPurchased: BigInt!
  totalRefunded: BigDecimal!

  createdAt: BigInt!
  updatedAt: BigInt!
  blockNumber: BigInt!
}

type CuratorVaultToken @entity {
  id: ID! #curatorTokenId
  curatorVaultAddress: Bytes!
  curatorTokenId: BigInt!
  paymentToken: Bytes!

  # taker media
  nftChainId: BigInt!
  nftContractAddress: Bytes!
  nftId: BigInt!

  # current pricing info
  currentTokensOutstanding: BigInt!
  currentDepositBalance: BigDecimal!

  # historical totals
  totalTokenSold: BigInt!
  totalDeposited: BigDecimal!

  # taker tokens
  takerTokensBalance: BigInt!
  takerRefunded: BigInt!
  takerCreatorRefunded: BigInt!

  createdAt: BigInt!
  updatedAt: BigInt!
  blockNumber: BigInt!
}

# -----

type UserEarning @entity {
  id: ID! #publicAddress + "-" + paymentToken
  user: Bytes!
  paymentToken: Bytes!

  # current
  currentMakerRewards: BigDecimal!
  currentCreatorRewards: BigDecimal!
  currentReferrerRewards: BigDecimal!

  # historical
  totalMakerRewards: BigDecimal!
  totalCreatorRewards: BigDecimal!
  totalReferrerRewards: BigDecimal!
  totalRefunded: BigDecimal!

  createdAt: BigInt!
  updatedAt: BigInt!
  blockNumber: BigInt!
}

type UserSell @entity {
  id: ID! #event.transaction.hash.toHex() + "-" + event.logIndex.toString()
  user: Bytes!

  # sell
  curatorVaultToken: CuratorVaultToken!
  paymentTokenRefunded: BigInt!
  curatorTokensSold: BigInt!

  createdAt: BigInt!
  updatedAt: BigInt!
  blockNumber: BigInt!
}

type LikeTokenContract @entity {
  id: ID! # deployedContract
  takerNftChainId: BigInt!
  takerNftAddress: Bytes!
  takerNftId: BigInt!
  deployedContract: Bytes!

  createdAt: BigInt!
  updatedAt: BigInt!
  blockNumber: BigInt!
}
